
DHCP_DNS_SNTP_STM32C6T6_WIZ5500.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000064c  08004d24  08004d24  00014d24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005370  08005370  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005378  08005378  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08005380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200000d8  08005454  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200005f8  08005454  000205f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001263b  00000000  00000000  000200fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003249  00000000  00000000  00032738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c370  00000000  00000000  00035981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b50  00000000  00000000  00041cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f48  00000000  00000000  00042848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018aa6  00000000  00000000  00043790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001315c  00000000  00000000  0005c236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087c44  00000000  00000000  0006f392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f6fd6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000029d4  00000000  00000000  000f7028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d0c 	.word	0x08004d0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	08004d0c 	.word	0x08004d0c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_uldivmod>:
 800015c:	b953      	cbnz	r3, 8000174 <__aeabi_uldivmod+0x18>
 800015e:	b94a      	cbnz	r2, 8000174 <__aeabi_uldivmod+0x18>
 8000160:	2900      	cmp	r1, #0
 8000162:	bf08      	it	eq
 8000164:	2800      	cmpeq	r0, #0
 8000166:	bf1c      	itt	ne
 8000168:	f04f 31ff 	movne.w	r1, #4294967295
 800016c:	f04f 30ff 	movne.w	r0, #4294967295
 8000170:	f000 b976 	b.w	8000460 <__aeabi_idiv0>
 8000174:	f1ad 0c08 	sub.w	ip, sp, #8
 8000178:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800017c:	f000 f806 	bl	800018c <__udivmoddi4>
 8000180:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000188:	b004      	add	sp, #16
 800018a:	4770      	bx	lr

0800018c <__udivmoddi4>:
 800018c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000190:	9e08      	ldr	r6, [sp, #32]
 8000192:	460d      	mov	r5, r1
 8000194:	4604      	mov	r4, r0
 8000196:	4688      	mov	r8, r1
 8000198:	2b00      	cmp	r3, #0
 800019a:	d14d      	bne.n	8000238 <__udivmoddi4+0xac>
 800019c:	428a      	cmp	r2, r1
 800019e:	4694      	mov	ip, r2
 80001a0:	d968      	bls.n	8000274 <__udivmoddi4+0xe8>
 80001a2:	fab2 f282 	clz	r2, r2
 80001a6:	b152      	cbz	r2, 80001be <__udivmoddi4+0x32>
 80001a8:	fa01 f302 	lsl.w	r3, r1, r2
 80001ac:	f1c2 0120 	rsb	r1, r2, #32
 80001b0:	fa20 f101 	lsr.w	r1, r0, r1
 80001b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80001b8:	ea41 0803 	orr.w	r8, r1, r3
 80001bc:	4094      	lsls	r4, r2
 80001be:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001c2:	fbb8 f7f1 	udiv	r7, r8, r1
 80001c6:	fa1f fe8c 	uxth.w	lr, ip
 80001ca:	fb01 8817 	mls	r8, r1, r7, r8
 80001ce:	fb07 f00e 	mul.w	r0, r7, lr
 80001d2:	0c23      	lsrs	r3, r4, #16
 80001d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001d8:	4298      	cmp	r0, r3
 80001da:	d90a      	bls.n	80001f2 <__udivmoddi4+0x66>
 80001dc:	eb1c 0303 	adds.w	r3, ip, r3
 80001e0:	f107 35ff 	add.w	r5, r7, #4294967295
 80001e4:	f080 811e 	bcs.w	8000424 <__udivmoddi4+0x298>
 80001e8:	4298      	cmp	r0, r3
 80001ea:	f240 811b 	bls.w	8000424 <__udivmoddi4+0x298>
 80001ee:	3f02      	subs	r7, #2
 80001f0:	4463      	add	r3, ip
 80001f2:	1a1b      	subs	r3, r3, r0
 80001f4:	fbb3 f0f1 	udiv	r0, r3, r1
 80001f8:	fb01 3310 	mls	r3, r1, r0, r3
 80001fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000200:	b2a4      	uxth	r4, r4
 8000202:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000206:	45a6      	cmp	lr, r4
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x94>
 800020a:	eb1c 0404 	adds.w	r4, ip, r4
 800020e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000212:	f080 8109 	bcs.w	8000428 <__udivmoddi4+0x29c>
 8000216:	45a6      	cmp	lr, r4
 8000218:	f240 8106 	bls.w	8000428 <__udivmoddi4+0x29c>
 800021c:	4464      	add	r4, ip
 800021e:	3802      	subs	r0, #2
 8000220:	2100      	movs	r1, #0
 8000222:	eba4 040e 	sub.w	r4, r4, lr
 8000226:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800022a:	b11e      	cbz	r6, 8000234 <__udivmoddi4+0xa8>
 800022c:	2300      	movs	r3, #0
 800022e:	40d4      	lsrs	r4, r2
 8000230:	e9c6 4300 	strd	r4, r3, [r6]
 8000234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000238:	428b      	cmp	r3, r1
 800023a:	d908      	bls.n	800024e <__udivmoddi4+0xc2>
 800023c:	2e00      	cmp	r6, #0
 800023e:	f000 80ee 	beq.w	800041e <__udivmoddi4+0x292>
 8000242:	2100      	movs	r1, #0
 8000244:	e9c6 0500 	strd	r0, r5, [r6]
 8000248:	4608      	mov	r0, r1
 800024a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800024e:	fab3 f183 	clz	r1, r3
 8000252:	2900      	cmp	r1, #0
 8000254:	d14a      	bne.n	80002ec <__udivmoddi4+0x160>
 8000256:	42ab      	cmp	r3, r5
 8000258:	d302      	bcc.n	8000260 <__udivmoddi4+0xd4>
 800025a:	4282      	cmp	r2, r0
 800025c:	f200 80fc 	bhi.w	8000458 <__udivmoddi4+0x2cc>
 8000260:	1a84      	subs	r4, r0, r2
 8000262:	eb65 0303 	sbc.w	r3, r5, r3
 8000266:	2001      	movs	r0, #1
 8000268:	4698      	mov	r8, r3
 800026a:	2e00      	cmp	r6, #0
 800026c:	d0e2      	beq.n	8000234 <__udivmoddi4+0xa8>
 800026e:	e9c6 4800 	strd	r4, r8, [r6]
 8000272:	e7df      	b.n	8000234 <__udivmoddi4+0xa8>
 8000274:	b902      	cbnz	r2, 8000278 <__udivmoddi4+0xec>
 8000276:	deff      	udf	#255	; 0xff
 8000278:	fab2 f282 	clz	r2, r2
 800027c:	2a00      	cmp	r2, #0
 800027e:	f040 8091 	bne.w	80003a4 <__udivmoddi4+0x218>
 8000282:	eba1 000c 	sub.w	r0, r1, ip
 8000286:	2101      	movs	r1, #1
 8000288:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800028c:	fa1f fe8c 	uxth.w	lr, ip
 8000290:	fbb0 f3f7 	udiv	r3, r0, r7
 8000294:	fb07 0013 	mls	r0, r7, r3, r0
 8000298:	0c25      	lsrs	r5, r4, #16
 800029a:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800029e:	fb0e f003 	mul.w	r0, lr, r3
 80002a2:	42a8      	cmp	r0, r5
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0x12c>
 80002a6:	eb1c 0505 	adds.w	r5, ip, r5
 80002aa:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ae:	d202      	bcs.n	80002b6 <__udivmoddi4+0x12a>
 80002b0:	42a8      	cmp	r0, r5
 80002b2:	f200 80ce 	bhi.w	8000452 <__udivmoddi4+0x2c6>
 80002b6:	4643      	mov	r3, r8
 80002b8:	1a2d      	subs	r5, r5, r0
 80002ba:	fbb5 f0f7 	udiv	r0, r5, r7
 80002be:	fb07 5510 	mls	r5, r7, r0, r5
 80002c2:	fb0e fe00 	mul.w	lr, lr, r0
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002cc:	45a6      	cmp	lr, r4
 80002ce:	d908      	bls.n	80002e2 <__udivmoddi4+0x156>
 80002d0:	eb1c 0404 	adds.w	r4, ip, r4
 80002d4:	f100 35ff 	add.w	r5, r0, #4294967295
 80002d8:	d202      	bcs.n	80002e0 <__udivmoddi4+0x154>
 80002da:	45a6      	cmp	lr, r4
 80002dc:	f200 80b6 	bhi.w	800044c <__udivmoddi4+0x2c0>
 80002e0:	4628      	mov	r0, r5
 80002e2:	eba4 040e 	sub.w	r4, r4, lr
 80002e6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002ea:	e79e      	b.n	800022a <__udivmoddi4+0x9e>
 80002ec:	f1c1 0720 	rsb	r7, r1, #32
 80002f0:	408b      	lsls	r3, r1
 80002f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80002f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80002fa:	fa25 fa07 	lsr.w	sl, r5, r7
 80002fe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000302:	fbba f8f9 	udiv	r8, sl, r9
 8000306:	fa20 f307 	lsr.w	r3, r0, r7
 800030a:	fb09 aa18 	mls	sl, r9, r8, sl
 800030e:	408d      	lsls	r5, r1
 8000310:	fa1f fe8c 	uxth.w	lr, ip
 8000314:	431d      	orrs	r5, r3
 8000316:	fa00 f301 	lsl.w	r3, r0, r1
 800031a:	fb08 f00e 	mul.w	r0, r8, lr
 800031e:	0c2c      	lsrs	r4, r5, #16
 8000320:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000324:	42a0      	cmp	r0, r4
 8000326:	fa02 f201 	lsl.w	r2, r2, r1
 800032a:	d90b      	bls.n	8000344 <__udivmoddi4+0x1b8>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f108 3aff 	add.w	sl, r8, #4294967295
 8000334:	f080 8088 	bcs.w	8000448 <__udivmoddi4+0x2bc>
 8000338:	42a0      	cmp	r0, r4
 800033a:	f240 8085 	bls.w	8000448 <__udivmoddi4+0x2bc>
 800033e:	f1a8 0802 	sub.w	r8, r8, #2
 8000342:	4464      	add	r4, ip
 8000344:	1a24      	subs	r4, r4, r0
 8000346:	fbb4 f0f9 	udiv	r0, r4, r9
 800034a:	fb09 4410 	mls	r4, r9, r0, r4
 800034e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000352:	b2ad      	uxth	r5, r5
 8000354:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x1e2>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 35ff 	add.w	r5, r0, #4294967295
 8000364:	d26c      	bcs.n	8000440 <__udivmoddi4+0x2b4>
 8000366:	45a6      	cmp	lr, r4
 8000368:	d96a      	bls.n	8000440 <__udivmoddi4+0x2b4>
 800036a:	3802      	subs	r0, #2
 800036c:	4464      	add	r4, ip
 800036e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000372:	fba0 9502 	umull	r9, r5, r0, r2
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	42ac      	cmp	r4, r5
 800037c:	46c8      	mov	r8, r9
 800037e:	46ae      	mov	lr, r5
 8000380:	d356      	bcc.n	8000430 <__udivmoddi4+0x2a4>
 8000382:	d053      	beq.n	800042c <__udivmoddi4+0x2a0>
 8000384:	2e00      	cmp	r6, #0
 8000386:	d069      	beq.n	800045c <__udivmoddi4+0x2d0>
 8000388:	ebb3 0208 	subs.w	r2, r3, r8
 800038c:	eb64 040e 	sbc.w	r4, r4, lr
 8000390:	fa22 f301 	lsr.w	r3, r2, r1
 8000394:	fa04 f707 	lsl.w	r7, r4, r7
 8000398:	431f      	orrs	r7, r3
 800039a:	40cc      	lsrs	r4, r1
 800039c:	e9c6 7400 	strd	r7, r4, [r6]
 80003a0:	2100      	movs	r1, #0
 80003a2:	e747      	b.n	8000234 <__udivmoddi4+0xa8>
 80003a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003a8:	f1c2 0120 	rsb	r1, r2, #32
 80003ac:	fa25 f301 	lsr.w	r3, r5, r1
 80003b0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b4:	fa20 f101 	lsr.w	r1, r0, r1
 80003b8:	4095      	lsls	r5, r2
 80003ba:	430d      	orrs	r5, r1
 80003bc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c0:	fb07 3311 	mls	r3, r7, r1, r3
 80003c4:	fa1f fe8c 	uxth.w	lr, ip
 80003c8:	0c28      	lsrs	r0, r5, #16
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	fb01 f30e 	mul.w	r3, r1, lr
 80003d2:	4283      	cmp	r3, r0
 80003d4:	fa04 f402 	lsl.w	r4, r4, r2
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x260>
 80003da:	eb1c 0000 	adds.w	r0, ip, r0
 80003de:	f101 38ff 	add.w	r8, r1, #4294967295
 80003e2:	d22f      	bcs.n	8000444 <__udivmoddi4+0x2b8>
 80003e4:	4283      	cmp	r3, r0
 80003e6:	d92d      	bls.n	8000444 <__udivmoddi4+0x2b8>
 80003e8:	3902      	subs	r1, #2
 80003ea:	4460      	add	r0, ip
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	fbb0 f3f7 	udiv	r3, r0, r7
 80003f2:	fb07 0013 	mls	r0, r7, r3, r0
 80003f6:	b2ad      	uxth	r5, r5
 80003f8:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80003fc:	fb03 f00e 	mul.w	r0, r3, lr
 8000400:	42a8      	cmp	r0, r5
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x28a>
 8000404:	eb1c 0505 	adds.w	r5, ip, r5
 8000408:	f103 38ff 	add.w	r8, r3, #4294967295
 800040c:	d216      	bcs.n	800043c <__udivmoddi4+0x2b0>
 800040e:	42a8      	cmp	r0, r5
 8000410:	d914      	bls.n	800043c <__udivmoddi4+0x2b0>
 8000412:	3b02      	subs	r3, #2
 8000414:	4465      	add	r5, ip
 8000416:	1a28      	subs	r0, r5, r0
 8000418:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041c:	e738      	b.n	8000290 <__udivmoddi4+0x104>
 800041e:	4631      	mov	r1, r6
 8000420:	4630      	mov	r0, r6
 8000422:	e707      	b.n	8000234 <__udivmoddi4+0xa8>
 8000424:	462f      	mov	r7, r5
 8000426:	e6e4      	b.n	80001f2 <__udivmoddi4+0x66>
 8000428:	4618      	mov	r0, r3
 800042a:	e6f9      	b.n	8000220 <__udivmoddi4+0x94>
 800042c:	454b      	cmp	r3, r9
 800042e:	d2a9      	bcs.n	8000384 <__udivmoddi4+0x1f8>
 8000430:	ebb9 0802 	subs.w	r8, r9, r2
 8000434:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000438:	3801      	subs	r0, #1
 800043a:	e7a3      	b.n	8000384 <__udivmoddi4+0x1f8>
 800043c:	4643      	mov	r3, r8
 800043e:	e7ea      	b.n	8000416 <__udivmoddi4+0x28a>
 8000440:	4628      	mov	r0, r5
 8000442:	e794      	b.n	800036e <__udivmoddi4+0x1e2>
 8000444:	4641      	mov	r1, r8
 8000446:	e7d1      	b.n	80003ec <__udivmoddi4+0x260>
 8000448:	46d0      	mov	r8, sl
 800044a:	e77b      	b.n	8000344 <__udivmoddi4+0x1b8>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	e747      	b.n	80002e2 <__udivmoddi4+0x156>
 8000452:	3b02      	subs	r3, #2
 8000454:	4465      	add	r5, ip
 8000456:	e72f      	b.n	80002b8 <__udivmoddi4+0x12c>
 8000458:	4608      	mov	r0, r1
 800045a:	e706      	b.n	800026a <__udivmoddi4+0xde>
 800045c:	4631      	mov	r1, r6
 800045e:	e6e9      	b.n	8000234 <__udivmoddi4+0xa8>

08000460 <__aeabi_idiv0>:
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop

08000464 <my_ip_conflict>:

/************************************
 * @ brief Call back for ip Conflict
 ************************************/
void my_ip_conflict(void)
{
 8000464:	b508      	push	{r3, lr}
#ifdef _MAIN_DEBUG_
	printf("CONFLICT IP from DHCP\r\n");
 8000466:	4802      	ldr	r0, [pc, #8]	; (8000470 <my_ip_conflict+0xc>)
 8000468:	f003 fbce 	bl	8003c08 <puts>
#endif
   //halt or reset or any...
   while(1); // this example is halt.
 800046c:	e7fe      	b.n	800046c <my_ip_conflict+0x8>
 800046e:	bf00      	nop
 8000470:	08004d34 	.word	0x08004d34

08000474 <Display_Net_Conf>:
	uint8_t tmpstr[6] = {0,};
 8000474:	2300      	movs	r3, #0
{
 8000476:	b510      	push	{r4, lr}
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8000478:	4c22      	ldr	r4, [pc, #136]	; (8000504 <Display_Net_Conf+0x90>)
{
 800047a:	b086      	sub	sp, #24
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 800047c:	4621      	mov	r1, r4
 800047e:	2001      	movs	r0, #1
	uint8_t tmpstr[6] = {0,};
 8000480:	9304      	str	r3, [sp, #16]
 8000482:	f8ad 3014 	strh.w	r3, [sp, #20]
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 8000486:	f002 fe13 	bl	80030b0 <ctlnetwork>
	ctlwizchip(CW_GET_ID,(void*)tmpstr);
 800048a:	a904      	add	r1, sp, #16
 800048c:	2008      	movs	r0, #8
 800048e:	f002 fd05 	bl	8002e9c <ctlwizchip>
	if(gWIZNETINFO.dhcp == NETINFO_DHCP) printf("\r\n===== %s NET CONF : DHCP =====\r\n",(char*)tmpstr);
 8000492:	7da3      	ldrb	r3, [r4, #22]
 8000494:	a904      	add	r1, sp, #16
 8000496:	2b02      	cmp	r3, #2
 8000498:	bf0c      	ite	eq
 800049a:	481b      	ldreq	r0, [pc, #108]	; (8000508 <Display_Net_Conf+0x94>)
		else printf("\r\n===== %s NET CONF : Static =====\r\n",(char*)tmpstr);
 800049c:	481b      	ldrne	r0, [pc, #108]	; (800050c <Display_Net_Conf+0x98>)
 800049e:	f003 fb2d 	bl	8003afc <iprintf>
	printf(" MAC : %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 80004a2:	7963      	ldrb	r3, [r4, #5]
 80004a4:	7862      	ldrb	r2, [r4, #1]
 80004a6:	9302      	str	r3, [sp, #8]
 80004a8:	7923      	ldrb	r3, [r4, #4]
 80004aa:	7821      	ldrb	r1, [r4, #0]
 80004ac:	9301      	str	r3, [sp, #4]
 80004ae:	78e3      	ldrb	r3, [r4, #3]
 80004b0:	4817      	ldr	r0, [pc, #92]	; (8000510 <Display_Net_Conf+0x9c>)
 80004b2:	9300      	str	r3, [sp, #0]
 80004b4:	78a3      	ldrb	r3, [r4, #2]
 80004b6:	f003 fb21 	bl	8003afc <iprintf>
	printf(" IP : %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 80004ba:	7a63      	ldrb	r3, [r4, #9]
 80004bc:	79e2      	ldrb	r2, [r4, #7]
 80004be:	79a1      	ldrb	r1, [r4, #6]
 80004c0:	9300      	str	r3, [sp, #0]
 80004c2:	4814      	ldr	r0, [pc, #80]	; (8000514 <Display_Net_Conf+0xa0>)
 80004c4:	7a23      	ldrb	r3, [r4, #8]
 80004c6:	f003 fb19 	bl	8003afc <iprintf>
	printf(" GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 80004ca:	7c63      	ldrb	r3, [r4, #17]
 80004cc:	7be2      	ldrb	r2, [r4, #15]
 80004ce:	7ba1      	ldrb	r1, [r4, #14]
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	4811      	ldr	r0, [pc, #68]	; (8000518 <Display_Net_Conf+0xa4>)
 80004d4:	7c23      	ldrb	r3, [r4, #16]
 80004d6:	f003 fb11 	bl	8003afc <iprintf>
	printf(" SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 80004da:	7b63      	ldrb	r3, [r4, #13]
 80004dc:	7ae2      	ldrb	r2, [r4, #11]
 80004de:	7aa1      	ldrb	r1, [r4, #10]
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	480e      	ldr	r0, [pc, #56]	; (800051c <Display_Net_Conf+0xa8>)
 80004e4:	7b23      	ldrb	r3, [r4, #12]
 80004e6:	f003 fb09 	bl	8003afc <iprintf>
	printf(" DNS IP : %d.%d.%d.%d\r\n", gWIZNETINFO.dns[0], gWIZNETINFO.dns[1], gWIZNETINFO.dns[2], gWIZNETINFO.dns[3]);
 80004ea:	7d63      	ldrb	r3, [r4, #21]
 80004ec:	7ce2      	ldrb	r2, [r4, #19]
 80004ee:	7ca1      	ldrb	r1, [r4, #18]
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <Display_Net_Conf+0xac>)
 80004f4:	7d23      	ldrb	r3, [r4, #20]
 80004f6:	f003 fb01 	bl	8003afc <iprintf>
	printf("=======================================\r\n");
 80004fa:	480a      	ldr	r0, [pc, #40]	; (8000524 <Display_Net_Conf+0xb0>)
 80004fc:	f003 fb84 	bl	8003c08 <puts>
}
 8000500:	b006      	add	sp, #24
 8000502:	bd10      	pop	{r4, pc}
 8000504:	20000000 	.word	0x20000000
 8000508:	08004d4b 	.word	0x08004d4b
 800050c:	08004d6e 	.word	0x08004d6e
 8000510:	08004d93 	.word	0x08004d93
 8000514:	08004de6 	.word	0x08004de6
 8000518:	08004dba 	.word	0x08004dba
 800051c:	08004dce 	.word	0x08004dce
 8000520:	08004de2 	.word	0x08004de2
 8000524:	08004dfa 	.word	0x08004dfa

08000528 <my_ip_assign>:
{
 8000528:	b510      	push	{r4, lr}
   getIPfromDHCP(gWIZNETINFO.ip);
 800052a:	4c11      	ldr	r4, [pc, #68]	; (8000570 <my_ip_assign+0x48>)
 800052c:	1da0      	adds	r0, r4, #6
 800052e:	f001 f8a3 	bl	8001678 <getIPfromDHCP>
   getGWfromDHCP(gWIZNETINFO.gw);
 8000532:	f104 000e 	add.w	r0, r4, #14
 8000536:	f001 f8ab 	bl	8001690 <getGWfromDHCP>
   getSNfromDHCP(gWIZNETINFO.sn);
 800053a:	f104 000a 	add.w	r0, r4, #10
 800053e:	f001 f8b3 	bl	80016a8 <getSNfromDHCP>
   getDNSfromDHCP(gWIZNETINFO.dns);
 8000542:	f104 0012 	add.w	r0, r4, #18
 8000546:	f001 f8bb 	bl	80016c0 <getDNSfromDHCP>
   gWIZNETINFO.dhcp = NETINFO_DHCP;
 800054a:	2302      	movs	r3, #2
}

static void Net_Conf()
{
	/* wizchip netconf */
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 800054c:	4621      	mov	r1, r4
 800054e:	2000      	movs	r0, #0
   gWIZNETINFO.dhcp = NETINFO_DHCP;
 8000550:	75a3      	strb	r3, [r4, #22]
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000552:	f002 fdad 	bl	80030b0 <ctlnetwork>
   Display_Net_Conf();
 8000556:	f7ff ff8d 	bl	8000474 <Display_Net_Conf>
   printf("DHCP LEASED TIME : %ld Sec.\r\n", getDHCPLeasetime());
 800055a:	f001 f8bd 	bl	80016d8 <getDHCPLeasetime>
 800055e:	4601      	mov	r1, r0
 8000560:	4804      	ldr	r0, [pc, #16]	; (8000574 <my_ip_assign+0x4c>)
 8000562:	f003 facb 	bl	8003afc <iprintf>
}
 8000566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   printf("\r\n");
 800056a:	4803      	ldr	r0, [pc, #12]	; (8000578 <my_ip_assign+0x50>)
 800056c:	f003 bb4c 	b.w	8003c08 <puts>
 8000570:	20000000 	.word	0x20000000
 8000574:	08004e23 	.word	0x08004e23
 8000578:	08005024 	.word	0x08005024

0800057c <UWriteData>:
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 800057c:	4b03      	ldr	r3, [pc, #12]	; (800058c <UWriteData+0x10>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	0612      	lsls	r2, r2, #24
 8000584:	d5fc      	bpl.n	8000580 <UWriteData+0x4>
	huart2.Instance->DR=data;
 8000586:	6058      	str	r0, [r3, #4]
}
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	200004a8 	.word	0x200004a8

08000590 <__io_putchar>:
{
 8000590:	4601      	mov	r1, r0
 8000592:	b508      	push	{r3, lr}
	UWriteData(ch);
 8000594:	b2c0      	uxtb	r0, r0
 8000596:	f7ff fff1 	bl	800057c <UWriteData>
}
 800059a:	4608      	mov	r0, r1
 800059c:	bd08      	pop	{r3, pc}
	...

080005a0 <PHYStatusCheck>:
{
 80005a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		printf("\r\nChecking Ethernet Cable Presence ...");
 80005a2:	4d0e      	ldr	r5, [pc, #56]	; (80005dc <PHYStatusCheck+0x3c>)
			printf("NO Cable Connected!");
 80005a4:	4c0e      	ldr	r4, [pc, #56]	; (80005e0 <PHYStatusCheck+0x40>)
		printf("\r\nChecking Ethernet Cable Presence ...");
 80005a6:	4628      	mov	r0, r5
 80005a8:	f003 faa8 	bl	8003afc <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 80005ac:	200f      	movs	r0, #15
 80005ae:	f10d 0107 	add.w	r1, sp, #7
 80005b2:	f002 fc73 	bl	8002e9c <ctlwizchip>
		if(tmp == PHY_LINK_OFF)
 80005b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005ba:	b953      	cbnz	r3, 80005d2 <PHYStatusCheck+0x32>
			printf("NO Cable Connected!");
 80005bc:	4620      	mov	r0, r4
 80005be:	f003 fa9d 	bl	8003afc <iprintf>
			HAL_Delay(1500);
 80005c2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80005c6:	f002 fde1 	bl	800318c <HAL_Delay>
	}while(tmp == PHY_LINK_OFF);
 80005ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0e9      	beq.n	80005a6 <PHYStatusCheck+0x6>
	printf("Good! Cable got connected!");
 80005d2:	4804      	ldr	r0, [pc, #16]	; (80005e4 <PHYStatusCheck+0x44>)
 80005d4:	f003 fa92 	bl	8003afc <iprintf>
}
 80005d8:	b003      	add	sp, #12
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	08004e41 	.word	0x08004e41
 80005e0:	08004e68 	.word	0x08004e68
 80005e4:	08004e7c 	.word	0x08004e7c

080005e8 <PrintPHYConf>:
{
 80005e8:	b507      	push	{r0, r1, r2, lr}
	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 80005ea:	200b      	movs	r0, #11
 80005ec:	a901      	add	r1, sp, #4
 80005ee:	f002 fc55 	bl	8002e9c <ctlwizchip>
	if(phyconf.by==PHY_CONFBY_HW)
 80005f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80005f6:	b9db      	cbnz	r3, 8000630 <PrintPHYConf+0x48>
		printf("\n\rPHY Configured by Hardware Pins");
 80005f8:	480f      	ldr	r0, [pc, #60]	; (8000638 <PrintPHYConf+0x50>)
		printf("\n\rPHY Configured by Registers");
 80005fa:	f003 fa7f 	bl	8003afc <iprintf>
	if(phyconf.mode==PHY_MODE_AUTONEGO)
 80005fe:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000602:	2b01      	cmp	r3, #1
		printf("\n\rAutonegotiation Enabled");
 8000604:	bf0c      	ite	eq
 8000606:	480d      	ldreq	r0, [pc, #52]	; (800063c <PrintPHYConf+0x54>)
		printf("\n\rAutonegotiation NOT Enabled");
 8000608:	480d      	ldrne	r0, [pc, #52]	; (8000640 <PrintPHYConf+0x58>)
 800060a:	f003 fa77 	bl	8003afc <iprintf>
	if(phyconf.duplex==PHY_DUPLEX_FULL)
 800060e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000612:	2b01      	cmp	r3, #1
		printf("\n\rDuplex Mode: Full");
 8000614:	bf0c      	ite	eq
 8000616:	480b      	ldreq	r0, [pc, #44]	; (8000644 <PrintPHYConf+0x5c>)
		printf("\n\rDuplex Mode: Half");
 8000618:	480b      	ldrne	r0, [pc, #44]	; (8000648 <PrintPHYConf+0x60>)
 800061a:	f003 fa6f 	bl	8003afc <iprintf>
	if(phyconf.speed==PHY_SPEED_10)
 800061e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8000622:	b93b      	cbnz	r3, 8000634 <PrintPHYConf+0x4c>
		printf("\n\rSpeed: 10Mbps");
 8000624:	4809      	ldr	r0, [pc, #36]	; (800064c <PrintPHYConf+0x64>)
		printf("\n\rSpeed: 100Mbps");
 8000626:	f003 fa69 	bl	8003afc <iprintf>
}
 800062a:	b003      	add	sp, #12
 800062c:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("\n\rPHY Configured by Registers");
 8000630:	4807      	ldr	r0, [pc, #28]	; (8000650 <PrintPHYConf+0x68>)
 8000632:	e7e2      	b.n	80005fa <PrintPHYConf+0x12>
		printf("\n\rSpeed: 100Mbps");
 8000634:	4807      	ldr	r0, [pc, #28]	; (8000654 <PrintPHYConf+0x6c>)
 8000636:	e7f6      	b.n	8000626 <PrintPHYConf+0x3e>
 8000638:	08004e97 	.word	0x08004e97
 800063c:	08004ed7 	.word	0x08004ed7
 8000640:	08004ef1 	.word	0x08004ef1
 8000644:	08004f0f 	.word	0x08004f0f
 8000648:	08004f23 	.word	0x08004f23
 800064c:	08004f37 	.word	0x08004f37
 8000650:	08004eb9 	.word	0x08004eb9
 8000654:	08004f47 	.word	0x08004f47

08000658 <SystemClock_Config>:
{
 8000658:	b510      	push	{r4, lr}
 800065a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065c:	2214      	movs	r2, #20
 800065e:	2100      	movs	r1, #0
 8000660:	a808      	add	r0, sp, #32
 8000662:	f003 fa43 	bl	8003aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000666:	2214      	movs	r2, #20
 8000668:	2100      	movs	r1, #0
 800066a:	a801      	add	r0, sp, #4
 800066c:	f003 fa3e 	bl	8003aec <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000670:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000676:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000678:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800067c:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000680:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000684:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000688:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f002 fec5 	bl	8003418 <HAL_RCC_OscConfig>
 800068e:	b108      	cbz	r0, 8000694 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000690:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000692:	e7fe      	b.n	8000692 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069e:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a0:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a4:	4621      	mov	r1, r4
 80006a6:	a801      	add	r0, sp, #4
 80006a8:	f003 f878 	bl	800379c <HAL_RCC_ClockConfig>
 80006ac:	b108      	cbz	r0, 80006b2 <SystemClock_Config+0x5a>
 80006ae:	b672      	cpsid	i
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <SystemClock_Config+0x58>
}
 80006b2:	b010      	add	sp, #64	; 0x40
 80006b4:	bd10      	pop	{r4, pc}
	...

080006b8 <main>:
{
 80006b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	setbuf(stdout, NULL);
 80006bc:	4ba4      	ldr	r3, [pc, #656]	; (8000950 <main+0x298>)
{
 80006be:	b095      	sub	sp, #84	; 0x54
	setbuf(stdout, NULL);
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2100      	movs	r1, #0
 80006c4:	6898      	ldr	r0, [r3, #8]
 80006c6:	f003 faa7 	bl	8003c18 <setbuf>
  HAL_Init();
 80006ca:	f002 fd3b 	bl	8003144 <HAL_Init>
  uint8_t Domain_name0[] = "1.pool.ntp.org";
 80006ce:	aa08      	add	r2, sp, #32
 80006d0:	4617      	mov	r7, r2
 80006d2:	4ba0      	ldr	r3, [pc, #640]	; (8000954 <main+0x29c>)
 80006d4:	f103 0508 	add.w	r5, r3, #8
 80006d8:	4614      	mov	r4, r2
 80006da:	6818      	ldr	r0, [r3, #0]
 80006dc:	6859      	ldr	r1, [r3, #4]
 80006de:	3308      	adds	r3, #8
 80006e0:	c403      	stmia	r4!, {r0, r1}
 80006e2:	42ab      	cmp	r3, r5
 80006e4:	4622      	mov	r2, r4
 80006e6:	d1f7      	bne.n	80006d8 <main+0x20>
  uint8_t Domain_name1[] = "0.pool.ntp.org";
 80006e8:	aa0c      	add	r2, sp, #48	; 0x30
 80006ea:	4690      	mov	r8, r2
  uint8_t Domain_name0[] = "1.pool.ntp.org";
 80006ec:	6818      	ldr	r0, [r3, #0]
 80006ee:	8899      	ldrh	r1, [r3, #4]
 80006f0:	799b      	ldrb	r3, [r3, #6]
 80006f2:	6020      	str	r0, [r4, #0]
 80006f4:	71a3      	strb	r3, [r4, #6]
  uint8_t Domain_name1[] = "0.pool.ntp.org";
 80006f6:	4b98      	ldr	r3, [pc, #608]	; (8000958 <main+0x2a0>)
  uint8_t Domain_name0[] = "1.pool.ntp.org";
 80006f8:	80a1      	strh	r1, [r4, #4]
  uint8_t Domain_name1[] = "0.pool.ntp.org";
 80006fa:	f103 0508 	add.w	r5, r3, #8
 80006fe:	4614      	mov	r4, r2
 8000700:	6818      	ldr	r0, [r3, #0]
 8000702:	6859      	ldr	r1, [r3, #4]
 8000704:	3308      	adds	r3, #8
 8000706:	c403      	stmia	r4!, {r0, r1}
 8000708:	42ab      	cmp	r3, r5
 800070a:	4622      	mov	r2, r4
 800070c:	d1f7      	bne.n	80006fe <main+0x46>
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	8899      	ldrh	r1, [r3, #4]
 8000712:	799b      	ldrb	r3, [r3, #6]
 8000714:	6020      	str	r0, [r4, #0]
 8000716:	71a3      	strb	r3, [r4, #6]
  uint8_t DNS_2nd_IP[4]    = {8, 8, 8, 8};      	// Secondary DNS server IP
 8000718:	f04f 3308 	mov.w	r3, #134744072	; 0x8080808
  uint8_t Domain_name1[] = "0.pool.ntp.org";
 800071c:	80a1      	strh	r1, [r4, #4]
  uint8_t DNS_2nd_IP[4]    = {8, 8, 8, 8};      	// Secondary DNS server IP
 800071e:	9305      	str	r3, [sp, #20]
  SystemClock_Config();
 8000720:	f7ff ff9a 	bl	8000658 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000724:	2210      	movs	r2, #16
 8000726:	2100      	movs	r1, #0
 8000728:	a810      	add	r0, sp, #64	; 0x40
 800072a:	f003 f9df 	bl	8003aec <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	4b8b      	ldr	r3, [pc, #556]	; (800095c <main+0x2a4>)
  HAL_GPIO_WritePin(GPIOA, RST_W5500_Pin|CS_W5500_Pin, GPIO_PIN_RESET);
 8000730:	2103      	movs	r1, #3
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, RST_W5500_Pin|CS_W5500_Pin, GPIO_PIN_RESET);
 8000734:	488a      	ldr	r0, [pc, #552]	; (8000960 <main+0x2a8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000736:	f042 0220 	orr.w	r2, r2, #32
 800073a:	619a      	str	r2, [r3, #24]
 800073c:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2501      	movs	r5, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000740:	f002 0220 	and.w	r2, r2, #32
 8000744:	9206      	str	r2, [sp, #24]
 8000746:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2600      	movs	r6, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074c:	f042 0204 	orr.w	r2, r2, #4
 8000750:	619a      	str	r2, [r3, #24]
 8000752:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, RST_W5500_Pin|CS_W5500_Pin, GPIO_PIN_RESET);
 8000754:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	f003 0304 	and.w	r3, r3, #4
 800075a:	9307      	str	r3, [sp, #28]
 800075c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOA, RST_W5500_Pin|CS_W5500_Pin, GPIO_PIN_RESET);
 800075e:	f002 fe55 	bl	800340c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2303      	movs	r3, #3
 8000764:	e9cd 3510 	strd	r3, r5, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	487d      	ldr	r0, [pc, #500]	; (8000960 <main+0x2a8>)
 800076c:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076e:	e9cd 6312 	strd	r6, r3, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f002 fd75 	bl	8003260 <HAL_GPIO_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000776:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800077a:	4c7a      	ldr	r4, [pc, #488]	; (8000964 <main+0x2ac>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077c:	487a      	ldr	r0, [pc, #488]	; (8000968 <main+0x2b0>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800077e:	f44f 7c00 	mov.w	ip, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000782:	e9c4 0300 	strd	r0, r3, [r4]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000786:	2308      	movs	r3, #8
 8000788:	e9c4 c306 	strd	ip, r3, [r4, #24]
  hspi1.Init.CRCPolynomial = 10;
 800078c:	230a      	movs	r3, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800078e:	4620      	mov	r0, r4
  hspi1.Init.CRCPolynomial = 10;
 8000790:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000792:	e9c4 6602 	strd	r6, r6, [r4, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000796:	e9c4 6604 	strd	r6, r6, [r4, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	e9c4 6608 	strd	r6, r6, [r4, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079e:	62a6      	str	r6, [r4, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a0:	f003 f8b8 	bl	8003914 <HAL_SPI_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	b108      	cbz	r0, 80007ac <main+0xf4>
 80007a8:	b672      	cpsid	i
  while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0xf2>
  __HAL_SPI_ENABLE(&hspi1);
 80007ac:	6821      	ldr	r1, [r4, #0]
  huart2.Instance = USART2;
 80007ae:	486f      	ldr	r0, [pc, #444]	; (800096c <main+0x2b4>)
  __HAL_SPI_ENABLE(&hspi1);
 80007b0:	680a      	ldr	r2, [r1, #0]
 80007b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007b6:	600a      	str	r2, [r1, #0]
  huart2.Init.BaudRate = 115200;
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	496c      	ldr	r1, [pc, #432]	; (8000970 <main+0x2b8>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007be:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80007c2:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c6:	220c      	movs	r2, #12
  huart2.Init.Parity = UART_PARITY_NONE;
 80007c8:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ce:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d0:	f003 f932 	bl	8003a38 <HAL_UART_Init>
 80007d4:	4606      	mov	r6, r0
 80007d6:	b108      	cbz	r0, 80007dc <main+0x124>
 80007d8:	b672      	cpsid	i
  while (1)
 80007da:	e7fe      	b.n	80007da <main+0x122>
  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 80007dc:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000974 <main+0x2bc>
  printf("DHCP + DNS + SNTP W5500 Application!\r\n");
 80007e0:	4865      	ldr	r0, [pc, #404]	; (8000978 <main+0x2c0>)
 80007e2:	f003 fa11 	bl	8003c08 <puts>
  W5500Init();
 80007e6:	f000 fbf7 	bl	8000fd8 <W5500Init>
  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 80007ea:	4649      	mov	r1, r9
 80007ec:	4630      	mov	r0, r6
 80007ee:	f002 fc5f 	bl	80030b0 <ctlnetwork>
  PHYStatusCheck();
 80007f2:	f7ff fed5 	bl	80005a0 <PHYStatusCheck>
    PrintPHYConf();
 80007f6:	f7ff fef7 	bl	80005e8 <PrintPHYConf>
  	if(gWIZNETINFO.dhcp == NETINFO_DHCP)
 80007fa:	f899 3016 	ldrb.w	r3, [r9, #22]
 80007fe:	2b02      	cmp	r3, #2
 8000800:	d15c      	bne.n	80008bc <main+0x204>
  		DHCP_init(SOCK_DHCP, gDHCPBUF);
 8000802:	2006      	movs	r0, #6
 8000804:	495d      	ldr	r1, [pc, #372]	; (800097c <main+0x2c4>)
 8000806:	f000 fed7 	bl	80015b8 <DHCP_init>
  		reg_dhcp_cbfunc(my_ip_assign, my_ip_assign, my_ip_conflict);
 800080a:	495d      	ldr	r1, [pc, #372]	; (8000980 <main+0x2c8>)
 800080c:	4a5d      	ldr	r2, [pc, #372]	; (8000984 <main+0x2cc>)
 800080e:	4608      	mov	r0, r1
 8000810:	f000 fc72 	bl	80010f8 <reg_dhcp_cbfunc>
  		run_user_applications = 0; 	// flag for running user's code
 8000814:	4634      	mov	r4, r6
		while( SNTP_run(&time) !=1){}
 8000816:	4d5c      	ldr	r5, [pc, #368]	; (8000988 <main+0x2d0>)
	    						my_dhcp_retry++;
 8000818:	f8df a170 	ldr.w	sl, [pc, #368]	; 800098c <main+0x2d4>
	  if(gWIZNETINFO.dhcp == NETINFO_DHCP && exit_dhcp_loop != 1)
 800081c:	f899 3016 	ldrb.w	r3, [r9, #22]
 8000820:	2b02      	cmp	r3, #2
 8000822:	f040 8090 	bne.w	8000946 <main+0x28e>
 8000826:	2e01      	cmp	r6, #1
 8000828:	f000 808d 	beq.w	8000946 <main+0x28e>
	    				switch(DHCP_run())
 800082c:	f001 f9c8 	bl	8001bc0 <DHCP_run>
 8000830:	4683      	mov	fp, r0
 8000832:	2800      	cmp	r0, #0
 8000834:	d06d      	beq.n	8000912 <main+0x25a>
 8000836:	2804      	cmp	r0, #4
 8000838:	f040 8085 	bne.w	8000946 <main+0x28e>
	    						DNS_init(SOCK_DNS, gDNSBUF);   // DNS client Initialization
 800083c:	2005      	movs	r0, #5
 800083e:	4954      	ldr	r1, [pc, #336]	; (8000990 <main+0x2d8>)
 8000840:	f001 fc3e 	bl	80020c0 <DNS_init>
	    						  		  	if ((DNSret = DNS_run(gWIZNETINFO.dns, Domain_name0, Domain_IP))==1)  //Trying 1st DNS server
 8000844:	aa10      	add	r2, sp, #64	; 0x40
 8000846:	4639      	mov	r1, r7
 8000848:	4852      	ldr	r0, [pc, #328]	; (8000994 <main+0x2dc>)
 800084a:	f001 fc49 	bl	80020e0 <DNS_run>
 800084e:	2801      	cmp	r0, #1
 8000850:	4602      	mov	r2, r0
 8000852:	d137      	bne.n	80008c4 <main+0x20c>
	    						  		  			printf("\n\r> DNS1 for %s return= %d", Domain_name0, DNSret);
 8000854:	4639      	mov	r1, r7
 8000856:	4850      	ldr	r0, [pc, #320]	; (8000998 <main+0x2e0>)
 8000858:	f003 f950 	bl	8003afc <iprintf>
	    						  		  			printf("\n\r> Translated %s to [%d.%d.%d.%d]\r\n\r\n",Domain_name0,Domain_IP[0],Domain_IP[1],Domain_IP[2],Domain_IP[3]);
 800085c:	4639      	mov	r1, r7
 800085e:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 8000862:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 8000866:	9301      	str	r3, [sp, #4]
 8000868:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
	    						  		  			printf("\n\r> Translated %s to [%d.%d.%d.%d]\r\n\r\n",Domain_name1,Domain_IP[0],Domain_IP[1],Domain_IP[2],Domain_IP[3]);
 8000872:	484a      	ldr	r0, [pc, #296]	; (800099c <main+0x2e4>)
 8000874:	f003 f942 	bl	8003afc <iprintf>
	    						  		  			printf("\n\r> Initializing SNTP from %s", Domain_name0);
 8000878:	4639      	mov	r1, r7
 800087a:	4849      	ldr	r0, [pc, #292]	; (80009a0 <main+0x2e8>)
 800087c:	f003 f93e 	bl	8003afc <iprintf>
	    						  		  			SNTP_init(SOCK_SNTP, Domain_IP, SNTP_TIMEZONE, gSNTPBUF);
 8000880:	2222      	movs	r2, #34	; 0x22
 8000882:	2004      	movs	r0, #4
 8000884:	4b47      	ldr	r3, [pc, #284]	; (80009a4 <main+0x2ec>)
 8000886:	a910      	add	r1, sp, #64	; 0x40
 8000888:	f001 fc88 	bl	800219c <SNTP_init>
	    						  		  	exit_dhcp_loop = 1;
 800088c:	2601      	movs	r6, #1
		while( SNTP_run(&time) !=1){}
 800088e:	483e      	ldr	r0, [pc, #248]	; (8000988 <main+0x2d0>)
 8000890:	f001 fe4e 	bl	8002530 <SNTP_run>
 8000894:	2801      	cmp	r0, #1
 8000896:	4604      	mov	r4, r0
 8000898:	d1f9      	bne.n	800088e <main+0x1d6>
	    printf("\n\r> %02d/%02d/%d, %02d:%02d:%02d", time.dd,  time.mo, time.yy, time.hh, time.mm, time.ss);
 800089a:	79ab      	ldrb	r3, [r5, #6]
 800089c:	4842      	ldr	r0, [pc, #264]	; (80009a8 <main+0x2f0>)
 800089e:	9302      	str	r3, [sp, #8]
 80008a0:	796b      	ldrb	r3, [r5, #5]
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	792b      	ldrb	r3, [r5, #4]
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	882b      	ldrh	r3, [r5, #0]
 80008aa:	78aa      	ldrb	r2, [r5, #2]
 80008ac:	78e9      	ldrb	r1, [r5, #3]
 80008ae:	f003 f925 	bl	8003afc <iprintf>
	    HAL_Delay(1000);
 80008b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b6:	f002 fc69 	bl	800318c <HAL_Delay>
 80008ba:	e7af      	b.n	800081c <main+0x164>
  		Display_Net_Conf();
 80008bc:	f7ff fdda 	bl	8000474 <Display_Net_Conf>
  		run_user_applications = 1; 	// flag for running user's code
 80008c0:	462c      	mov	r4, r5
 80008c2:	e7a8      	b.n	8000816 <main+0x15e>
	    						  		  		else if ((DNSret = DNS_run(DNS_2nd_IP, Domain_name0, Domain_IP))==1) //Trying 2st DNS server
 80008c4:	4639      	mov	r1, r7
 80008c6:	aa10      	add	r2, sp, #64	; 0x40
 80008c8:	a805      	add	r0, sp, #20
 80008ca:	f001 fc09 	bl	80020e0 <DNS_run>
 80008ce:	2801      	cmp	r0, #1
 80008d0:	4604      	mov	r4, r0
 80008d2:	d113      	bne.n	80008fc <main+0x244>
	    						  		  			printf("\n\r> 1st DNS Failed, trying DNS2");
 80008d4:	4835      	ldr	r0, [pc, #212]	; (80009ac <main+0x2f4>)
 80008d6:	f003 f911 	bl	8003afc <iprintf>
	    						  		  			printf("\n\r> DNS2 for %s return= %d", Domain_name1, DNSret);
 80008da:	4622      	mov	r2, r4
 80008dc:	4641      	mov	r1, r8
 80008de:	4834      	ldr	r0, [pc, #208]	; (80009b0 <main+0x2f8>)
 80008e0:	f003 f90c 	bl	8003afc <iprintf>
	    						  		  			printf("\n\r> Translated %s to [%d.%d.%d.%d]\r\n\r\n",Domain_name1,Domain_IP[0],Domain_IP[1],Domain_IP[2],Domain_IP[3]);
 80008e4:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80008e8:	4641      	mov	r1, r8
 80008ea:	9301      	str	r3, [sp, #4]
 80008ec:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80008f0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80008fa:	e7ba      	b.n	8000872 <main+0x1ba>
	    						  		  		else {printf("\n\r> Error resolving %s - DNS Failed !!\n\r\n\r", Domain_name0);}  //Query to both servers failed
 80008fc:	4639      	mov	r1, r7
 80008fe:	482d      	ldr	r0, [pc, #180]	; (80009b4 <main+0x2fc>)
 8000900:	f003 f8fc 	bl	8003afc <iprintf>
	    						  		  		if(DNSret > 0)  // sntp server ip resolved, so init SNTP client
 8000904:	2c00      	cmp	r4, #0
 8000906:	dcb7      	bgt.n	8000878 <main+0x1c0>
	    						  		  		else {printf("\n\r> SNTP Error!! could not resolve %s", Domain_name0);}
 8000908:	4639      	mov	r1, r7
 800090a:	482b      	ldr	r0, [pc, #172]	; (80009b8 <main+0x300>)
 800090c:	f003 f8f6 	bl	8003afc <iprintf>
 8000910:	e7bc      	b.n	800088c <main+0x1d4>
	    						my_dhcp_retry++;
 8000912:	f89a 2000 	ldrb.w	r2, [sl]
 8000916:	3201      	adds	r2, #1
 8000918:	b2d2      	uxtb	r2, r2
	    						if(my_dhcp_retry > MY_MAX_DHCP_RETRY)
 800091a:	2a02      	cmp	r2, #2
	    						my_dhcp_retry++;
 800091c:	f88a 2000 	strb.w	r2, [sl]
	    						if(my_dhcp_retry > MY_MAX_DHCP_RETRY)
 8000920:	d911      	bls.n	8000946 <main+0x28e>
	    							gWIZNETINFO.dhcp = NETINFO_STATIC;
 8000922:	2201      	movs	r2, #1
 8000924:	f889 2016 	strb.w	r2, [r9, #22]
	    							DHCP_stop();      // if restart, recall DHCP_init()
 8000928:	f000 fdf0 	bl	800150c <DHCP_stop>
	    							printf(">> DHCP %d Failed\r\n", my_dhcp_retry);
 800092c:	f89a 1000 	ldrb.w	r1, [sl]
 8000930:	4822      	ldr	r0, [pc, #136]	; (80009bc <main+0x304>)
 8000932:	f003 f8e3 	bl	8003afc <iprintf>
	ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO);
 8000936:	490f      	ldr	r1, [pc, #60]	; (8000974 <main+0x2bc>)
 8000938:	4658      	mov	r0, fp
 800093a:	f002 fbb9 	bl	80030b0 <ctlnetwork>
	    							Display_Net_Conf();   // print out static netinfo to serial
 800093e:	f7ff fd99 	bl	8000474 <Display_Net_Conf>
	    							my_dhcp_retry = 0;
 8000942:	f88a b000 	strb.w	fp, [sl]
	if(run_user_applications){
 8000946:	2c00      	cmp	r4, #0
 8000948:	f43f af68 	beq.w	800081c <main+0x164>
 800094c:	e79f      	b.n	800088e <main+0x1d6>
 800094e:	bf00      	nop
 8000950:	20000070 	.word	0x20000070
 8000954:	0800509f 	.word	0x0800509f
 8000958:	080050ae 	.word	0x080050ae
 800095c:	40021000 	.word	0x40021000
 8000960:	40010800 	.word	0x40010800
 8000964:	20000450 	.word	0x20000450
 8000968:	40013000 	.word	0x40013000
 800096c:	200004a8 	.word	0x200004a8
 8000970:	40004400 	.word	0x40004400
 8000974:	20000000 	.word	0x20000000
 8000978:	08004f58 	.word	0x08004f58
 800097c:	200000f4 	.word	0x200000f4
 8000980:	08000529 	.word	0x08000529
 8000984:	08000465 	.word	0x08000465
 8000988:	200004f2 	.word	0x200004f2
 800098c:	200004f0 	.word	0x200004f0
 8000990:	20000318 	.word	0x20000318
 8000994:	20000012 	.word	0x20000012
 8000998:	08004f7e 	.word	0x08004f7e
 800099c:	08004f99 	.word	0x08004f99
 80009a0:	08005026 	.word	0x08005026
 80009a4:	20000418 	.word	0x20000418
 80009a8:	0800507e 	.word	0x0800507e
 80009ac:	08004fc0 	.word	0x08004fc0
 80009b0:	08004fe0 	.word	0x08004fe0
 80009b4:	08004ffb 	.word	0x08004ffb
 80009b8:	08005044 	.word	0x08005044
 80009bc:	0800506a 	.word	0x0800506a

080009c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_MspInit+0x3c>)
{
 80009c2:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80009c4:	699a      	ldr	r2, [r3, #24]
 80009c6:	f042 0201 	orr.w	r2, r2, #1
 80009ca:	619a      	str	r2, [r3, #24]
 80009cc:	699a      	ldr	r2, [r3, #24]
 80009ce:	f002 0201 	and.w	r2, r2, #1
 80009d2:	9200      	str	r2, [sp, #0]
 80009d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d6:	69da      	ldr	r2, [r3, #28]
 80009d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009dc:	61da      	str	r2, [r3, #28]
 80009de:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009ea:	6853      	ldr	r3, [r2, #4]
 80009ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f6:	b002      	add	sp, #8
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010000 	.word	0x40010000

08000a04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a04:	b510      	push	{r4, lr}
 8000a06:	4604      	mov	r4, r0
 8000a08:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	2210      	movs	r2, #16
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	a802      	add	r0, sp, #8
 8000a10:	f003 f86c 	bl	8003aec <memset>
  if(hspi->Instance==SPI1)
 8000a14:	6822      	ldr	r2, [r4, #0]
 8000a16:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_SPI_MspInit+0x6c>)
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d126      	bne.n	8000a6a <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a1c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 8000a20:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	4814      	ldr	r0, [pc, #80]	; (8000a74 <HAL_SPI_MspInit+0x70>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000a28:	619a      	str	r2, [r3, #24]
 8000a2a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	a902      	add	r1, sp, #8
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a2e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8000a32:	9200      	str	r2, [sp, #0]
 8000a34:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a36:	699a      	ldr	r2, [r3, #24]
 8000a38:	f042 0204 	orr.w	r2, r2, #4
 8000a3c:	619a      	str	r2, [r3, #24]
 8000a3e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	22a0      	movs	r2, #160	; 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a42:	f003 0304 	and.w	r3, r3, #4
 8000a46:	9301      	str	r3, [sp, #4]
 8000a48:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f002 fc04 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2140      	movs	r1, #64	; 0x40
 8000a5a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	4805      	ldr	r0, [pc, #20]	; (8000a74 <HAL_SPI_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f002 fbfb 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a6a:	b006      	add	sp, #24
 8000a6c:	bd10      	pop	{r4, pc}
 8000a6e:	bf00      	nop
 8000a70:	40013000 	.word	0x40013000
 8000a74:	40010800 	.word	0x40010800

08000a78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a78:	b510      	push	{r4, lr}
 8000a7a:	4604      	mov	r4, r0
 8000a7c:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7e:	2210      	movs	r2, #16
 8000a80:	2100      	movs	r1, #0
 8000a82:	a802      	add	r0, sp, #8
 8000a84:	f003 f832 	bl	8003aec <memset>
  if(huart->Instance==USART2)
 8000a88:	6822      	ldr	r2, [r4, #0]
 8000a8a:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <HAL_UART_MspInit+0x6c>)
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d126      	bne.n	8000ade <HAL_UART_MspInit+0x66>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a90:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8000a94:	69da      	ldr	r2, [r3, #28]
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <HAL_UART_MspInit+0x70>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a98:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000a9c:	61da      	str	r2, [r3, #28]
 8000a9e:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000aa6:	9200      	str	r2, [sp, #0]
 8000aa8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	699a      	ldr	r2, [r3, #24]
 8000aac:	f042 0204 	orr.w	r2, r2, #4
 8000ab0:	619a      	str	r2, [r3, #24]
 8000ab2:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	9301      	str	r3, [sp, #4]
 8000abc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f002 fbca 	bl	8003260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2108      	movs	r1, #8
 8000ace:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <HAL_UART_MspInit+0x70>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad2:	e9cd 1302 	strd	r1, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f002 fbc1 	bl	8003260 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ade:	b006      	add	sp, #24
 8000ae0:	bd10      	pop	{r4, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40004400 	.word	0x40004400
 8000ae8:	40010800 	.word	0x40010800

08000aec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler>

08000aee <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler>

08000af0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <MemManage_Handler>

08000af2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <BusFault_Handler>

08000af4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <UsageFault_Handler>

08000af6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	4770      	bx	lr

08000af8 <DebugMon_Handler>:
 8000af8:	4770      	bx	lr

08000afa <PendSV_Handler>:
 8000afa:	4770      	bx	lr

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
static uint32_t mstick;
mstick++;
 8000afe:	4c0a      	ldr	r4, [pc, #40]	; (8000b28 <SysTick_Handler+0x2c>)
 8000b00:	6823      	ldr	r3, [r4, #0]
 8000b02:	3301      	adds	r3, #1
 8000b04:	6023      	str	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f002 fb2f 	bl	8003168 <HAL_IncTick>
 8000b0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0e:	6823      	ldr	r3, [r4, #0]
 8000b10:	fbb3 f1f2 	udiv	r1, r3, r2
 8000b14:	fb02 3311 	mls	r3, r2, r1, r3
  /* USER CODE BEGIN SysTick_IRQn 1 */
if(mstick%1000 == 0)
 8000b18:	b92b      	cbnz	r3, 8000b26 <SysTick_Handler+0x2a>
	{
	DHCP_time_handler();
 8000b1a:	f000 fda5 	bl	8001668 <DHCP_time_handler>
	DNS_time_handler();
	}
  /* USER CODE END SysTick_IRQn 1 */
}
 8000b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	DNS_time_handler();
 8000b22:	f001 bb33 	b.w	800218c <DNS_time_handler>
}
 8000b26:	bd10      	pop	{r4, pc}
 8000b28:	200004fc 	.word	0x200004fc

08000b2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b2c:	b570      	push	{r4, r5, r6, lr}
 8000b2e:	460d      	mov	r5, r1
 8000b30:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b32:	460e      	mov	r6, r1
 8000b34:	1b73      	subs	r3, r6, r5
 8000b36:	429c      	cmp	r4, r3
 8000b38:	dc01      	bgt.n	8000b3e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8000b3a:	4620      	mov	r0, r4
 8000b3c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8000b3e:	f3af 8000 	nop.w
 8000b42:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	e7f5      	b.n	8000b34 <_read+0x8>

08000b48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b48:	b570      	push	{r4, r5, r6, lr}
 8000b4a:	460d      	mov	r5, r1
 8000b4c:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	460e      	mov	r6, r1
 8000b50:	1b73      	subs	r3, r6, r5
 8000b52:	429c      	cmp	r4, r3
 8000b54:	dc01      	bgt.n	8000b5a <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 8000b56:	4620      	mov	r0, r4
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 8000b5a:	f816 0b01 	ldrb.w	r0, [r6], #1
 8000b5e:	f7ff fd17 	bl	8000590 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b62:	e7f5      	b.n	8000b50 <_write+0x8>

08000b64 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr

08000b6a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8000b6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  return 0;
}
 8000b6e:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000b70:	604b      	str	r3, [r1, #4]
}
 8000b72:	4770      	bx	lr

08000b74 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000b74:	2001      	movs	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8000b78:	2000      	movs	r0, #0
 8000b7a:	4770      	bx	lr

08000b7c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b7c:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <_sbrk+0x30>)
{
 8000b7e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000b80:	6811      	ldr	r1, [r2, #0]
{
 8000b82:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000b84:	b909      	cbnz	r1, 8000b8a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000b86:	490a      	ldr	r1, [pc, #40]	; (8000bb0 <_sbrk+0x34>)
 8000b88:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b8a:	6810      	ldr	r0, [r2, #0]
 8000b8c:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <_sbrk+0x38>)
 8000b8e:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <_sbrk+0x3c>)
 8000b90:	4403      	add	r3, r0
 8000b92:	1b09      	subs	r1, r1, r4
 8000b94:	428b      	cmp	r3, r1
 8000b96:	d906      	bls.n	8000ba6 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000b98:	f002 ff7e 	bl	8003a98 <__errno>
 8000b9c:	230c      	movs	r3, #12
 8000b9e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000ba4:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000ba6:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000ba8:	e7fc      	b.n	8000ba4 <_sbrk+0x28>
 8000baa:	bf00      	nop
 8000bac:	20000500 	.word	0x20000500
 8000bb0:	200005f8 	.word	0x200005f8
 8000bb4:	20002800 	.word	0x20002800
 8000bb8:	00000400 	.word	0x00000400

08000bbc <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	4770      	bx	lr
	...

08000bc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc0:	f7ff fffc 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc4:	480b      	ldr	r0, [pc, #44]	; (8000bf4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bc6:	490c      	ldr	r1, [pc, #48]	; (8000bf8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	; (8000bfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bcc:	e002      	b.n	8000bd4 <LoopCopyDataInit>

08000bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd2:	3304      	adds	r3, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd8:	d3f9      	bcc.n	8000bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bda:	4a09      	ldr	r2, [pc, #36]	; (8000c00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bdc:	4c09      	ldr	r4, [pc, #36]	; (8000c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be0:	e001      	b.n	8000be6 <LoopFillZerobss>

08000be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be4:	3204      	adds	r2, #4

08000be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be8:	d3fb      	bcc.n	8000be2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bea:	f002 ff5b 	bl	8003aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bee:	f7ff fd63 	bl	80006b8 <main>
  bx lr
 8000bf2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf8:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8000bfc:	08005380 	.word	0x08005380
  ldr r2, =_sbss
 8000c00:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8000c04:	200005f8 	.word	0x200005f8

08000c08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c08:	e7fe      	b.n	8000c08 <ADC1_2_IRQHandler>
	...

08000c0c <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000c0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c0e:	4605      	mov	r5, r0
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000c10:	4c14      	ldr	r4, [pc, #80]	; (8000c64 <WIZCHIP_READ+0x58>)
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000c12:	f3c5 2607 	ubfx	r6, r5, #8, #8
   WIZCHIP_CRITICAL_ENTER();
 8000c16:	68e3      	ldr	r3, [r4, #12]
 8000c18:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c1a:	6963      	ldr	r3, [r4, #20]
 8000c1c:	4798      	blx	r3
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000c20:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000c24:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c26:	b10b      	cbz	r3, 8000c2c <WIZCHIP_READ+0x20>
 8000c28:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000c2a:	b98b      	cbnz	r3, 8000c50 <WIZCHIP_READ+0x44>
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c2c:	6a23      	ldr	r3, [r4, #32]
 8000c2e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c30:	4630      	mov	r0, r6
 8000c32:	6a23      	ldr	r3, [r4, #32]
 8000c34:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c36:	4628      	mov	r0, r5
 8000c38:	6a23      	ldr	r3, [r4, #32]
 8000c3a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000c3c:	69e3      	ldr	r3, [r4, #28]
 8000c3e:	4798      	blx	r3
 8000c40:	4605      	mov	r5, r0

   WIZCHIP.CS._deselect();
 8000c42:	69a3      	ldr	r3, [r4, #24]
 8000c44:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000c46:	6923      	ldr	r3, [r4, #16]
 8000c48:	4798      	blx	r3
   return ret;
}
 8000c4a:	4628      	mov	r0, r5
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000c50:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000c54:	2103      	movs	r1, #3
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000c56:	f88d 6005 	strb.w	r6, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000c5a:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000c5e:	a801      	add	r0, sp, #4
 8000c60:	4798      	blx	r3
 8000c62:	e7eb      	b.n	8000c3c <WIZCHIP_READ+0x30>
 8000c64:	2000003c 	.word	0x2000003c

08000c68 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000c68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c6a:	4605      	mov	r5, r0
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000c6c:	4c16      	ldr	r4, [pc, #88]	; (8000cc8 <WIZCHIP_WRITE+0x60>)
{
 8000c6e:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 8000c70:	68e3      	ldr	r3, [r4, #12]
 8000c72:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000c74:	6963      	ldr	r3, [r4, #20]
 8000c76:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000c7a:	f045 0704 	orr.w	r7, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c7e:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c82:	b2ff      	uxtb	r7, r7
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c84:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000c88:	b983      	cbnz	r3, 8000cac <WIZCHIP_WRITE+0x44>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000c8a:	6a23      	ldr	r3, [r4, #32]
 8000c8c:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000c8e:	4628      	mov	r0, r5
 8000c90:	6a23      	ldr	r3, [r4, #32]
 8000c92:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000c94:	4638      	mov	r0, r7
 8000c96:	6a23      	ldr	r3, [r4, #32]
 8000c98:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	6a23      	ldr	r3, [r4, #32]
 8000c9e:	4798      	blx	r3
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		spi_data[3] = wb;
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
   }

   WIZCHIP.CS._deselect();
 8000ca0:	69a3      	ldr	r3, [r4, #24]
 8000ca2:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000ca4:	6923      	ldr	r3, [r4, #16]
 8000ca6:	4798      	blx	r3
}
 8000ca8:	b003      	add	sp, #12
 8000caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000cac:	2104      	movs	r1, #4
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000cae:	f88d 0004 	strb.w	r0, [sp, #4]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000cb2:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000cb6:	f88d 7006 	strb.w	r7, [sp, #6]
		spi_data[3] = wb;
 8000cba:	f88d 6007 	strb.w	r6, [sp, #7]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000cbe:	eb0d 0001 	add.w	r0, sp, r1
 8000cc2:	4798      	blx	r3
 8000cc4:	e7ec      	b.n	8000ca0 <WIZCHIP_WRITE+0x38>
 8000cc6:	bf00      	nop
 8000cc8:	2000003c 	.word	0x2000003c

08000ccc <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000ccc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000cd0:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000cd2:	4c1a      	ldr	r4, [pc, #104]	; (8000d3c <WIZCHIP_READ_BUF+0x70>)
{
 8000cd4:	460e      	mov	r6, r1
   WIZCHIP_CRITICAL_ENTER();
 8000cd6:	68e3      	ldr	r3, [r4, #12]
{
 8000cd8:	4617      	mov	r7, r2
   WIZCHIP_CRITICAL_ENTER();
 8000cda:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000cdc:	6963      	ldr	r3, [r4, #20]
 8000cde:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000ce0:	6a63      	ldr	r3, [r4, #36]	; 0x24
		for(i = 0; i < len; i++)
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000ce2:	f3c5 4007 	ubfx	r0, r5, #16, #8
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000ce6:	f3c5 2807 	ubfx	r8, r5, #8, #8
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000cea:	b2ed      	uxtb	r5, r5
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000cec:	b10b      	cbz	r3, 8000cf2 <WIZCHIP_READ_BUF+0x26>
 8000cee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000cf0:	b9b3      	cbnz	r3, 8000d20 <WIZCHIP_READ_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000cf2:	6a23      	ldr	r3, [r4, #32]
 8000cf4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000cf6:	4640      	mov	r0, r8
 8000cf8:	6a23      	ldr	r3, [r4, #32]
 8000cfa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000cfc:	4628      	mov	r0, r5
 8000cfe:	6a23      	ldr	r3, [r4, #32]
 8000d00:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000d02:	4437      	add	r7, r6
 8000d04:	42b7      	cmp	r7, r6
 8000d06:	d106      	bne.n	8000d16 <WIZCHIP_READ_BUF+0x4a>
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8000d08:	69a3      	ldr	r3, [r4, #24]
 8000d0a:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d0c:	6923      	ldr	r3, [r4, #16]
 8000d0e:	4798      	blx	r3
}
 8000d10:	b002      	add	sp, #8
 8000d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000d16:	69e3      	ldr	r3, [r4, #28]
 8000d18:	4798      	blx	r3
 8000d1a:	f806 0b01 	strb.w	r0, [r6], #1
		for(i = 0; i < len; i++)
 8000d1e:	e7f1      	b.n	8000d04 <WIZCHIP_READ_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000d20:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000d24:	2103      	movs	r1, #3
 8000d26:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000d28:	f88d 8005 	strb.w	r8, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000d2c:	f88d 5006 	strb.w	r5, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000d30:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000d32:	4639      	mov	r1, r7
 8000d34:	4630      	mov	r0, r6
 8000d36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000d38:	4798      	blx	r3
 8000d3a:	e7e5      	b.n	8000d08 <WIZCHIP_READ_BUF+0x3c>
 8000d3c:	2000003c 	.word	0x2000003c

08000d40 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000d40:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000d44:	4605      	mov	r5, r0
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000d46:	4c1a      	ldr	r4, [pc, #104]	; (8000db0 <WIZCHIP_WRITE_BUF+0x70>)
{
 8000d48:	460f      	mov	r7, r1
   WIZCHIP_CRITICAL_ENTER();
 8000d4a:	68e3      	ldr	r3, [r4, #12]
{
 8000d4c:	4690      	mov	r8, r2
   WIZCHIP_CRITICAL_ENTER();
 8000d4e:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000d50:	6963      	ldr	r3, [r4, #20]
 8000d52:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000d56:	f045 0604 	orr.w	r6, r5, #4
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000d5a:	f3c5 4007 	ubfx	r0, r5, #16, #8
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000d5e:	b2f6      	uxtb	r6, r6
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000d60:	f3c5 2507 	ubfx	r5, r5, #8, #8
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000d64:	b9b3      	cbnz	r3, 8000d94 <WIZCHIP_WRITE_BUF+0x54>
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000d66:	6a23      	ldr	r3, [r4, #32]
 8000d68:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000d6a:	4628      	mov	r0, r5
 8000d6c:	6a23      	ldr	r3, [r4, #32]
 8000d6e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000d70:	4630      	mov	r0, r6
 8000d72:	6a23      	ldr	r3, [r4, #32]
 8000d74:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000d76:	44b8      	add	r8, r7
 8000d78:	45b8      	cmp	r8, r7
 8000d7a:	d106      	bne.n	8000d8a <WIZCHIP_WRITE_BUF+0x4a>
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
   }

   WIZCHIP.CS._deselect();
 8000d7c:	69a3      	ldr	r3, [r4, #24]
 8000d7e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000d80:	6923      	ldr	r3, [r4, #16]
 8000d82:	4798      	blx	r3
}
 8000d84:	b002      	add	sp, #8
 8000d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8000d8a:	6a23      	ldr	r3, [r4, #32]
 8000d8c:	f817 0b01 	ldrb.w	r0, [r7], #1
 8000d90:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000d92:	e7f1      	b.n	8000d78 <WIZCHIP_WRITE_BUF+0x38>
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000d94:	f88d 0004 	strb.w	r0, [sp, #4]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000d98:	2103      	movs	r1, #3
 8000d9a:	a801      	add	r0, sp, #4
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000d9c:	f88d 5005 	strb.w	r5, [sp, #5]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000da0:	f88d 6006 	strb.w	r6, [sp, #6]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000da4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000da6:	4641      	mov	r1, r8
 8000da8:	4638      	mov	r0, r7
 8000daa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000dac:	4798      	blx	r3
 8000dae:	e7e5      	b.n	8000d7c <WIZCHIP_WRITE_BUF+0x3c>
 8000db0:	2000003c 	.word	0x2000003c

08000db4 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 8000db6:	2400      	movs	r4, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000db8:	0146      	lsls	r6, r0, #5
 8000dba:	3608      	adds	r6, #8
 8000dbc:	f506 5700 	add.w	r7, r6, #8192	; 0x2000
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000dc0:	f506 5604 	add.w	r6, r6, #8448	; 0x2100
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000dc4:	4638      	mov	r0, r7
 8000dc6:	f7ff ff21 	bl	8000c0c <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000dca:	0205      	lsls	r5, r0, #8
 8000dcc:	4630      	mov	r0, r6
 8000dce:	f7ff ff1d 	bl	8000c0c <WIZCHIP_READ>
 8000dd2:	b2ad      	uxth	r5, r5
 8000dd4:	4405      	add	r5, r0
 8000dd6:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 8000dd8:	b14d      	cbz	r5, 8000dee <getSn_TX_FSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000dda:	4638      	mov	r0, r7
 8000ddc:	f7ff ff16 	bl	8000c0c <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000de0:	0204      	lsls	r4, r0, #8
 8000de2:	4630      	mov	r0, r6
 8000de4:	f7ff ff12 	bl	8000c0c <WIZCHIP_READ>
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	4404      	add	r4, r0
 8000dec:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	d1e8      	bne.n	8000dc4 <getSn_TX_FSR+0x10>
   return val;
}
 8000df2:	4620      	mov	r0, r4
 8000df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000df6 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8000df6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t val=0,val1=0;
 8000df8:	2400      	movs	r4, #0

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000dfa:	0146      	lsls	r6, r0, #5
 8000dfc:	3608      	adds	r6, #8
 8000dfe:	f506 5718 	add.w	r7, r6, #9728	; 0x2600
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000e02:	f506 561c 	add.w	r6, r6, #9984	; 0x2700
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000e06:	4638      	mov	r0, r7
 8000e08:	f7ff ff00 	bl	8000c0c <WIZCHIP_READ>
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000e0c:	0205      	lsls	r5, r0, #8
 8000e0e:	4630      	mov	r0, r6
 8000e10:	f7ff fefc 	bl	8000c0c <WIZCHIP_READ>
 8000e14:	b2ad      	uxth	r5, r5
 8000e16:	4405      	add	r5, r0
 8000e18:	b2ad      	uxth	r5, r5
      if (val1 != 0)
 8000e1a:	b14d      	cbz	r5, 8000e30 <getSn_RX_RSR+0x3a>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	f7ff fef5 	bl	8000c0c <WIZCHIP_READ>
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000e22:	0204      	lsls	r4, r0, #8
 8000e24:	4630      	mov	r0, r6
 8000e26:	f7ff fef1 	bl	8000c0c <WIZCHIP_READ>
 8000e2a:	b2a4      	uxth	r4, r4
 8000e2c:	4404      	add	r4, r0
 8000e2e:	b2a4      	uxth	r4, r4
      }
   }while (val != val1);
 8000e30:	42ac      	cmp	r4, r5
 8000e32:	d1e8      	bne.n	8000e06 <getSn_RX_RSR+0x10>
   return val;
}
 8000e34:	4620      	mov	r0, r4
 8000e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e38 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e3c:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;

   if(len == 0)  return;
 8000e3e:	4614      	mov	r4, r2
 8000e40:	b32a      	cbz	r2, 8000e8e <wiz_send_data+0x56>
   ptr = getSn_TX_WR(sn);
 8000e42:	0085      	lsls	r5, r0, #2
 8000e44:	1c6f      	adds	r7, r5, #1
 8000e46:	00ff      	lsls	r7, r7, #3
 8000e48:	f507 5810 	add.w	r8, r7, #9216	; 0x2400
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	f7ff fedd 	bl	8000c0c <WIZCHIP_READ>
 8000e52:	f507 5714 	add.w	r7, r7, #9472	; 0x2500
 8000e56:	4606      	mov	r6, r0
 8000e58:	4638      	mov	r0, r7
 8000e5a:	f7ff fed7 	bl	8000c0c <WIZCHIP_READ>
 8000e5e:	eb00 2606 	add.w	r6, r0, r6, lsl #8
 8000e62:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8000e64:	3502      	adds	r5, #2
 8000e66:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8000e68:	4622      	mov	r2, r4
 8000e6a:	4649      	mov	r1, r9
 8000e6c:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8000e70:	f7ff ff66 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8000e74:	19a1      	adds	r1, r4, r6
   setSn_TX_WR(sn,ptr);
 8000e76:	4640      	mov	r0, r8
   ptr += len;
 8000e78:	b28c      	uxth	r4, r1
   setSn_TX_WR(sn,ptr);
 8000e7a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000e7e:	f7ff fef3 	bl	8000c68 <WIZCHIP_WRITE>
 8000e82:	4638      	mov	r0, r7
 8000e84:	b2e1      	uxtb	r1, r4
}
 8000e86:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_TX_WR(sn,ptr);
 8000e8a:	f7ff beed 	b.w	8000c68 <WIZCHIP_WRITE>
}
 8000e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000e92 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000e92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e96:	4689      	mov	r9, r1
   uint16_t ptr = 0;
   uint32_t addrsel = 0;
   
   if(len == 0) return;
 8000e98:	4614      	mov	r4, r2
 8000e9a:	b32a      	cbz	r2, 8000ee8 <wiz_recv_data+0x56>
   ptr = getSn_RX_RD(sn);
 8000e9c:	0085      	lsls	r5, r0, #2
 8000e9e:	1c6f      	adds	r7, r5, #1
 8000ea0:	00ff      	lsls	r7, r7, #3
 8000ea2:	f507 5820 	add.w	r8, r7, #10240	; 0x2800
 8000ea6:	4640      	mov	r0, r8
 8000ea8:	f7ff feb0 	bl	8000c0c <WIZCHIP_READ>
 8000eac:	f507 5724 	add.w	r7, r7, #10496	; 0x2900
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	4638      	mov	r0, r7
 8000eb4:	f7ff feaa 	bl	8000c0c <WIZCHIP_READ>
 8000eb8:	eb00 2606 	add.w	r6, r0, r6, lsl #8
 8000ebc:	b2b6      	uxth	r6, r6
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000ebe:	3503      	adds	r5, #3
 8000ec0:	0230      	lsls	r0, r6, #8
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000ec2:	4622      	mov	r2, r4
 8000ec4:	4649      	mov	r1, r9
 8000ec6:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8000eca:	f7ff feff 	bl	8000ccc <WIZCHIP_READ_BUF>
   ptr += len;
 8000ece:	19a1      	adds	r1, r4, r6
   
   setSn_RX_RD(sn,ptr);
 8000ed0:	4640      	mov	r0, r8
   ptr += len;
 8000ed2:	b28c      	uxth	r4, r1
   setSn_RX_RD(sn,ptr);
 8000ed4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000ed8:	f7ff fec6 	bl	8000c68 <WIZCHIP_WRITE>
 8000edc:	4638      	mov	r0, r7
 8000ede:	b2e1      	uxtb	r1, r4
}
 8000ee0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   setSn_RX_RD(sn,ptr);
 8000ee4:	f7ff bec0 	b.w	8000c68 <WIZCHIP_WRITE>
}
 8000ee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000eec <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8000eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   uint16_t ptr = 0;

   ptr = getSn_RX_RD(sn);
 8000eee:	0144      	lsls	r4, r0, #5
 8000ef0:	3408      	adds	r4, #8
 8000ef2:	f504 5720 	add.w	r7, r4, #10240	; 0x2800
 8000ef6:	4638      	mov	r0, r7
{
 8000ef8:	460d      	mov	r5, r1
   ptr = getSn_RX_RD(sn);
 8000efa:	f7ff fe87 	bl	8000c0c <WIZCHIP_READ>
 8000efe:	f504 5424 	add.w	r4, r4, #10496	; 0x2900
 8000f02:	4606      	mov	r6, r0
 8000f04:	4620      	mov	r0, r4
 8000f06:	f7ff fe81 	bl	8000c0c <WIZCHIP_READ>
   ptr += len;
 8000f0a:	1829      	adds	r1, r5, r0
 8000f0c:	eb01 2106 	add.w	r1, r1, r6, lsl #8
   setSn_RX_RD(sn,ptr);
 8000f10:	4638      	mov	r0, r7
   ptr += len;
 8000f12:	b28d      	uxth	r5, r1
   setSn_RX_RD(sn,ptr);
 8000f14:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8000f18:	f7ff fea6 	bl	8000c68 <WIZCHIP_WRITE>
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	b2e9      	uxtb	r1, r5
}
 8000f20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   setSn_RX_RD(sn,ptr);
 8000f24:	f7ff bea0 	b.w	8000c68 <WIZCHIP_WRITE>

08000f28 <wizchip_select>:
	return (*(__IO uint8_t*)&hspi1.Instance->DR);
}

void  wizchip_select(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2102      	movs	r1, #2
 8000f2c:	4801      	ldr	r0, [pc, #4]	; (8000f34 <wizchip_select+0xc>)
 8000f2e:	f002 ba6d 	b.w	800340c <HAL_GPIO_WritePin>
 8000f32:	bf00      	nop
 8000f34:	40010800 	.word	0x40010800

08000f38 <wizchip_deselect>:
}

void  wizchip_deselect(void)
{
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4801      	ldr	r0, [pc, #4]	; (8000f44 <wizchip_deselect+0xc>)
 8000f3e:	f002 ba65 	b.w	800340c <HAL_GPIO_WritePin>
 8000f42:	bf00      	nop
 8000f44:	40010800 	.word	0x40010800

08000f48 <SPIReadWrite>:
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <SPIReadWrite+0x18>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	0791      	lsls	r1, r2, #30
 8000f50:	d5fc      	bpl.n	8000f4c <SPIReadWrite+0x4>
	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 8000f52:	7318      	strb	r0, [r3, #12]
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	07d2      	lsls	r2, r2, #31
 8000f58:	d5fc      	bpl.n	8000f54 <SPIReadWrite+0xc>
	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 8000f5a:	7b18      	ldrb	r0, [r3, #12]
}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000450 	.word	0x20000450

08000f64 <wizchip_read>:
}

uint8_t wizchip_read()
{
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 8000f64:	2000      	movs	r0, #0
 8000f66:	f7ff bfef 	b.w	8000f48 <SPIReadWrite>

08000f6a <wizchip_write>:
	return rb;
}

void  wizchip_write(uint8_t wb)
{
	SPIReadWrite(wb);
 8000f6a:	f7ff bfed 	b.w	8000f48 <SPIReadWrite>

08000f6e <wizchip_readburst>:
}

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8000f6e:	b538      	push	{r3, r4, r5, lr}
 8000f70:	4604      	mov	r4, r0
 8000f72:	1845      	adds	r5, r0, r1
	for(uint16_t i=0;i<len;i++)
 8000f74:	42ac      	cmp	r4, r5
 8000f76:	d100      	bne.n	8000f7a <wizchip_readburst+0xc>
	{
		*pBuf=SPIReadWrite(0x00);
		pBuf++;
	}
}
 8000f78:	bd38      	pop	{r3, r4, r5, pc}
		*pBuf=SPIReadWrite(0x00);
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	f7ff ffe4 	bl	8000f48 <SPIReadWrite>
 8000f80:	f804 0b01 	strb.w	r0, [r4], #1
	for(uint16_t i=0;i<len;i++)
 8000f84:	e7f6      	b.n	8000f74 <wizchip_readburst+0x6>

08000f86 <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 8000f86:	b538      	push	{r3, r4, r5, lr}
 8000f88:	4604      	mov	r4, r0
 8000f8a:	1845      	adds	r5, r0, r1
	for(uint16_t i=0;i<len;i++)
 8000f8c:	42ac      	cmp	r4, r5
 8000f8e:	d100      	bne.n	8000f92 <wizchip_writeburst+0xc>
	{
		SPIReadWrite(*pBuf);
		pBuf++;
	}
}
 8000f90:	bd38      	pop	{r3, r4, r5, pc}
		SPIReadWrite(*pBuf);
 8000f92:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000f96:	f7ff ffd7 	bl	8000f48 <SPIReadWrite>
	for(uint16_t i=0;i<len;i++)
 8000f9a:	e7f7      	b.n	8000f8c <wizchip_writeburst+0x6>

08000f9c <W5500IOInit>:

void W5500IOInit()
{
 8000f9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	 * Initialize the two GPIO pins
	 * RESET->PA0
	 * and
	 * CS->PA1
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	9304      	str	r3, [sp, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fa6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000faa:	699a      	ldr	r2, [r3, #24]
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	4809      	ldr	r0, [pc, #36]	; (8000fd4 <W5500IOInit+0x38>)
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fae:	f042 0204 	orr.w	r2, r2, #4
 8000fb2:	619a      	str	r2, [r3, #24]
 8000fb4:	699b      	ldr	r3, [r3, #24]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2201      	movs	r2, #1
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	9301      	str	r3, [sp, #4]
 8000fbe:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2303      	movs	r3, #3
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc2:	a902      	add	r1, sp, #8
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	e9cd 3202 	strd	r3, r2, [sp, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc8:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	f002 f949 	bl	8003260 <HAL_GPIO_Init>
}
 8000fce:	b007      	add	sp, #28
 8000fd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8000fd4:	40010800 	.word	0x40010800

08000fd8 <W5500Init>:

void W5500Init()
{
 8000fd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 8000fda:	466a      	mov	r2, sp
 8000fdc:	4615      	mov	r5, r2
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <W5500Init+0x74>)
 8000fe0:	f103 0610 	add.w	r6, r3, #16
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	6859      	ldr	r1, [r3, #4]
 8000fea:	3308      	adds	r3, #8
 8000fec:	c403      	stmia	r4!, {r0, r1}
 8000fee:	42b3      	cmp	r3, r6
 8000ff0:	4622      	mov	r2, r4
 8000ff2:	d1f7      	bne.n	8000fe4 <W5500Init+0xc>

	W5500IOInit();
 8000ff4:	f7ff ffd2 	bl	8000f9c <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2102      	movs	r1, #2
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <W5500Init+0x78>)
 8000ffe:	f002 fa05 	bl	800340c <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2101      	movs	r1, #1
 8001006:	4812      	ldr	r0, [pc, #72]	; (8001050 <W5500Init+0x78>)
 8001008:	f002 fa00 	bl	800340c <HAL_GPIO_WritePin>
	tmp = 0xFF;
	while(tmp--);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	4810      	ldr	r0, [pc, #64]	; (8001050 <W5500Init+0x78>)
 8001010:	4611      	mov	r1, r2
 8001012:	f002 f9fb 	bl	800340c <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001016:	490f      	ldr	r1, [pc, #60]	; (8001054 <W5500Init+0x7c>)
 8001018:	480f      	ldr	r0, [pc, #60]	; (8001058 <W5500Init+0x80>)
 800101a:	f001 fd95 	bl	8002b48 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800101e:	490f      	ldr	r1, [pc, #60]	; (800105c <W5500Init+0x84>)
 8001020:	480f      	ldr	r0, [pc, #60]	; (8001060 <W5500Init+0x88>)
 8001022:	f001 fda3 	bl	8002b6c <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8001026:	490f      	ldr	r1, [pc, #60]	; (8001064 <W5500Init+0x8c>)
 8001028:	480f      	ldr	r0, [pc, #60]	; (8001068 <W5500Init+0x90>)
 800102a:	f001 fdb5 	bl	8002b98 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 800102e:	4629      	mov	r1, r5
 8001030:	2001      	movs	r0, #1
 8001032:	f001 ff33 	bl	8002e9c <ctlwizchip>
 8001036:	3001      	adds	r0, #1
 8001038:	d103      	bne.n	8001042 <W5500Init+0x6a>
		printf("WIZCHIP Initialized Failed.\r\n");
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <W5500Init+0x94>)
 800103c:	f002 fde4 	bl	8003c08 <puts>
		while (1);
 8001040:	e7fe      	b.n	8001040 <W5500Init+0x68>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 8001042:	480b      	ldr	r0, [pc, #44]	; (8001070 <W5500Init+0x98>)
 8001044:	f002 fde0 	bl	8003c08 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 8001048:	b004      	add	sp, #16
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	08004d24 	.word	0x08004d24
 8001050:	40010800 	.word	0x40010800
 8001054:	08000f39 	.word	0x08000f39
 8001058:	08000f29 	.word	0x08000f29
 800105c:	08000f6b 	.word	0x08000f6b
 8001060:	08000f65 	.word	0x08000f65
 8001064:	08000f87 	.word	0x08000f87
 8001068:	08000f6f 	.word	0x08000f6f
 800106c:	080050d5 	.word	0x080050d5
 8001070:	080050f2 	.word	0x080050f2

08001074 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001074:	b508      	push	{r3, lr}
   setSIPR(DHCP_allocated_ip);
 8001076:	2204      	movs	r2, #4
 8001078:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800107c:	4908      	ldr	r1, [pc, #32]	; (80010a0 <default_ip_assign+0x2c>)
 800107e:	f7ff fe5f 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001082:	2204      	movs	r2, #4
 8001084:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001088:	4906      	ldr	r1, [pc, #24]	; (80010a4 <default_ip_assign+0x30>)
 800108a:	f7ff fe59 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
}
 800108e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setGAR (DHCP_allocated_gw);
 8001092:	2204      	movs	r2, #4
 8001094:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001098:	4903      	ldr	r1, [pc, #12]	; (80010a8 <default_ip_assign+0x34>)
 800109a:	f7ff be51 	b.w	8000d40 <WIZCHIP_WRITE_BUF>
 800109e:	bf00      	nop
 80010a0:	20000520 	.word	0x20000520
 80010a4:	20000524 	.word	0x20000524
 80010a8:	2000051c 	.word	0x2000051c

080010ac <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 80010ac:	b508      	push	{r3, lr}
	/* WIZchip Software Reset */
   setMR(MR_RST);
 80010ae:	2180      	movs	r1, #128	; 0x80
 80010b0:	2000      	movs	r0, #0
 80010b2:	f7ff fdd9 	bl	8000c68 <WIZCHIP_WRITE>
   getMR(); // for delay
 80010b6:	2000      	movs	r0, #0
 80010b8:	f7ff fda8 	bl	8000c0c <WIZCHIP_READ>
   default_ip_assign();
 80010bc:	f7ff ffda 	bl	8001074 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
}
 80010c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   setSHAR(DHCP_CHADDR);
 80010c4:	2206      	movs	r2, #6
 80010c6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80010ca:	4901      	ldr	r1, [pc, #4]	; (80010d0 <default_ip_update+0x24>)
 80010cc:	f7ff be38 	b.w	8000d40 <WIZCHIP_WRITE_BUF>
 80010d0:	20000504 	.word	0x20000504

080010d4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80010d4:	b508      	push	{r3, lr}
	// WIZchip Software Reset
	setMR(MR_RST);
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	2000      	movs	r0, #0
 80010da:	f7ff fdc5 	bl	8000c68 <WIZCHIP_WRITE>
	getMR(); // for delay
 80010de:	2000      	movs	r0, #0
 80010e0:	f7ff fd94 	bl	8000c0c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
}
 80010e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	setSHAR(DHCP_CHADDR);
 80010e8:	2206      	movs	r2, #6
 80010ea:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80010ee:	4901      	ldr	r1, [pc, #4]	; (80010f4 <default_ip_conflict+0x20>)
 80010f0:	f7ff be26 	b.w	8000d40 <WIZCHIP_WRITE_BUF>
 80010f4:	20000504 	.word	0x20000504

080010f8 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 80010f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   dhcp_ip_assign   = default_ip_assign;
   dhcp_ip_update   = default_ip_update;
   dhcp_ip_conflict = default_ip_conflict;
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80010fa:	4d09      	ldr	r5, [pc, #36]	; (8001120 <reg_dhcp_cbfunc+0x28>)
   dhcp_ip_update   = default_ip_update;
 80010fc:	4c09      	ldr	r4, [pc, #36]	; (8001124 <reg_dhcp_cbfunc+0x2c>)
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 80010fe:	2800      	cmp	r0, #0
 8001100:	bf18      	it	ne
 8001102:	4605      	movne	r5, r0
   if(ip_update)   dhcp_ip_update = ip_update;
 8001104:	2900      	cmp	r1, #0
 8001106:	bf18      	it	ne
 8001108:	460c      	movne	r4, r1
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800110a:	2a00      	cmp	r2, #0
   dhcp_ip_conflict = default_ip_conflict;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <reg_dhcp_cbfunc+0x30>)
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800110e:	bf18      	it	ne
 8001110:	4613      	movne	r3, r2
   dhcp_ip_update   = default_ip_update;
 8001112:	4f06      	ldr	r7, [pc, #24]	; (800112c <reg_dhcp_cbfunc+0x34>)
   dhcp_ip_conflict = default_ip_conflict;
 8001114:	4e06      	ldr	r6, [pc, #24]	; (8001130 <reg_dhcp_cbfunc+0x38>)
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8001116:	4807      	ldr	r0, [pc, #28]	; (8001134 <reg_dhcp_cbfunc+0x3c>)
   if(ip_update)   dhcp_ip_update = ip_update;
 8001118:	603c      	str	r4, [r7, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800111a:	6005      	str	r5, [r0, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 800111c:	6033      	str	r3, [r6, #0]
}
 800111e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001120:	08001075 	.word	0x08001075
 8001124:	080010ad 	.word	0x080010ad
 8001128:	080010d5 	.word	0x080010d5
 800112c:	2000002c 	.word	0x2000002c
 8001130:	20000028 	.word	0x20000028
 8001134:	20000024 	.word	0x20000024

08001138 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001138:	b537      	push	{r0, r1, r2, r4, r5, lr}
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800113a:	2206      	movs	r2, #6
 800113c:	4669      	mov	r1, sp
 800113e:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001142:	f7ff fdc3 	bl	8000ccc <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001146:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <makeDHCPMSG+0x84>)
	pDHCPMSG->secs    = DHCP_SECS;
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);

	pDHCPMSG->ciaddr[0] = 0;
 8001148:	2500      	movs	r5, #0
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 800114a:	681c      	ldr	r4, [r3, #0]
 800114c:	4b1c      	ldr	r3, [pc, #112]	; (80011c0 <makeDHCPMSG+0x88>)
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 800114e:	4629      	mov	r1, r5
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001150:	6023      	str	r3, [r4, #0]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <makeDHCPMSG+0x8c>)
	pDHCPMSG->siaddr[0] = 0;
 8001154:	e9c4 5504 	strd	r5, r5, [r4, #16]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001158:	681b      	ldr	r3, [r3, #0]
	pDHCPMSG->giaddr[0] = 0;
 800115a:	61a5      	str	r5, [r4, #24]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 800115c:	0e1a      	lsrs	r2, r3, #24
 800115e:	7122      	strb	r2, [r4, #4]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8001160:	0c1a      	lsrs	r2, r3, #16
 8001162:	7162      	strb	r2, [r4, #5]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 8001164:	71e3      	strb	r3, [r4, #7]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8001166:	0a1a      	lsrs	r2, r3, #8
	pDHCPMSG->ciaddr[0] = 0;
 8001168:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800116c:	e9c4 3502 	strd	r3, r5, [r4, #8]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <makeDHCPMSG+0x90>)
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8001172:	71a2      	strb	r2, [r4, #6]
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001174:	781a      	ldrb	r2, [r3, #0]
	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8001176:	8565      	strh	r5, [r4, #42]	; 0x2a
	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001178:	7722      	strb	r2, [r4, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800117a:	785a      	ldrb	r2, [r3, #1]
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 800117c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8001180:	7762      	strb	r2, [r4, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001182:	789a      	ldrb	r2, [r3, #2]
 8001184:	77a2      	strb	r2, [r4, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001186:	78da      	ldrb	r2, [r3, #3]
 8001188:	77e2      	strb	r2, [r4, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800118a:	791a      	ldrb	r2, [r3, #4]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800118c:	795b      	ldrb	r3, [r3, #5]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800118e:	f884 2020 	strb.w	r2, [r4, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8001192:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8001196:	2240      	movs	r2, #64	; 0x40
	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8001198:	f8c4 5022 	str.w	r5, [r4, #34]	; 0x22
 800119c:	f8c4 5026 	str.w	r5, [r4, #38]	; 0x26
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80011a0:	f002 fca4 	bl	8003aec <memset>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	4629      	mov	r1, r5
 80011a8:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 80011ac:	f002 fc9e 	bl	8003aec <memset>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <makeDHCPMSG+0x94>)
 80011b2:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
}
 80011b6:	b003      	add	sp, #12
 80011b8:	bd30      	pop	{r4, r5, pc}
 80011ba:	bf00      	nop
 80011bc:	20000534 	.word	0x20000534
 80011c0:	00060101 	.word	0x00060101
 80011c4:	20000514 	.word	0x20000514
 80011c8:	20000504 	.word	0x20000504
 80011cc:	63538263 	.word	0x63538263

080011d0 <send_DHCP_DECLINE>:

}

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 80011d0:	b530      	push	{r4, r5, lr}
	
	makeDHCPMSG();

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80011d2:	4d32      	ldr	r5, [pc, #200]	; (800129c <send_DHCP_DECLINE+0xcc>)
{
 80011d4:	b085      	sub	sp, #20
	makeDHCPMSG();
 80011d6:	f7ff ffaf 	bl	8001138 <makeDHCPMSG>
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80011da:	6828      	ldr	r0, [r5, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <send_DHCP_DECLINE+0xd0>)
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80011de:	2100      	movs	r1, #0
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 80011e0:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
	pDHCPMSG->OPT[k++] = 0x07;
 80011e4:	f240 1307 	movw	r3, #263	; 0x107
 80011e8:	f8a0 30f4 	strh.w	r3, [r0, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = 0x01;
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80011ec:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <send_DHCP_DECLINE+0xd4>)
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];

	pDHCPMSG->OPT[k++] = endOption;
 80011ee:	24ff      	movs	r4, #255	; 0xff
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80011f0:	781a      	ldrb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80011f2:	7281      	strb	r1, [r0, #10]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80011f4:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80011f8:	785a      	ldrb	r2, [r3, #1]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80011fa:	72c1      	strb	r1, [r0, #11]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80011fc:	f880 20f7 	strb.w	r2, [r0, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001200:	789a      	ldrb	r2, [r3, #2]

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001202:	f200 1009 	addw	r0, r0, #265	; 0x109
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001206:	f800 2c11 	strb.w	r2, [r0, #-17]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800120a:	78da      	ldrb	r2, [r3, #3]
 800120c:	f800 2c10 	strb.w	r2, [r0, #-16]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001210:	791a      	ldrb	r2, [r3, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001212:	795b      	ldrb	r3, [r3, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001214:	f800 2c0f 	strb.w	r2, [r0, #-15]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001218:	f800 3c0e 	strb.w	r3, [r0, #-14]
	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 800121c:	f240 4332 	movw	r3, #1074	; 0x432
 8001220:	f820 3c0d 	strh.w	r3, [r0, #-13]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <send_DHCP_DECLINE+0xd8>)
 8001226:	781a      	ldrb	r2, [r3, #0]
 8001228:	f800 2c0b 	strb.w	r2, [r0, #-11]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 800122c:	785a      	ldrb	r2, [r3, #1]
 800122e:	f800 2c0a 	strb.w	r2, [r0, #-10]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001232:	789a      	ldrb	r2, [r3, #2]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001234:	78db      	ldrb	r3, [r3, #3]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001236:	f800 2c09 	strb.w	r2, [r0, #-9]
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800123a:	f800 3c08 	strb.w	r3, [r0, #-8]
	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 800123e:	f240 4336 	movw	r3, #1078	; 0x436
 8001242:	f820 3c07 	strh.w	r3, [r0, #-7]
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <send_DHCP_DECLINE+0xdc>)
 8001248:	781a      	ldrb	r2, [r3, #0]
 800124a:	f800 2c05 	strb.w	r2, [r0, #-5]
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 800124e:	785a      	ldrb	r2, [r3, #1]
 8001250:	f800 2c04 	strb.w	r2, [r0, #-4]
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001254:	789a      	ldrb	r2, [r3, #2]
 8001256:	f800 2c03 	strb.w	r2, [r0, #-3]
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800125a:	78db      	ldrb	r3, [r3, #3]
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800125c:	f240 121b 	movw	r2, #283	; 0x11b
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001260:	f800 3c02 	strb.w	r3, [r0, #-2]
	pDHCPMSG->OPT[k++] = endOption;
 8001264:	f800 4c01 	strb.w	r4, [r0, #-1]
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001268:	f002 fc40 	bl	8003aec <memset>
	ip[1] = 0xFF;
	ip[2] = 0xFF;
	ip[3] = 0xFF;

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
 800126c:	4810      	ldr	r0, [pc, #64]	; (80012b0 <send_DHCP_DECLINE+0xe0>)
	ip[0] = 0xFF;
 800126e:	f88d 400c 	strb.w	r4, [sp, #12]
	ip[1] = 0xFF;
 8001272:	f88d 400d 	strb.w	r4, [sp, #13]
	ip[2] = 0xFF;
 8001276:	f88d 400e 	strb.w	r4, [sp, #14]
	ip[3] = 0xFF;
 800127a:	f88d 400f 	strb.w	r4, [sp, #15]
	printf("\r\n> Send DHCP_DECLINE\r\n");
 800127e:	f002 fcc3 	bl	8003c08 <puts>
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001282:	2343      	movs	r3, #67	; 0x43
 8001284:	480b      	ldr	r0, [pc, #44]	; (80012b4 <send_DHCP_DECLINE+0xe4>)
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	f44f 7209 	mov.w	r2, #548	; 0x224
 800128c:	6829      	ldr	r1, [r5, #0]
 800128e:	ab03      	add	r3, sp, #12
 8001290:	7800      	ldrb	r0, [r0, #0]
 8001292:	f001 fa97 	bl	80027c4 <sendto>
}
 8001296:	b005      	add	sp, #20
 8001298:	bd30      	pop	{r4, r5, pc}
 800129a:	bf00      	nop
 800129c:	20000534 	.word	0x20000534
 80012a0:	3d040135 	.word	0x3d040135
 80012a4:	20000504 	.word	0x20000504
 80012a8:	20000520 	.word	0x20000520
 80012ac:	2000050e 	.word	0x2000050e
 80012b0:	08005113 	.word	0x08005113
 80012b4:	20000512 	.word	0x20000512

080012b8 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 80012b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80012bc:	4c87      	ldr	r4, [pc, #540]	; (80014dc <parseDHCPMSG+0x224>)
{
 80012be:	b089      	sub	sp, #36	; 0x24
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 80012c0:	7820      	ldrb	r0, [r4, #0]
 80012c2:	f7ff fd98 	bl	8000df6 <getSn_RX_RSR>
 80012c6:	2800      	cmp	r0, #0
 80012c8:	d03f      	beq.n	800134a <parseDHCPMSG+0x92>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 80012ca:	f10d 0316 	add.w	r3, sp, #22
 80012ce:	4d84      	ldr	r5, [pc, #528]	; (80014e0 <parseDHCPMSG+0x228>)
 80012d0:	9300      	str	r3, [sp, #0]
 80012d2:	4602      	mov	r2, r0
 80012d4:	6829      	ldr	r1, [r5, #0]
 80012d6:	7820      	ldrb	r0, [r4, #0]
 80012d8:	ab06      	add	r3, sp, #24
 80012da:	f001 fb23 	bl	8002924 <recvfrom>
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
 80012de:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80012e2:	b284      	uxth	r4, r0
 80012e4:	9301      	str	r3, [sp, #4]
 80012e6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80012ea:	f89d 2019 	ldrb.w	r2, [sp, #25]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f89d 1018 	ldrb.w	r1, [sp, #24]
 80012f4:	f89d 301a 	ldrb.w	r3, [sp, #26]
 80012f8:	487a      	ldr	r0, [pc, #488]	; (80014e4 <parseDHCPMSG+0x22c>)
 80012fa:	9402      	str	r4, [sp, #8]
 80012fc:	f002 fbfe 	bl	8003afc <iprintf>
   #endif   
   }
   else{ return 0;}
	if (svr_port == DHCP_SERVER_PORT) {
 8001300:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8001304:	2b43      	cmp	r3, #67	; 0x43
 8001306:	f040 80e6 	bne.w	80014d6 <parseDHCPMSG+0x21e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 800130a:	682a      	ldr	r2, [r5, #0]
 800130c:	4b76      	ldr	r3, [pc, #472]	; (80014e8 <parseDHCPMSG+0x230>)
 800130e:	7f10      	ldrb	r0, [r2, #28]
 8001310:	7819      	ldrb	r1, [r3, #0]
 8001312:	4288      	cmp	r0, r1
 8001314:	d115      	bne.n	8001342 <parseDHCPMSG+0x8a>
 8001316:	7f50      	ldrb	r0, [r2, #29]
 8001318:	7859      	ldrb	r1, [r3, #1]
 800131a:	4288      	cmp	r0, r1
 800131c:	d111      	bne.n	8001342 <parseDHCPMSG+0x8a>
 800131e:	7f90      	ldrb	r0, [r2, #30]
 8001320:	7899      	ldrb	r1, [r3, #2]
 8001322:	4288      	cmp	r0, r1
 8001324:	d10d      	bne.n	8001342 <parseDHCPMSG+0x8a>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001326:	7fd0      	ldrb	r0, [r2, #31]
 8001328:	78d9      	ldrb	r1, [r3, #3]
 800132a:	4288      	cmp	r0, r1
 800132c:	d109      	bne.n	8001342 <parseDHCPMSG+0x8a>
 800132e:	f892 0020 	ldrb.w	r0, [r2, #32]
 8001332:	7919      	ldrb	r1, [r3, #4]
 8001334:	4288      	cmp	r0, r1
 8001336:	d104      	bne.n	8001342 <parseDHCPMSG+0x8a>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001338:	f892 1021 	ldrb.w	r1, [r2, #33]	; 0x21
 800133c:	795b      	ldrb	r3, [r3, #5]
 800133e:	4299      	cmp	r1, r3
 8001340:	d006      	beq.n	8001350 <parseDHCPMSG+0x98>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
 8001342:	486a      	ldr	r0, [pc, #424]	; (80014ec <parseDHCPMSG+0x234>)
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
 8001344:	f002 fc60 	bl	8003c08 <puts>
#endif
                return 0;
 8001348:	2000      	movs	r0, #0
   				break;
			} // switch
		} // while
	} // if
	return	type;
}
 800134a:	b009      	add	sp, #36	; 0x24
 800134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8001350:	4967      	ldr	r1, [pc, #412]	; (80014f0 <parseDHCPMSG+0x238>)
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001352:	f89d c018 	ldrb.w	ip, [sp, #24]
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8001356:	780f      	ldrb	r7, [r1, #0]
 8001358:	784e      	ldrb	r6, [r1, #1]
 800135a:	788d      	ldrb	r5, [r1, #2]
 800135c:	78c8      	ldrb	r0, [r1, #3]
 800135e:	ea47 0306 	orr.w	r3, r7, r6
 8001362:	432b      	orrs	r3, r5
 8001364:	4303      	orrs	r3, r0
 8001366:	d022      	beq.n	80013ae <parseDHCPMSG+0xf6>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001368:	45bc      	cmp	ip, r7
 800136a:	d10b      	bne.n	8001384 <parseDHCPMSG+0xcc>
 800136c:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8001370:	42b3      	cmp	r3, r6
 8001372:	d107      	bne.n	8001384 <parseDHCPMSG+0xcc>
 8001374:	f89d 301a 	ldrb.w	r3, [sp, #26]
 8001378:	42ab      	cmp	r3, r5
 800137a:	d103      	bne.n	8001384 <parseDHCPMSG+0xcc>
 800137c:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8001380:	4283      	cmp	r3, r0
 8001382:	d014      	beq.n	80013ae <parseDHCPMSG+0xf6>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001384:	4b5b      	ldr	r3, [pc, #364]	; (80014f4 <parseDHCPMSG+0x23c>)
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001386:	7818      	ldrb	r0, [r3, #0]
 8001388:	4560      	cmp	r0, ip
 800138a:	d10e      	bne.n	80013aa <parseDHCPMSG+0xf2>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 800138c:	f89d 5019 	ldrb.w	r5, [sp, #25]
 8001390:	7858      	ldrb	r0, [r3, #1]
 8001392:	4285      	cmp	r5, r0
 8001394:	d109      	bne.n	80013aa <parseDHCPMSG+0xf2>
 8001396:	f89d 501a 	ldrb.w	r5, [sp, #26]
 800139a:	7898      	ldrb	r0, [r3, #2]
 800139c:	4285      	cmp	r5, r0
 800139e:	d104      	bne.n	80013aa <parseDHCPMSG+0xf2>
 80013a0:	f89d 001b 	ldrb.w	r0, [sp, #27]
 80013a4:	78db      	ldrb	r3, [r3, #3]
 80013a6:	4298      	cmp	r0, r3
 80013a8:	d001      	beq.n	80013ae <parseDHCPMSG+0xf6>
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
 80013aa:	4853      	ldr	r0, [pc, #332]	; (80014f8 <parseDHCPMSG+0x240>)
 80013ac:	e7ca      	b.n	8001344 <parseDHCPMSG+0x8c>
	uint8_t type = 0;
 80013ae:	2000      	movs	r0, #0
		e = p + (len - 240);
 80013b0:	f102 03f0 	add.w	r3, r2, #240	; 0xf0
                DHCP_REAL_SIP[1]=svr_addr[1];
 80013b4:	f89d 9019 	ldrb.w	r9, [sp, #25]
		e = p + (len - 240);
 80013b8:	4422      	add	r2, r4
                DHCP_REAL_SIP[2]=svr_addr[2];
 80013ba:	f89d a01a 	ldrb.w	sl, [sp, #26]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80013be:	f89d 801b 	ldrb.w	r8, [sp, #27]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80013c2:	4c4c      	ldr	r4, [pc, #304]	; (80014f4 <parseDHCPMSG+0x23c>)
   				DHCP_allocated_dns[0] = *p++;
 80013c4:	4d4d      	ldr	r5, [pc, #308]	; (80014fc <parseDHCPMSG+0x244>)
   				DHCP_allocated_gw[0] = *p++;
 80013c6:	4e4e      	ldr	r6, [pc, #312]	; (8001500 <parseDHCPMSG+0x248>)
   				DHCP_allocated_sn[0] = *p++;
 80013c8:	4f4e      	ldr	r7, [pc, #312]	; (8001504 <parseDHCPMSG+0x24c>)
		while ( p < e ) {
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d301      	bcc.n	80013d2 <parseDHCPMSG+0x11a>
	return	type;
 80013ce:	b240      	sxtb	r0, r0
 80013d0:	e7bb      	b.n	800134a <parseDHCPMSG+0x92>
			switch ( *p ) {
 80013d2:	f893 e000 	ldrb.w	lr, [r3]
 80013d6:	f1be 0f33 	cmp.w	lr, #51	; 0x33
 80013da:	d059      	beq.n	8001490 <parseDHCPMSG+0x1d8>
 80013dc:	d80b      	bhi.n	80013f6 <parseDHCPMSG+0x13e>
 80013de:	f1be 0f06 	cmp.w	lr, #6
 80013e2:	d811      	bhi.n	8001408 <parseDHCPMSG+0x150>
 80013e4:	f1be 0f06 	cmp.w	lr, #6
 80013e8:	d80e      	bhi.n	8001408 <parseDHCPMSG+0x150>
 80013ea:	e8df f00e 	tbb	[pc, lr]
 80013ee:	1712      	.short	0x1712
 80013f0:	0d0d290d 	.word	0x0d0d290d
 80013f4:	3e          	.byte	0x3e
 80013f5:	00          	.byte	0x00
 80013f6:	f1be 0f36 	cmp.w	lr, #54	; 0x36
 80013fa:	d051      	beq.n	80014a0 <parseDHCPMSG+0x1e8>
 80013fc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8001400:	d067      	beq.n	80014d2 <parseDHCPMSG+0x21a>
 8001402:	f1be 0f35 	cmp.w	lr, #53	; 0x35
 8001406:	d006      	beq.n	8001416 <parseDHCPMSG+0x15e>
   				opt_len = *p++;
 8001408:	f103 0e02 	add.w	lr, r3, #2
   				p += opt_len;
 800140c:	785b      	ldrb	r3, [r3, #1]
 800140e:	4473      	add	r3, lr
   				break;
 8001410:	e7db      	b.n	80013ca <parseDHCPMSG+0x112>
   				p++;
 8001412:	3301      	adds	r3, #1
   				break;
 8001414:	e7d9      	b.n	80013ca <parseDHCPMSG+0x112>
   				type = *p++;
 8001416:	7898      	ldrb	r0, [r3, #2]
 8001418:	3303      	adds	r3, #3
   				break;
 800141a:	e7d6      	b.n	80013ca <parseDHCPMSG+0x112>
   				DHCP_allocated_sn[0] = *p++;
 800141c:	f893 e002 	ldrb.w	lr, [r3, #2]
 8001420:	f887 e000 	strb.w	lr, [r7]
   				DHCP_allocated_sn[1] = *p++;
 8001424:	f893 e003 	ldrb.w	lr, [r3, #3]
 8001428:	f887 e001 	strb.w	lr, [r7, #1]
   				DHCP_allocated_sn[2] = *p++;
 800142c:	f893 e004 	ldrb.w	lr, [r3, #4]
 8001430:	f887 e002 	strb.w	lr, [r7, #2]
   				DHCP_allocated_sn[3] = *p++;
 8001434:	f893 e005 	ldrb.w	lr, [r3, #5]
 8001438:	f887 e003 	strb.w	lr, [r7, #3]
   				DHCP_SIP[3] = *p++;
 800143c:	3306      	adds	r3, #6
   				break;
 800143e:	e7c4      	b.n	80013ca <parseDHCPMSG+0x112>
   				DHCP_allocated_gw[0] = *p++;
 8001440:	f893 b002 	ldrb.w	fp, [r3, #2]
   				opt_len = *p++;       
 8001444:	f893 e001 	ldrb.w	lr, [r3, #1]
   				DHCP_allocated_gw[0] = *p++;
 8001448:	f886 b000 	strb.w	fp, [r6]
   				DHCP_allocated_gw[1] = *p++;
 800144c:	f893 b003 	ldrb.w	fp, [r3, #3]
 8001450:	f886 b001 	strb.w	fp, [r6, #1]
   				DHCP_allocated_gw[2] = *p++;
 8001454:	f893 b004 	ldrb.w	fp, [r3, #4]
 8001458:	f886 b002 	strb.w	fp, [r6, #2]
   				DHCP_allocated_gw[3] = *p++;
 800145c:	f893 b005 	ldrb.w	fp, [r3, #5]
 8001460:	f886 b003 	strb.w	fp, [r6, #3]
   				p = p + (opt_len - 4);
 8001464:	4473      	add	r3, lr
 8001466:	3302      	adds	r3, #2
   				break;
 8001468:	e7af      	b.n	80013ca <parseDHCPMSG+0x112>
   				DHCP_allocated_dns[0] = *p++;
 800146a:	f893 b002 	ldrb.w	fp, [r3, #2]
   				opt_len = *p++;       
 800146e:	f893 e001 	ldrb.w	lr, [r3, #1]
   				DHCP_allocated_dns[0] = *p++;
 8001472:	f885 b000 	strb.w	fp, [r5]
   				DHCP_allocated_dns[1] = *p++;
 8001476:	f893 b003 	ldrb.w	fp, [r3, #3]
 800147a:	f885 b001 	strb.w	fp, [r5, #1]
   				DHCP_allocated_dns[2] = *p++;
 800147e:	f893 b004 	ldrb.w	fp, [r3, #4]
 8001482:	f885 b002 	strb.w	fp, [r5, #2]
   				DHCP_allocated_dns[3] = *p++;
 8001486:	f893 b005 	ldrb.w	fp, [r3, #5]
 800148a:	f885 b003 	strb.w	fp, [r5, #3]
 800148e:	e7e9      	b.n	8001464 <parseDHCPMSG+0x1ac>
               dhcp_lease_time = 10;
 8001490:	f04f 0b0a 	mov.w	fp, #10
 8001494:	f8df e070 	ldr.w	lr, [pc, #112]	; 8001508 <parseDHCPMSG+0x250>
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8001498:	3306      	adds	r3, #6
               dhcp_lease_time = 10;
 800149a:	f8ce b000 	str.w	fp, [lr]
   				break;
 800149e:	e794      	b.n	80013ca <parseDHCPMSG+0x112>
   				DHCP_SIP[0] = *p++;
 80014a0:	f893 e002 	ldrb.w	lr, [r3, #2]
                DHCP_REAL_SIP[0]=svr_addr[0];
 80014a4:	f884 c000 	strb.w	ip, [r4]
   				DHCP_SIP[0] = *p++;
 80014a8:	f881 e000 	strb.w	lr, [r1]
   				DHCP_SIP[1] = *p++;
 80014ac:	f893 e003 	ldrb.w	lr, [r3, #3]
                DHCP_REAL_SIP[1]=svr_addr[1];
 80014b0:	f884 9001 	strb.w	r9, [r4, #1]
   				DHCP_SIP[1] = *p++;
 80014b4:	f881 e001 	strb.w	lr, [r1, #1]
   				DHCP_SIP[2] = *p++;
 80014b8:	f893 e004 	ldrb.w	lr, [r3, #4]
                DHCP_REAL_SIP[2]=svr_addr[2];
 80014bc:	f884 a002 	strb.w	sl, [r4, #2]
   				DHCP_SIP[2] = *p++;
 80014c0:	f881 e002 	strb.w	lr, [r1, #2]
   				DHCP_SIP[3] = *p++;
 80014c4:	f893 e005 	ldrb.w	lr, [r3, #5]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80014c8:	f884 8003 	strb.w	r8, [r4, #3]
   				DHCP_SIP[3] = *p++;
 80014cc:	f881 e003 	strb.w	lr, [r1, #3]
                DHCP_REAL_SIP[3]=svr_addr[3];
 80014d0:	e7b4      	b.n	800143c <parseDHCPMSG+0x184>
			switch ( *p ) {
 80014d2:	4613      	mov	r3, r2
 80014d4:	e779      	b.n	80013ca <parseDHCPMSG+0x112>
	uint8_t type = 0;
 80014d6:	2000      	movs	r0, #0
 80014d8:	e779      	b.n	80013ce <parseDHCPMSG+0x116>
 80014da:	bf00      	nop
 80014dc:	20000512 	.word	0x20000512
 80014e0:	20000534 	.word	0x20000534
 80014e4:	0800512a 	.word	0x0800512a
 80014e8:	20000504 	.word	0x20000504
 80014ec:	08005159 	.word	0x08005159
 80014f0:	2000050e 	.word	0x2000050e
 80014f4:	2000050a 	.word	0x2000050a
 80014f8:	08005187 	.word	0x08005187
 80014fc:	20000518 	.word	0x20000518
 8001500:	2000051c 	.word	0x2000051c
 8001504:	20000524 	.word	0x20000524
 8001508:	20000030 	.word	0x20000030

0800150c <DHCP_stop>:

	return ret;
}

void    DHCP_stop(void)
{
 800150c:	b508      	push	{r3, lr}
   close(DHCP_SOCKET);
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <DHCP_stop+0x14>)
 8001510:	7818      	ldrb	r0, [r3, #0]
 8001512:	f001 f887 	bl	8002624 <close>
   dhcp_state = STATE_DHCP_STOP;
 8001516:	2206      	movs	r2, #6
 8001518:	4b02      	ldr	r3, [pc, #8]	; (8001524 <DHCP_stop+0x18>)
 800151a:	701a      	strb	r2, [r3, #0]
}
 800151c:	bd08      	pop	{r3, pc}
 800151e:	bf00      	nop
 8001520:	20000512 	.word	0x20000512
 8001524:	2000052d 	.word	0x2000052d

08001528 <check_DHCP_leasedIP>:
	}
	return ret;
}

int8_t check_DHCP_leasedIP(void)
{
 8001528:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 800152a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800152e:	f7ff fb6d 	bl	8000c0c <WIZCHIP_READ>
	setRCR(0x03);
 8001532:	2103      	movs	r1, #3
	tmp = getRCR();
 8001534:	4605      	mov	r5, r0
	setRCR(0x03);
 8001536:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800153a:	f7ff fb95 	bl	8000c68 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 800153e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001542:	4810      	ldr	r0, [pc, #64]	; (8001584 <check_DHCP_leasedIP+0x5c>)
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	2211      	movs	r2, #17
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <check_DHCP_leasedIP+0x60>)
 800154a:	4910      	ldr	r1, [pc, #64]	; (800158c <check_DHCP_leasedIP+0x64>)
 800154c:	7800      	ldrb	r0, [r0, #0]
 800154e:	f001 f939 	bl	80027c4 <sendto>
 8001552:	4604      	mov	r4, r0

	// RCR value restore
	setRCR(tmp);
 8001554:	4629      	mov	r1, r5
 8001556:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800155a:	f7ff fb85 	bl	8000c68 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 800155e:	340d      	adds	r4, #13
 8001560:	d105      	bne.n	800156e <check_DHCP_leasedIP+0x46>
		// UDP send Timeout occurred : allocated IP address is unique, DHCP Success

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
 8001562:	480b      	ldr	r0, [pc, #44]	; (8001590 <check_DHCP_leasedIP+0x68>)
 8001564:	f002 fb50 	bl	8003c08 <puts>
#endif

		return 1;
 8001568:	2001      	movs	r0, #1
		ret = dhcp_tick_1s;
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;

		return 0;
	}
}	
 800156a:	b003      	add	sp, #12
 800156c:	bd30      	pop	{r4, r5, pc}
		send_DHCP_DECLINE();
 800156e:	f7ff fe2f 	bl	80011d0 <send_DHCP_DECLINE>
		ret = dhcp_tick_1s;
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <check_DHCP_leasedIP+0x6c>)
 8001574:	6811      	ldr	r1, [r2, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	1a5b      	subs	r3, r3, r1
 800157a:	2b01      	cmp	r3, #1
 800157c:	d9fb      	bls.n	8001576 <check_DHCP_leasedIP+0x4e>
 800157e:	2000      	movs	r0, #0
 8001580:	e7f3      	b.n	800156a <check_DHCP_leasedIP+0x42>
 8001582:	bf00      	nop
 8001584:	20000512 	.word	0x20000512
 8001588:	20000520 	.word	0x20000520
 800158c:	080051c5 	.word	0x080051c5
 8001590:	080051d7 	.word	0x080051d7
 8001594:	20000530 	.word	0x20000530

08001598 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
	dhcp_tick_1s = 0;
 8001598:	2300      	movs	r3, #0
	dhcp_tick_next = DHCP_WAIT_TIME;
 800159a:	210a      	movs	r1, #10
	dhcp_tick_1s = 0;
 800159c:	4a03      	ldr	r2, [pc, #12]	; (80015ac <reset_DHCP_timeout+0x14>)
 800159e:	6013      	str	r3, [r2, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 80015a0:	4a03      	ldr	r2, [pc, #12]	; (80015b0 <reset_DHCP_timeout+0x18>)
 80015a2:	6011      	str	r1, [r2, #0]
	dhcp_retry_count = 0;
 80015a4:	4a03      	ldr	r2, [pc, #12]	; (80015b4 <reset_DHCP_timeout+0x1c>)
 80015a6:	7013      	strb	r3, [r2, #0]
}
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000530 	.word	0x20000530
 80015b0:	20000034 	.word	0x20000034
 80015b4:	2000052c 	.word	0x2000052c

080015b8 <DHCP_init>:
   uint8_t zeroip[4] = {0,0,0,0};
 80015b8:	2300      	movs	r3, #0
{
 80015ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   getSHAR(DHCP_CHADDR);
 80015bc:	4c24      	ldr	r4, [pc, #144]	; (8001650 <DHCP_init+0x98>)
 80015be:	2206      	movs	r2, #6
{
 80015c0:	4606      	mov	r6, r0
 80015c2:	460d      	mov	r5, r1
   getSHAR(DHCP_CHADDR);
 80015c4:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80015c8:	4621      	mov	r1, r4
   uint8_t zeroip[4] = {0,0,0,0};
 80015ca:	9301      	str	r3, [sp, #4]
   getSHAR(DHCP_CHADDR);
 80015cc:	f7ff fb7e 	bl	8000ccc <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 80015d0:	7862      	ldrb	r2, [r4, #1]
 80015d2:	7823      	ldrb	r3, [r4, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	78a2      	ldrb	r2, [r4, #2]
 80015d8:	4313      	orrs	r3, r2
 80015da:	78e2      	ldrb	r2, [r4, #3]
 80015dc:	4313      	orrs	r3, r2
 80015de:	7922      	ldrb	r2, [r4, #4]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	7962      	ldrb	r2, [r4, #5]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	d10d      	bne.n	8001604 <DHCP_init+0x4c>
      DHCP_CHADDR[1] = 0x08;
 80015e8:	2208      	movs	r2, #8
 80015ea:	7062      	strb	r2, [r4, #1]
      DHCP_CHADDR[2] = 0xdc;      
 80015ec:	22dc      	movs	r2, #220	; 0xdc
      setSHAR(DHCP_CHADDR);     
 80015ee:	4621      	mov	r1, r4
      DHCP_CHADDR[2] = 0xdc;      
 80015f0:	70a2      	strb	r2, [r4, #2]
      setSHAR(DHCP_CHADDR);     
 80015f2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80015f6:	2206      	movs	r2, #6
      DHCP_CHADDR[0] = 0x00;
 80015f8:	7023      	strb	r3, [r4, #0]
      DHCP_CHADDR[3] = 0x00;
 80015fa:	70e3      	strb	r3, [r4, #3]
      DHCP_CHADDR[4] = 0x00;
 80015fc:	7123      	strb	r3, [r4, #4]
      DHCP_CHADDR[5] = 0x00; 
 80015fe:	7163      	strb	r3, [r4, #5]
      setSHAR(DHCP_CHADDR);     
 8001600:	f7ff fb9e 	bl	8000d40 <WIZCHIP_WRITE_BUF>
	DHCP_SOCKET = s; // SOCK_DHCP
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <DHCP_init+0x9c>)
		DHCP_XID += DHCP_CHADDR[4];
 8001606:	7920      	ldrb	r0, [r4, #4]
	DHCP_SOCKET = s; // SOCK_DHCP
 8001608:	701e      	strb	r6, [r3, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800160a:	4b13      	ldr	r3, [pc, #76]	; (8001658 <DHCP_init+0xa0>)
		DHCP_XID += DHCP_CHADDR[3];
 800160c:	78e1      	ldrb	r1, [r4, #3]
	pDHCPMSG = (RIP_MSG*)buf;
 800160e:	601d      	str	r5, [r3, #0]
		DHCP_XID += DHCP_CHADDR[4];
 8001610:	4b12      	ldr	r3, [pc, #72]	; (800165c <DHCP_init+0xa4>)
		DHCP_XID += DHCP_CHADDR[5];
 8001612:	7962      	ldrb	r2, [r4, #5]
		DHCP_XID += DHCP_CHADDR[4];
 8001614:	180c      	adds	r4, r1, r0
 8001616:	4423      	add	r3, r4
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8001618:	4041      	eors	r1, r0
		DHCP_XID += DHCP_CHADDR[5];
 800161a:	4413      	add	r3, r2
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 800161c:	404a      	eors	r2, r1
 800161e:	4413      	add	r3, r2
 8001620:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <DHCP_init+0xa8>)
	setSIPR(zeroip);
 8001622:	f44f 6070 	mov.w	r0, #3840	; 0xf00
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 8001626:	6013      	str	r3, [r2, #0]
	setSIPR(zeroip);
 8001628:	2204      	movs	r2, #4
 800162a:	eb0d 0102 	add.w	r1, sp, r2
 800162e:	f7ff fb87 	bl	8000d40 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8001632:	2204      	movs	r2, #4
 8001634:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001638:	eb0d 0102 	add.w	r1, sp, r2
 800163c:	f7ff fb80 	bl	8000d40 <WIZCHIP_WRITE_BUF>
	reset_DHCP_timeout();
 8001640:	f7ff ffaa 	bl	8001598 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8001644:	2200      	movs	r2, #0
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <DHCP_init+0xac>)
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	b002      	add	sp, #8
 800164c:	bd70      	pop	{r4, r5, r6, pc}
 800164e:	bf00      	nop
 8001650:	20000504 	.word	0x20000504
 8001654:	20000512 	.word	0x20000512
 8001658:	20000534 	.word	0x20000534
 800165c:	12345678 	.word	0x12345678
 8001660:	20000514 	.word	0x20000514
 8001664:	2000052d 	.word	0x2000052d

08001668 <DHCP_time_handler>:

void DHCP_time_handler(void)
{
	dhcp_tick_1s++;
 8001668:	4a02      	ldr	r2, [pc, #8]	; (8001674 <DHCP_time_handler+0xc>)
 800166a:	6813      	ldr	r3, [r2, #0]
 800166c:	3301      	adds	r3, #1
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	20000530 	.word	0x20000530

08001678 <getIPfromDHCP>:

void getIPfromDHCP(uint8_t* ip)
{
	ip[0] = DHCP_allocated_ip[0];
 8001678:	4b04      	ldr	r3, [pc, #16]	; (800168c <getIPfromDHCP+0x14>)
 800167a:	781a      	ldrb	r2, [r3, #0]
 800167c:	7002      	strb	r2, [r0, #0]
	ip[1] = DHCP_allocated_ip[1];
 800167e:	785a      	ldrb	r2, [r3, #1]
 8001680:	7042      	strb	r2, [r0, #1]
	ip[2] = DHCP_allocated_ip[2];	
 8001682:	789a      	ldrb	r2, [r3, #2]
 8001684:	7082      	strb	r2, [r0, #2]
	ip[3] = DHCP_allocated_ip[3];
 8001686:	78db      	ldrb	r3, [r3, #3]
 8001688:	70c3      	strb	r3, [r0, #3]
}
 800168a:	4770      	bx	lr
 800168c:	20000520 	.word	0x20000520

08001690 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
	ip[0] =DHCP_allocated_gw[0];
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <getGWfromDHCP+0x14>)
 8001692:	781a      	ldrb	r2, [r3, #0]
 8001694:	7002      	strb	r2, [r0, #0]
	ip[1] =DHCP_allocated_gw[1];
 8001696:	785a      	ldrb	r2, [r3, #1]
 8001698:	7042      	strb	r2, [r0, #1]
	ip[2] =DHCP_allocated_gw[2];
 800169a:	789a      	ldrb	r2, [r3, #2]
 800169c:	7082      	strb	r2, [r0, #2]
	ip[3] =DHCP_allocated_gw[3];			
 800169e:	78db      	ldrb	r3, [r3, #3]
 80016a0:	70c3      	strb	r3, [r0, #3]
}
 80016a2:	4770      	bx	lr
 80016a4:	2000051c 	.word	0x2000051c

080016a8 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_sn[0];
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <getSNfromDHCP+0x14>)
 80016aa:	781a      	ldrb	r2, [r3, #0]
 80016ac:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_sn[1];
 80016ae:	785a      	ldrb	r2, [r3, #1]
 80016b0:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_sn[2];
 80016b2:	789a      	ldrb	r2, [r3, #2]
 80016b4:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_sn[3];         
 80016b6:	78db      	ldrb	r3, [r3, #3]
 80016b8:	70c3      	strb	r3, [r0, #3]
}
 80016ba:	4770      	bx	lr
 80016bc:	20000524 	.word	0x20000524

080016c0 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
   ip[0] = DHCP_allocated_dns[0];
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <getDNSfromDHCP+0x14>)
 80016c2:	781a      	ldrb	r2, [r3, #0]
 80016c4:	7002      	strb	r2, [r0, #0]
   ip[1] = DHCP_allocated_dns[1];
 80016c6:	785a      	ldrb	r2, [r3, #1]
 80016c8:	7042      	strb	r2, [r0, #1]
   ip[2] = DHCP_allocated_dns[2];
 80016ca:	789a      	ldrb	r2, [r3, #2]
 80016cc:	7082      	strb	r2, [r0, #2]
   ip[3] = DHCP_allocated_dns[3];         
 80016ce:	78db      	ldrb	r3, [r3, #3]
 80016d0:	70c3      	strb	r3, [r0, #3]
}
 80016d2:	4770      	bx	lr
 80016d4:	20000518 	.word	0x20000518

080016d8 <getDHCPLeasetime>:

uint32_t getDHCPLeasetime(void)
{
	return dhcp_lease_time;
}
 80016d8:	4b01      	ldr	r3, [pc, #4]	; (80016e0 <getDHCPLeasetime+0x8>)
 80016da:	6818      	ldr	r0, [r3, #0]
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000030 	.word	0x20000030

080016e4 <NibbleToHex>:

char NibbleToHex(uint8_t nibble)
{
  nibble &= 0x0F;
 80016e4:	f000 000f 	and.w	r0, r0, #15
  if (nibble <= 9)
 80016e8:	2809      	cmp	r0, #9
    return nibble + '0';
 80016ea:	bf94      	ite	ls
 80016ec:	3030      	addls	r0, #48	; 0x30
  else 
    return nibble + ('A'-0x0A);
 80016ee:	3037      	addhi	r0, #55	; 0x37
}
 80016f0:	4770      	bx	lr
	...

080016f4 <send_DHCP_DISCOVER>:
{
 80016f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   makeDHCPMSG();
 80016f8:	f7ff fd1e 	bl	8001138 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	4a6a      	ldr	r2, [pc, #424]	; (80018a8 <send_DHCP_DISCOVER+0x1b4>)
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001700:	4d6a      	ldr	r5, [pc, #424]	; (80018ac <send_DHCP_DISCOVER+0x1b8>)
   DHCP_SIP[0]=0;
 8001702:	7013      	strb	r3, [r2, #0]
   DHCP_SIP[1]=0;
 8001704:	7053      	strb	r3, [r2, #1]
   DHCP_SIP[2]=0;
 8001706:	7093      	strb	r3, [r2, #2]
   DHCP_SIP[3]=0;
 8001708:	70d3      	strb	r3, [r2, #3]
   DHCP_REAL_SIP[0]=0;
 800170a:	4a69      	ldr	r2, [pc, #420]	; (80018b0 <send_DHCP_DISCOVER+0x1bc>)
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800170c:	4869      	ldr	r0, [pc, #420]	; (80018b4 <send_DHCP_DISCOVER+0x1c0>)
   DHCP_REAL_SIP[0]=0;
 800170e:	7013      	strb	r3, [r2, #0]
   DHCP_REAL_SIP[1]=0;
 8001710:	7053      	strb	r3, [r2, #1]
   DHCP_REAL_SIP[2]=0;
 8001712:	7093      	strb	r3, [r2, #2]
   DHCP_REAL_SIP[3]=0;
 8001714:	70d3      	strb	r3, [r2, #3]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001716:	682b      	ldr	r3, [r5, #0]
 8001718:	4a67      	ldr	r2, [pc, #412]	; (80018b8 <send_DHCP_DISCOVER+0x1c4>)
 800171a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x07;
 800171e:	f240 1207 	movw	r2, #263	; 0x107
 8001722:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001726:	4a65      	ldr	r2, [pc, #404]	; (80018bc <send_DHCP_DISCOVER+0x1c8>)
 8001728:	7811      	ldrb	r1, [r2, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800172a:	f892 9003 	ldrb.w	r9, [r2, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800172e:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001732:	7851      	ldrb	r1, [r2, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001734:	f892 8004 	ldrb.w	r8, [r2, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001738:	7957      	ldrb	r7, [r2, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800173a:	f883 10f7 	strb.w	r1, [r3, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800173e:	7891      	ldrb	r1, [r2, #2]
	pDHCPMSG->OPT[k++] = hostName;
 8001740:	220c      	movs	r2, #12
 8001742:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001746:	2212      	movs	r2, #18
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001748:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 800174c:	f883 90f9 	strb.w	r9, [r3, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001750:	f883 80fa 	strb.w	r8, [r3, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001754:	f883 70fb 	strb.w	r7, [r3, #251]	; 0xfb
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001758:	f1a2 0412 	sub.w	r4, r2, #18
 800175c:	b2a4      	uxth	r4, r4
 800175e:	5d01      	ldrb	r1, [r0, r4]
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001760:	1c56      	adds	r6, r2, #1
 8001762:	b2b6      	uxth	r6, r6
 8001764:	eb03 0a02 	add.w	sl, r3, r2
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001768:	2900      	cmp	r1, #0
 800176a:	f040 8098 	bne.w	800189e <send_DHCP_DISCOVER+0x1aa>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 800176e:	ea4f 1019 	mov.w	r0, r9, lsr #4
 8001772:	f7ff ffb7 	bl	80016e4 <NibbleToHex>
 8001776:	f88a 00ec 	strb.w	r0, [sl, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800177a:	4648      	mov	r0, r9
 800177c:	f7ff ffb2 	bl	80016e4 <NibbleToHex>
 8001780:	441e      	add	r6, r3
 8001782:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001786:	ea4f 1018 	mov.w	r0, r8, lsr #4
 800178a:	f7ff ffab 	bl	80016e4 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 800178e:	1c96      	adds	r6, r2, #2
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001790:	b2b6      	uxth	r6, r6
 8001792:	441e      	add	r6, r3
 8001794:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001798:	4640      	mov	r0, r8
 800179a:	f7ff ffa3 	bl	80016e4 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 800179e:	1cd6      	adds	r6, r2, #3
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80017a0:	b2b6      	uxth	r6, r6
 80017a2:	441e      	add	r6, r3
 80017a4:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80017a8:	0938      	lsrs	r0, r7, #4
 80017aa:	f7ff ff9b 	bl	80016e4 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80017ae:	1d16      	adds	r6, r2, #4
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80017b0:	b2b6      	uxth	r6, r6
 80017b2:	441e      	add	r6, r3
 80017b4:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80017b8:	4638      	mov	r0, r7
 80017ba:	f7ff ff93 	bl	80016e4 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 80017be:	1d56      	adds	r6, r2, #5
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 80017c0:	b2b6      	uxth	r6, r6
 80017c2:	441e      	add	r6, r3
 80017c4:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
 80017c8:	1d90      	adds	r0, r2, #6
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80017ca:	b280      	uxth	r0, r0
 80017cc:	1de6      	adds	r6, r4, #7
 80017ce:	1b86      	subs	r6, r0, r6
 80017d0:	441e      	add	r6, r3
 80017d2:	3406      	adds	r4, #6
 80017d4:	f886 40ec 	strb.w	r4, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80017d8:	2437      	movs	r4, #55	; 0x37
 80017da:	4418      	add	r0, r3
 80017dc:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80017e0:	2406      	movs	r4, #6
	pDHCPMSG->OPT[k++] = subnetMask;
 80017e2:	2601      	movs	r6, #1
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80017e4:	1dd0      	adds	r0, r2, #7
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80017e6:	b280      	uxth	r0, r0
 80017e8:	4418      	add	r0, r3
 80017ea:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
 80017ee:	f102 0008 	add.w	r0, r2, #8
	pDHCPMSG->OPT[k++] = subnetMask;
 80017f2:	b280      	uxth	r0, r0
 80017f4:	4418      	add	r0, r3
 80017f6:	f880 60ec 	strb.w	r6, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80017fa:	2603      	movs	r6, #3
	pDHCPMSG->OPT[k++] = subnetMask;
 80017fc:	f102 0009 	add.w	r0, r2, #9
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001800:	b280      	uxth	r0, r0
 8001802:	4418      	add	r0, r3
 8001804:	f880 60ec 	strb.w	r6, [r0, #236]	; 0xec
 8001808:	f102 000a 	add.w	r0, r2, #10
	pDHCPMSG->OPT[k++] = dns;
 800180c:	b280      	uxth	r0, r0
 800180e:	4418      	add	r0, r3
 8001810:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001814:	240f      	movs	r4, #15
	pDHCPMSG->OPT[k++] = dns;
 8001816:	f102 000b 	add.w	r0, r2, #11
	pDHCPMSG->OPT[k++] = domainName;
 800181a:	b280      	uxth	r0, r0
 800181c:	4418      	add	r0, r3
 800181e:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001822:	243a      	movs	r4, #58	; 0x3a
	pDHCPMSG->OPT[k++] = domainName;
 8001824:	f102 000c 	add.w	r0, r2, #12
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001828:	b280      	uxth	r0, r0
 800182a:	4418      	add	r0, r3
 800182c:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001830:	243b      	movs	r4, #59	; 0x3b
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001832:	f102 000d 	add.w	r0, r2, #13
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001836:	b280      	uxth	r0, r0
 8001838:	4418      	add	r0, r3
 800183a:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800183e:	24ff      	movs	r4, #255	; 0xff
 8001840:	f102 000f 	add.w	r0, r2, #15
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001844:	f102 060e 	add.w	r6, r2, #14
	pDHCPMSG->OPT[k++] = endOption;
 8001848:	b280      	uxth	r0, r0
 800184a:	b2b6      	uxth	r6, r6
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800184c:	f5c2 7294 	rsb	r2, r2, #296	; 0x128
 8001850:	f5b0 7f9c 	cmp.w	r0, #312	; 0x138
	pDHCPMSG->OPT[k++] = endOption;
 8001854:	441e      	add	r6, r3
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001856:	f102 0201 	add.w	r2, r2, #1
 800185a:	f100 00ec 	add.w	r0, r0, #236	; 0xec
 800185e:	b292      	uxth	r2, r2
 8001860:	4418      	add	r0, r3
 8001862:	bf88      	it	hi
 8001864:	2200      	movhi	r2, #0
	pDHCPMSG->OPT[k++] = endOption;
 8001866:	f886 40ec 	strb.w	r4, [r6, #236]	; 0xec
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800186a:	f002 f93f 	bl	8003aec <memset>
	printf("> Send DHCP_DISCOVER\r\n");
 800186e:	4814      	ldr	r0, [pc, #80]	; (80018c0 <send_DHCP_DISCOVER+0x1cc>)
	ip[0] = 255;
 8001870:	f88d 400c 	strb.w	r4, [sp, #12]
	ip[1] = 255;
 8001874:	f88d 400d 	strb.w	r4, [sp, #13]
	ip[2] = 255;
 8001878:	f88d 400e 	strb.w	r4, [sp, #14]
	ip[3] = 255;
 800187c:	f88d 400f 	strb.w	r4, [sp, #15]
	printf("> Send DHCP_DISCOVER\r\n");
 8001880:	f002 f9c2 	bl	8003c08 <puts>
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001884:	2343      	movs	r3, #67	; 0x43
 8001886:	480f      	ldr	r0, [pc, #60]	; (80018c4 <send_DHCP_DISCOVER+0x1d0>)
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	f44f 7209 	mov.w	r2, #548	; 0x224
 800188e:	6829      	ldr	r1, [r5, #0]
 8001890:	ab03      	add	r3, sp, #12
 8001892:	7800      	ldrb	r0, [r0, #0]
 8001894:	f000 ff96 	bl	80027c4 <sendto>
}
 8001898:	b004      	add	sp, #16
 800189a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800189e:	4632      	mov	r2, r6
 80018a0:	f88a 10ec 	strb.w	r1, [sl, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80018a4:	e758      	b.n	8001758 <send_DHCP_DISCOVER+0x64>
 80018a6:	bf00      	nop
 80018a8:	2000050e 	.word	0x2000050e
 80018ac:	20000534 	.word	0x20000534
 80018b0:	2000050a 	.word	0x2000050a
 80018b4:	2000001c 	.word	0x2000001c
 80018b8:	3d010135 	.word	0x3d010135
 80018bc:	20000504 	.word	0x20000504
 80018c0:	080051f1 	.word	0x080051f1
 80018c4:	20000512 	.word	0x20000512

080018c8 <send_DHCP_REQUEST>:
{
 80018c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   makeDHCPMSG();
 80018cc:	f7ff fc34 	bl	8001138 <makeDHCPMSG>
   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80018d0:	4b92      	ldr	r3, [pc, #584]	; (8001b1c <send_DHCP_REQUEST+0x254>)
 80018d2:	4d93      	ldr	r5, [pc, #588]	; (8001b20 <send_DHCP_REQUEST+0x258>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	3b03      	subs	r3, #3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	f200 810f 	bhi.w	8001afc <send_DHCP_REQUEST+0x234>
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80018de:	2200      	movs	r2, #0
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	729a      	strb	r2, [r3, #10]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80018e4:	72da      	strb	r2, [r3, #11]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80018e6:	4a8f      	ldr	r2, [pc, #572]	; (8001b24 <send_DHCP_REQUEST+0x25c>)
 80018e8:	7811      	ldrb	r1, [r2, #0]
 80018ea:	7319      	strb	r1, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80018ec:	7851      	ldrb	r1, [r2, #1]
 80018ee:	7359      	strb	r1, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80018f0:	7891      	ldrb	r1, [r2, #2]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80018f2:	78d2      	ldrb	r2, [r2, #3]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80018f4:	7399      	strb	r1, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80018f6:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80018f8:	4b8b      	ldr	r3, [pc, #556]	; (8001b28 <send_DHCP_REQUEST+0x260>)
 80018fa:	781a      	ldrb	r2, [r3, #0]
 80018fc:	f88d 200c 	strb.w	r2, [sp, #12]
   	ip[1] = DHCP_SIP[1];
 8001900:	785a      	ldrb	r2, [r3, #1]
 8001902:	f88d 200d 	strb.w	r2, [sp, #13]
   	ip[2] = DHCP_SIP[2];
 8001906:	789a      	ldrb	r2, [r3, #2]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8001908:	78db      	ldrb	r3, [r3, #3]
   	ip[2] = DHCP_SIP[2];
 800190a:	f88d 200e 	strb.w	r2, [sp, #14]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800190e:	4a87      	ldr	r2, [pc, #540]	; (8001b2c <send_DHCP_REQUEST+0x264>)
   	ip[3] = 255;   	   	   	
 8001910:	f88d 300f 	strb.w	r3, [sp, #15]
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	pDHCPMSG->OPT[k++] = 0x07;
 800191a:	f240 1207 	movw	r2, #263	; 0x107
 800191e:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001922:	4a83      	ldr	r2, [pc, #524]	; (8001b30 <send_DHCP_REQUEST+0x268>)
 8001924:	7811      	ldrb	r1, [r2, #0]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001926:	f892 8003 	ldrb.w	r8, [r2, #3]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 800192a:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 800192e:	7851      	ldrb	r1, [r2, #1]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001930:	7917      	ldrb	r7, [r2, #4]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001932:	7956      	ldrb	r6, [r2, #5]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001934:	f883 10f7 	strb.w	r1, [r3, #247]	; 0xf7
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001938:	7891      	ldrb	r1, [r2, #2]
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 800193a:	f89d 200f 	ldrb.w	r2, [sp, #15]
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800193e:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001942:	2aff      	cmp	r2, #255	; 0xff
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001944:	f883 80f9 	strb.w	r8, [r3, #249]	; 0xf9
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001948:	f883 70fa 	strb.w	r7, [r3, #250]	; 0xfa
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800194c:	f883 60fb 	strb.w	r6, [r3, #251]	; 0xfb
   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001950:	f040 80dc 	bne.w	8001b0c <send_DHCP_REQUEST+0x244>
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001954:	f240 4232 	movw	r2, #1074	; 0x432
 8001958:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800195c:	4a71      	ldr	r2, [pc, #452]	; (8001b24 <send_DHCP_REQUEST+0x25c>)
 800195e:	7811      	ldrb	r1, [r2, #0]
 8001960:	f883 10fe 	strb.w	r1, [r3, #254]	; 0xfe
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001964:	7851      	ldrb	r1, [r2, #1]
 8001966:	f883 10ff 	strb.w	r1, [r3, #255]	; 0xff
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800196a:	7891      	ldrb	r1, [r2, #2]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 800196c:	78d2      	ldrb	r2, [r2, #3]
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800196e:	f883 1100 	strb.w	r1, [r3, #256]	; 0x100
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001972:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001976:	f240 4236 	movw	r2, #1078	; 0x436
 800197a:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 800197e:	4a6a      	ldr	r2, [pc, #424]	; (8001b28 <send_DHCP_REQUEST+0x260>)
 8001980:	7811      	ldrb	r1, [r2, #0]
 8001982:	f883 1104 	strb.w	r1, [r3, #260]	; 0x104
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001986:	7851      	ldrb	r1, [r2, #1]
 8001988:	f883 1105 	strb.w	r1, [r3, #261]	; 0x105
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 800198c:	7891      	ldrb	r1, [r2, #2]
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 800198e:	78d2      	ldrb	r2, [r2, #3]
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001990:	f883 1106 	strb.w	r1, [r3, #262]	; 0x106
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001994:	211c      	movs	r1, #28
 8001996:	f883 2107 	strb.w	r2, [r3, #263]	; 0x107
	pDHCPMSG->OPT[k++] = hostName;
 800199a:	200c      	movs	r0, #12
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800199c:	2400      	movs	r4, #0
	pDHCPMSG->OPT[k++] = hostName;
 800199e:	185a      	adds	r2, r3, r1
 80019a0:	f882 00ec 	strb.w	r0, [r2, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 80019a4:	1c8a      	adds	r2, r1, #2
 80019a6:	3101      	adds	r1, #1
 80019a8:	4419      	add	r1, r3
 80019aa:	4862      	ldr	r0, [pc, #392]	; (8001b34 <send_DHCP_REQUEST+0x26c>)
 80019ac:	f881 40ec 	strb.w	r4, [r1, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80019b0:	f810 1b01 	ldrb.w	r1, [r0], #1
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80019b4:	f102 0901 	add.w	r9, r2, #1
 80019b8:	fa1f f989 	uxth.w	r9, r9
 80019bc:	eb03 0a02 	add.w	sl, r3, r2
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80019c0:	2900      	cmp	r1, #0
 80019c2:	f040 80a5 	bne.w	8001b10 <send_DHCP_REQUEST+0x248>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80019c6:	ea4f 1018 	mov.w	r0, r8, lsr #4
 80019ca:	f7ff fe8b 	bl	80016e4 <NibbleToHex>
 80019ce:	f88a 00ec 	strb.w	r0, [sl, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80019d2:	4640      	mov	r0, r8
 80019d4:	f7ff fe86 	bl	80016e4 <NibbleToHex>
 80019d8:	4499      	add	r9, r3
 80019da:	f889 00ec 	strb.w	r0, [r9, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80019de:	0938      	lsrs	r0, r7, #4
 80019e0:	f7ff fe80 	bl	80016e4 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80019e4:	f102 0c02 	add.w	ip, r2, #2
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80019e8:	fa1f fc8c 	uxth.w	ip, ip
 80019ec:	449c      	add	ip, r3
 80019ee:	f88c 00ec 	strb.w	r0, [ip, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80019f2:	4638      	mov	r0, r7
 80019f4:	f7ff fe76 	bl	80016e4 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80019f8:	1cd7      	adds	r7, r2, #3
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 80019fa:	b2bf      	uxth	r7, r7
 80019fc:	441f      	add	r7, r3
 80019fe:	f887 00ec 	strb.w	r0, [r7, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001a02:	0930      	lsrs	r0, r6, #4
 8001a04:	f7ff fe6e 	bl	80016e4 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001a08:	1d17      	adds	r7, r2, #4
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001a0a:	b2bf      	uxth	r7, r7
 8001a0c:	441f      	add	r7, r3
 8001a0e:	f887 00ec 	strb.w	r0, [r7, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001a12:	4630      	mov	r0, r6
 8001a14:	f7ff fe66 	bl	80016e4 <NibbleToHex>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001a18:	1d56      	adds	r6, r2, #5
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001a1a:	b2b6      	uxth	r6, r6
 8001a1c:	441e      	add	r6, r3
 8001a1e:	f886 00ec 	strb.w	r0, [r6, #236]	; 0xec
 8001a22:	1d90      	adds	r0, r2, #6
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001a24:	b280      	uxth	r0, r0
 8001a26:	1de6      	adds	r6, r4, #7
 8001a28:	1b86      	subs	r6, r0, r6
 8001a2a:	441e      	add	r6, r3
 8001a2c:	3406      	adds	r4, #6
 8001a2e:	f886 40ec 	strb.w	r4, [r6, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001a32:	2437      	movs	r4, #55	; 0x37
 8001a34:	4418      	add	r0, r3
 8001a36:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001a3a:	2408      	movs	r4, #8
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001a3c:	1dd0      	adds	r0, r2, #7
	pDHCPMSG->OPT[k++] = 0x08;
 8001a3e:	b280      	uxth	r0, r0
 8001a40:	4418      	add	r0, r3
 8001a42:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
 8001a46:	1910      	adds	r0, r2, r4
	pDHCPMSG->OPT[k++] = subnetMask;
 8001a48:	2401      	movs	r4, #1
 8001a4a:	b280      	uxth	r0, r0
 8001a4c:	4418      	add	r0, r3
 8001a4e:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001a52:	2403      	movs	r4, #3
	pDHCPMSG->OPT[k++] = subnetMask;
 8001a54:	f102 0009 	add.w	r0, r2, #9
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001a58:	b280      	uxth	r0, r0
 8001a5a:	4418      	add	r0, r3
 8001a5c:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001a60:	2406      	movs	r4, #6
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001a62:	f102 000a 	add.w	r0, r2, #10
	pDHCPMSG->OPT[k++] = dns;
 8001a66:	b280      	uxth	r0, r0
 8001a68:	4418      	add	r0, r3
 8001a6a:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001a6e:	240f      	movs	r4, #15
	pDHCPMSG->OPT[k++] = dns;
 8001a70:	f102 000b 	add.w	r0, r2, #11
	pDHCPMSG->OPT[k++] = domainName;
 8001a74:	b280      	uxth	r0, r0
 8001a76:	4418      	add	r0, r3
 8001a78:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001a7c:	243a      	movs	r4, #58	; 0x3a
	pDHCPMSG->OPT[k++] = domainName;
 8001a7e:	f102 000c 	add.w	r0, r2, #12
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001a82:	b280      	uxth	r0, r0
 8001a84:	4418      	add	r0, r3
 8001a86:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001a8a:	243b      	movs	r4, #59	; 0x3b
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001a8c:	f102 000d 	add.w	r0, r2, #13
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001a90:	b280      	uxth	r0, r0
 8001a92:	4418      	add	r0, r3
 8001a94:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001a98:	241f      	movs	r4, #31
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001a9a:	f102 000e 	add.w	r0, r2, #14
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001a9e:	b280      	uxth	r0, r0
 8001aa0:	4418      	add	r0, r3
 8001aa2:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001aa6:	2421      	movs	r4, #33	; 0x21
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001aa8:	f102 000f 	add.w	r0, r2, #15
	pDHCPMSG->OPT[k++] = staticRoute;
 8001aac:	b280      	uxth	r0, r0
 8001aae:	4418      	add	r0, r3
 8001ab0:	f880 40ec 	strb.w	r4, [r0, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001ab4:	24ff      	movs	r4, #255	; 0xff
 8001ab6:	f102 0011 	add.w	r0, r2, #17
	pDHCPMSG->OPT[k++] = staticRoute;
 8001aba:	3210      	adds	r2, #16
	pDHCPMSG->OPT[k++] = endOption;
 8001abc:	b292      	uxth	r2, r2
 8001abe:	441a      	add	r2, r3
 8001ac0:	b280      	uxth	r0, r0
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001ac2:	f5b0 7f9c 	cmp.w	r0, #312	; 0x138
	pDHCPMSG->OPT[k++] = endOption;
 8001ac6:	f882 40ec 	strb.w	r4, [r2, #236]	; 0xec
	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001aca:	f5c0 729c 	rsb	r2, r0, #312	; 0x138
 8001ace:	f100 00ec 	add.w	r0, r0, #236	; 0xec
 8001ad2:	bf88      	it	hi
 8001ad4:	2200      	movhi	r2, #0
 8001ad6:	4418      	add	r0, r3
 8001ad8:	f002 f808 	bl	8003aec <memset>
	printf("> Send DHCP_REQUEST\r\n");
 8001adc:	4816      	ldr	r0, [pc, #88]	; (8001b38 <send_DHCP_REQUEST+0x270>)
 8001ade:	f002 f893 	bl	8003c08 <puts>
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001ae2:	2343      	movs	r3, #67	; 0x43
 8001ae4:	4815      	ldr	r0, [pc, #84]	; (8001b3c <send_DHCP_REQUEST+0x274>)
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	f44f 7209 	mov.w	r2, #548	; 0x224
 8001aec:	6829      	ldr	r1, [r5, #0]
 8001aee:	ab03      	add	r3, sp, #12
 8001af0:	7800      	ldrb	r0, [r0, #0]
 8001af2:	f000 fe67 	bl	80027c4 <sendto>
}
 8001af6:	b004      	add	sp, #16
 8001af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   	ip[0] = 255;
 8001afc:	23ff      	movs	r3, #255	; 0xff
 8001afe:	f88d 300c 	strb.w	r3, [sp, #12]
   	ip[1] = 255;
 8001b02:	f88d 300d 	strb.w	r3, [sp, #13]
   	ip[2] = 255;
 8001b06:	f88d 300e 	strb.w	r3, [sp, #14]
 8001b0a:	e700      	b.n	800190e <send_DHCP_REQUEST+0x46>
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	e744      	b.n	800199a <send_DHCP_REQUEST+0xd2>
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 8001b10:	464a      	mov	r2, r9
 8001b12:	f88a 10ec 	strb.w	r1, [sl, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8001b16:	3401      	adds	r4, #1
 8001b18:	e74a      	b.n	80019b0 <send_DHCP_REQUEST+0xe8>
 8001b1a:	bf00      	nop
 8001b1c:	2000052d 	.word	0x2000052d
 8001b20:	20000534 	.word	0x20000534
 8001b24:	20000520 	.word	0x20000520
 8001b28:	2000050e 	.word	0x2000050e
 8001b2c:	3d030135 	.word	0x3d030135
 8001b30:	20000504 	.word	0x20000504
 8001b34:	2000001c 	.word	0x2000001c
 8001b38:	08005207 	.word	0x08005207
 8001b3c:	20000512 	.word	0x20000512

08001b40 <check_DHCP_timeout>:
{
 8001b40:	b570      	push	{r4, r5, r6, lr}
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 8001b42:	4c1b      	ldr	r4, [pc, #108]	; (8001bb0 <check_DHCP_timeout+0x70>)
 8001b44:	f994 3000 	ldrsb.w	r3, [r4]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	dc1d      	bgt.n	8001b88 <check_DHCP_timeout+0x48>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8001b4c:	4d19      	ldr	r5, [pc, #100]	; (8001bb4 <check_DHCP_timeout+0x74>)
 8001b4e:	4e1a      	ldr	r6, [pc, #104]	; (8001bb8 <check_DHCP_timeout+0x78>)
 8001b50:	682b      	ldr	r3, [r5, #0]
 8001b52:	6832      	ldr	r2, [r6, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d212      	bcs.n	8001b7e <check_DHCP_timeout+0x3e>
			switch ( dhcp_state ) {
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <check_DHCP_timeout+0x7c>)
 8001b5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d00f      	beq.n	8001b82 <check_DHCP_timeout+0x42>
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d00d      	beq.n	8001b82 <check_DHCP_timeout+0x42>
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <check_DHCP_timeout+0x2e>
					send_DHCP_DISCOVER();
 8001b6a:	f7ff fdc3 	bl	80016f4 <send_DHCP_DISCOVER>
			dhcp_tick_1s = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	602b      	str	r3, [r5, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8001b72:	682b      	ldr	r3, [r5, #0]
 8001b74:	330a      	adds	r3, #10
 8001b76:	6033      	str	r3, [r6, #0]
			dhcp_retry_count++;
 8001b78:	7823      	ldrb	r3, [r4, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	7023      	strb	r3, [r4, #0]
	uint8_t ret = DHCP_RUNNING;
 8001b7e:	2001      	movs	r0, #1
 8001b80:	e00f      	b.n	8001ba2 <check_DHCP_timeout+0x62>
					send_DHCP_REQUEST();
 8001b82:	f7ff fea1 	bl	80018c8 <send_DHCP_REQUEST>
				break;
 8001b86:	e7f2      	b.n	8001b6e <check_DHCP_timeout+0x2e>
		switch(dhcp_state) {
 8001b88:	4c0c      	ldr	r4, [pc, #48]	; (8001bbc <check_DHCP_timeout+0x7c>)
 8001b8a:	f994 3000 	ldrsb.w	r3, [r4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d008      	beq.n	8001ba4 <check_DHCP_timeout+0x64>
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d006      	beq.n	8001ba4 <check_DHCP_timeout+0x64>
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d108      	bne.n	8001bac <check_DHCP_timeout+0x6c>
				dhcp_state = STATE_DHCP_INIT;
 8001b9a:	2000      	movs	r0, #0
				dhcp_state = STATE_DHCP_DISCOVER;
 8001b9c:	7020      	strb	r0, [r4, #0]
		reset_DHCP_timeout();
 8001b9e:	f7ff fcfb 	bl	8001598 <reset_DHCP_timeout>
}
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
				send_DHCP_DISCOVER();
 8001ba4:	f7ff fda6 	bl	80016f4 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001ba8:	2001      	movs	r0, #1
 8001baa:	e7f7      	b.n	8001b9c <check_DHCP_timeout+0x5c>
		switch(dhcp_state) {
 8001bac:	2001      	movs	r0, #1
 8001bae:	e7f6      	b.n	8001b9e <check_DHCP_timeout+0x5e>
 8001bb0:	2000052c 	.word	0x2000052c
 8001bb4:	20000530 	.word	0x20000530
 8001bb8:	20000034 	.word	0x20000034
 8001bbc:	2000052d 	.word	0x2000052d

08001bc0 <DHCP_run>:
{
 8001bc0:	b538      	push	{r3, r4, r5, lr}
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8001bc2:	4c5c      	ldr	r4, [pc, #368]	; (8001d34 <DHCP_run+0x174>)
 8001bc4:	f994 3000 	ldrsb.w	r3, [r4]
 8001bc8:	2b06      	cmp	r3, #6
 8001bca:	f000 80b1 	beq.w	8001d30 <DHCP_run+0x170>
	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 8001bce:	4d5a      	ldr	r5, [pc, #360]	; (8001d38 <DHCP_run+0x178>)
 8001bd0:	7828      	ldrb	r0, [r5, #0]
 8001bd2:	0140      	lsls	r0, r0, #5
 8001bd4:	f500 7042 	add.w	r0, r0, #776	; 0x308
 8001bd8:	f7ff f818 	bl	8000c0c <WIZCHIP_READ>
 8001bdc:	2822      	cmp	r0, #34	; 0x22
 8001bde:	d005      	beq.n	8001bec <DHCP_run+0x2c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 8001be0:	2300      	movs	r3, #0
 8001be2:	2244      	movs	r2, #68	; 0x44
 8001be4:	2102      	movs	r1, #2
 8001be6:	7828      	ldrb	r0, [r5, #0]
 8001be8:	f000 fd5a 	bl	80026a0 <socket>
	type = parseDHCPMSG();
 8001bec:	f7ff fb64 	bl	80012b8 <parseDHCPMSG>
	switch ( dhcp_state ) {
 8001bf0:	f994 3000 	ldrsb.w	r3, [r4]
	type = parseDHCPMSG();
 8001bf4:	b2c5      	uxtb	r5, r0
	switch ( dhcp_state ) {
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d837      	bhi.n	8001c6a <DHCP_run+0xaa>
 8001bfa:	e8df f003 	tbb	[pc, r3]
 8001bfe:	0e03      	.short	0x0e03
 8001c00:	4626      	.short	0x4626
 8001c02:	66          	.byte	0x66
 8001c03:	00          	.byte	0x00
         DHCP_allocated_ip[0] = 0;
 8001c04:	2200      	movs	r2, #0
 8001c06:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <DHCP_run+0x17c>)
 8001c08:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8001c0a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 8001c0c:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8001c0e:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8001c10:	f7ff fd70 	bl	80016f4 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001c14:	2001      	movs	r0, #1
				dhcp_state = STATE_DHCP_REREQUEST;
 8001c16:	7020      	strb	r0, [r4, #0]
}
 8001c18:	bd38      	pop	{r3, r4, r5, pc}
			if (type == DHCP_OFFER){
 8001c1a:	2d02      	cmp	r5, #2
 8001c1c:	d111      	bne.n	8001c42 <DHCP_run+0x82>
				printf("> Receive DHCP_OFFER\r\n");
 8001c1e:	4848      	ldr	r0, [pc, #288]	; (8001d40 <DHCP_run+0x180>)
 8001c20:	f001 fff2 	bl	8003c08 <puts>
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 8001c24:	4b47      	ldr	r3, [pc, #284]	; (8001d44 <DHCP_run+0x184>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b44      	ldr	r3, [pc, #272]	; (8001d3c <DHCP_run+0x17c>)
 8001c2a:	7c11      	ldrb	r1, [r2, #16]
 8001c2c:	7019      	strb	r1, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8001c2e:	7c51      	ldrb	r1, [r2, #17]
 8001c30:	7059      	strb	r1, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8001c32:	7c91      	ldrb	r1, [r2, #18]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8001c34:	7cd2      	ldrb	r2, [r2, #19]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 8001c36:	7099      	strb	r1, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8001c38:	70da      	strb	r2, [r3, #3]
				send_DHCP_REQUEST();
 8001c3a:	f7ff fe45 	bl	80018c8 <send_DHCP_REQUEST>
				    dhcp_state = STATE_DHCP_INIT;
 8001c3e:	7025      	strb	r5, [r4, #0]
 8001c40:	e013      	b.n	8001c6a <DHCP_run+0xaa>
}
 8001c42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			} else ret = check_DHCP_timeout();
 8001c46:	f7ff bf7b 	b.w	8001b40 <check_DHCP_timeout>
			if (type == DHCP_ACK) {
 8001c4a:	2d05      	cmp	r5, #5
 8001c4c:	d115      	bne.n	8001c7a <DHCP_run+0xba>
				printf("> Receive DHCP_ACK\r\n");
 8001c4e:	483e      	ldr	r0, [pc, #248]	; (8001d48 <DHCP_run+0x188>)
 8001c50:	f001 ffda 	bl	8003c08 <puts>
				if (check_DHCP_leasedIP()) {
 8001c54:	f7ff fc68 	bl	8001528 <check_DHCP_leasedIP>
 8001c58:	4605      	mov	r5, r0
 8001c5a:	b140      	cbz	r0, 8001c6e <DHCP_run+0xae>
					dhcp_ip_assign();
 8001c5c:	4b3b      	ldr	r3, [pc, #236]	; (8001d4c <DHCP_run+0x18c>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4798      	blx	r3
					reset_DHCP_timeout();
 8001c62:	f7ff fc99 	bl	8001598 <reset_DHCP_timeout>
					dhcp_state = STATE_DHCP_LEASED;
 8001c66:	2303      	movs	r3, #3
 8001c68:	7023      	strb	r3, [r4, #0]
	switch ( dhcp_state ) {
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	e7d4      	b.n	8001c18 <DHCP_run+0x58>
					reset_DHCP_timeout();
 8001c6e:	f7ff fc93 	bl	8001598 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <DHCP_run+0x190>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4798      	blx	r3
 8001c78:	e7e1      	b.n	8001c3e <DHCP_run+0x7e>
			} else if (type == DHCP_NAK) {
 8001c7a:	2d06      	cmp	r5, #6
 8001c7c:	d1e1      	bne.n	8001c42 <DHCP_run+0x82>
				printf("> Receive DHCP_NACK\r\n");
 8001c7e:	4835      	ldr	r0, [pc, #212]	; (8001d54 <DHCP_run+0x194>)
 8001c80:	f001 ffc2 	bl	8003c08 <puts>
				reset_DHCP_timeout();
 8001c84:	f7ff fc88 	bl	8001598 <reset_DHCP_timeout>
 8001c88:	e7c4      	b.n	8001c14 <DHCP_run+0x54>
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 8001c8a:	4b33      	ldr	r3, [pc, #204]	; (8001d58 <DHCP_run+0x198>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	d04c      	beq.n	8001d2c <DHCP_run+0x16c>
 8001c92:	4a32      	ldr	r2, [pc, #200]	; (8001d5c <DHCP_run+0x19c>)
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
 8001c9a:	d947      	bls.n	8001d2c <DHCP_run+0x16c>
 				printf("> Maintains the IP address \r\n");
 8001c9c:	4830      	ldr	r0, [pc, #192]	; (8001d60 <DHCP_run+0x1a0>)
 8001c9e:	f001 ffb3 	bl	8003c08 <puts>
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8001ca2:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <DHCP_run+0x17c>)
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <DHCP_run+0x1a4>)
 8001ca6:	7811      	ldrb	r1, [r2, #0]
 8001ca8:	7019      	strb	r1, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8001caa:	7851      	ldrb	r1, [r2, #1]
 8001cac:	7059      	strb	r1, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8001cae:	7891      	ldrb	r1, [r2, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8001cb0:	78d2      	ldrb	r2, [r2, #3]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8001cb2:	7099      	strb	r1, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8001cb4:	70da      	strb	r2, [r3, #3]
				DHCP_XID++;
 8001cb6:	4a2c      	ldr	r2, [pc, #176]	; (8001d68 <DHCP_run+0x1a8>)
 8001cb8:	6813      	ldr	r3, [r2, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	6013      	str	r3, [r2, #0]
				send_DHCP_REQUEST();
 8001cbe:	f7ff fe03 	bl	80018c8 <send_DHCP_REQUEST>
				reset_DHCP_timeout();
 8001cc2:	f7ff fc69 	bl	8001598 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_REREQUEST;
 8001cc6:	2004      	movs	r0, #4
 8001cc8:	e7a5      	b.n	8001c16 <DHCP_run+0x56>
			if (type == DHCP_ACK) {
 8001cca:	2d05      	cmp	r5, #5
 8001ccc:	d125      	bne.n	8001d1a <DHCP_run+0x15a>
				dhcp_retry_count = 0;
 8001cce:	2200      	movs	r2, #0
 8001cd0:	4b26      	ldr	r3, [pc, #152]	; (8001d6c <DHCP_run+0x1ac>)
 8001cd2:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8001cd4:	4a23      	ldr	r2, [pc, #140]	; (8001d64 <DHCP_run+0x1a4>)
 8001cd6:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <DHCP_run+0x17c>)
 8001cd8:	7810      	ldrb	r0, [r2, #0]
 8001cda:	7819      	ldrb	r1, [r3, #0]
 8001cdc:	4288      	cmp	r0, r1
 8001cde:	d10b      	bne.n	8001cf8 <DHCP_run+0x138>
 8001ce0:	7850      	ldrb	r0, [r2, #1]
 8001ce2:	7859      	ldrb	r1, [r3, #1]
 8001ce4:	4288      	cmp	r0, r1
 8001ce6:	d107      	bne.n	8001cf8 <DHCP_run+0x138>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8001ce8:	7890      	ldrb	r0, [r2, #2]
 8001cea:	7899      	ldrb	r1, [r3, #2]
 8001cec:	4288      	cmp	r0, r1
 8001cee:	d103      	bne.n	8001cf8 <DHCP_run+0x138>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 8001cf0:	78d2      	ldrb	r2, [r2, #3]
 8001cf2:	78db      	ldrb	r3, [r3, #3]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d00b      	beq.n	8001d10 <DHCP_run+0x150>
					dhcp_ip_update();
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <DHCP_run+0x1b0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4798      	blx	r3
                  printf(">IP changed.\r\n");
 8001cfe:	481d      	ldr	r0, [pc, #116]	; (8001d74 <DHCP_run+0x1b4>)
 8001d00:	f001 ff82 	bl	8003c08 <puts>
					ret = DHCP_IP_CHANGED;
 8001d04:	2003      	movs	r0, #3
				reset_DHCP_timeout();
 8001d06:	f7ff fc47 	bl	8001598 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	7023      	strb	r3, [r4, #0]
 8001d0e:	e783      	b.n	8001c18 <DHCP_run+0x58>
            else printf(">IP is continued.\r\n");
 8001d10:	4819      	ldr	r0, [pc, #100]	; (8001d78 <DHCP_run+0x1b8>)
 8001d12:	f001 ff79 	bl	8003c08 <puts>
		   ret = DHCP_IP_LEASED;
 8001d16:	2004      	movs	r0, #4
 8001d18:	e7f5      	b.n	8001d06 <DHCP_run+0x146>
			} else if (type == DHCP_NAK) {
 8001d1a:	2d06      	cmp	r5, #6
 8001d1c:	d191      	bne.n	8001c42 <DHCP_run+0x82>
				printf("> Receive DHCP_NACK, Failed to maintain ip\r\n");
 8001d1e:	4817      	ldr	r0, [pc, #92]	; (8001d7c <DHCP_run+0x1bc>)
 8001d20:	f001 ff72 	bl	8003c08 <puts>
				reset_DHCP_timeout();
 8001d24:	f7ff fc38 	bl	8001598 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	7023      	strb	r3, [r4, #0]
		   ret = DHCP_IP_LEASED;
 8001d2c:	2004      	movs	r0, #4
 8001d2e:	e773      	b.n	8001c18 <DHCP_run+0x58>
	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 8001d30:	2005      	movs	r0, #5
 8001d32:	e771      	b.n	8001c18 <DHCP_run+0x58>
 8001d34:	2000052d 	.word	0x2000052d
 8001d38:	20000512 	.word	0x20000512
 8001d3c:	20000520 	.word	0x20000520
 8001d40:	0800521c 	.word	0x0800521c
 8001d44:	20000534 	.word	0x20000534
 8001d48:	08005232 	.word	0x08005232
 8001d4c:	20000024 	.word	0x20000024
 8001d50:	20000028 	.word	0x20000028
 8001d54:	08005246 	.word	0x08005246
 8001d58:	20000030 	.word	0x20000030
 8001d5c:	20000530 	.word	0x20000530
 8001d60:	0800525b 	.word	0x0800525b
 8001d64:	20000528 	.word	0x20000528
 8001d68:	20000514 	.word	0x20000514
 8001d6c:	2000052c 	.word	0x2000052c
 8001d70:	2000002c 	.word	0x2000002c
 8001d74:	08005278 	.word	0x08005278
 8001d78:	08005286 	.word	0x08005286
 8001d7c:	08005299 	.word	0x08005299

08001d80 <parse_name>:
 *               buf        - is a pointer to the buffer for the human-readable form name.
 *               len        - is the MAX. size of buffer.
 * Returns     : the length of compressed message
 */
int parse_name(uint8_t * msg, uint8_t * compressed, char * buf, int16_t len)
{
 8001d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t slen;		/* Length of current segment */
	uint8_t * cp;
	int clen = 0;		/* Total length of compressed name */
	int indirect = 0;	/* Set if indirection encountered */
	int nseg = 0;		/* Total number of segments in name */
 8001d84:	2600      	movs	r6, #0
{
 8001d86:	4605      	mov	r5, r0
	int indirect = 0;	/* Set if indirection encountered */
 8001d88:	46b0      	mov	r8, r6
	int clen = 0;		/* Total length of compressed name */
 8001d8a:	4630      	mov	r0, r6

		if (len < 0) return -1;

		if (!indirect) clen += slen;

		while (slen-- != 0) *buf++ = (char)*cp++;
 8001d8c:	f64f 7cff 	movw	ip, #65535	; 0xffff
		*buf++ = '.';
 8001d90:	272e      	movs	r7, #46	; 0x2e
		slen = *cp++;	/* Length of this segment */
 8001d92:	780c      	ldrb	r4, [r1, #0]
		if (!indirect) clen++;
 8001d94:	f1b8 0f00 	cmp.w	r8, #0
 8001d98:	d100      	bne.n	8001d9c <parse_name+0x1c>
 8001d9a:	3001      	adds	r0, #1
		if ((slen & 0xc0) == 0xc0)
 8001d9c:	f004 0ec0 	and.w	lr, r4, #192	; 0xc0
 8001da0:	f1be 0fc0 	cmp.w	lr, #192	; 0xc0
 8001da4:	d011      	beq.n	8001dca <parse_name+0x4a>
		slen = *cp++;	/* Length of this segment */
 8001da6:	3101      	adds	r1, #1
 8001da8:	b2a4      	uxth	r4, r4
		if (slen == 0)	/* zero length == all done */
 8001daa:	b384      	cbz	r4, 8001e0e <parse_name+0x8e>
		len -= slen + 1;
 8001dac:	3b01      	subs	r3, #1
 8001dae:	1b1b      	subs	r3, r3, r4
 8001db0:	b21b      	sxth	r3, r3
		if (len < 0) return -1;
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	db33      	blt.n	8001e1e <parse_name+0x9e>
		if (!indirect) clen += slen;
 8001db6:	f1b8 0f00 	cmp.w	r8, #0
 8001dba:	d100      	bne.n	8001dbe <parse_name+0x3e>
 8001dbc:	4420      	add	r0, r4
			indirect = 1;
 8001dbe:	46a6      	mov	lr, r4
 8001dc0:	f101 39ff 	add.w	r9, r1, #4294967295
 8001dc4:	f102 3aff 	add.w	sl, r2, #4294967295
 8001dc8:	e012      	b.n	8001df0 <parse_name+0x70>
			if (!indirect)
 8001dca:	f1b8 0f00 	cmp.w	r8, #0
 8001dce:	d100      	bne.n	8001dd2 <parse_name+0x52>
				clen++;
 8001dd0:	3001      	adds	r0, #1
			cp = &msg[((slen & 0x3f)<<8) + *cp];
 8001dd2:	7849      	ldrb	r1, [r1, #1]
 8001dd4:	0224      	lsls	r4, r4, #8
 8001dd6:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
 8001dda:	440c      	add	r4, r1
 8001ddc:	1929      	adds	r1, r5, r4
			indirect = 1;
 8001dde:	f04f 0801 	mov.w	r8, #1
			slen = *cp++;
 8001de2:	5d2c      	ldrb	r4, [r5, r4]
 8001de4:	3101      	adds	r1, #1
 8001de6:	e7e0      	b.n	8001daa <parse_name+0x2a>
		while (slen-- != 0) *buf++ = (char)*cp++;
 8001de8:	f819 bf01 	ldrb.w	fp, [r9, #1]!
 8001dec:	f80a bf01 	strb.w	fp, [sl, #1]!
 8001df0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8001df4:	fa1f fe8e 	uxth.w	lr, lr
 8001df8:	45e6      	cmp	lr, ip
 8001dfa:	d1f5      	bne.n	8001de8 <parse_name+0x68>
 8001dfc:	eb02 0e04 	add.w	lr, r2, r4
 8001e00:	4421      	add	r1, r4
 8001e02:	3401      	adds	r4, #1
 8001e04:	4422      	add	r2, r4
		*buf++ = '.';
 8001e06:	f88e 7000 	strb.w	r7, [lr]
		nseg++;
 8001e0a:	3601      	adds	r6, #1
		slen = *cp++;	/* Length of this segment */
 8001e0c:	e7c1      	b.n	8001d92 <parse_name+0x12>
	}

	if (nseg == 0)
 8001e0e:	b916      	cbnz	r6, 8001e16 <parse_name+0x96>
	{
		/* Root name; represent as single dot */
		*buf++ = '.';
 8001e10:	232e      	movs	r3, #46	; 0x2e
 8001e12:	f802 3b01 	strb.w	r3, [r2], #1
		len--;
	}

	*buf++ = '\0';
 8001e16:	2300      	movs	r3, #0
 8001e18:	7013      	strb	r3, [r2, #0]
	len--;

	return clen;	/* Length of compressed message */
}
 8001e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (len < 0) return -1;
 8001e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e22:	e7fa      	b.n	8001e1a <parse_name+0x9a>

08001e24 <dns_question>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the qeustion record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_question(uint8_t * msg, uint8_t * cp)
{
 8001e24:	b510      	push	{r4, lr}
 8001e26:	b0b0      	sub	sp, #192	; 0xc0
	int len;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8001e28:	23c0      	movs	r3, #192	; 0xc0
 8001e2a:	466a      	mov	r2, sp
{
 8001e2c:	460c      	mov	r4, r1
	len = parse_name(msg, cp, name, MAXCNAME);
 8001e2e:	f7ff ffa7 	bl	8001d80 <parse_name>


	if (len == -1) return 0;
 8001e32:	1c43      	adds	r3, r0, #1
 8001e34:	bf0e      	itee	eq
 8001e36:	2000      	moveq	r0, #0

	cp += len;
 8001e38:	1900      	addne	r0, r0, r4
	cp += 2;		/* type */
	cp += 2;		/* class */
 8001e3a:	3004      	addne	r0, #4

	return cp;
}
 8001e3c:	b030      	add	sp, #192	; 0xc0
 8001e3e:	bd10      	pop	{r4, pc}

08001e40 <dns_answer>:
 * Arguments   : msg - is a pointer to the reply message
 *               cp  - is a pointer to the answer record.
 * Returns     : a pointer the to next record.
 */
uint8_t * dns_answer(uint8_t * msg, uint8_t * cp, uint8_t * ip_from_dns)
{
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	b0b0      	sub	sp, #192	; 0xc0
	int len, type;
	char name[MAXCNAME];

	len = parse_name(msg, cp, name, MAXCNAME);
 8001e44:	23c0      	movs	r3, #192	; 0xc0
{
 8001e46:	4615      	mov	r5, r2
	len = parse_name(msg, cp, name, MAXCNAME);
 8001e48:	466a      	mov	r2, sp
{
 8001e4a:	4606      	mov	r6, r0
 8001e4c:	460c      	mov	r4, r1
	len = parse_name(msg, cp, name, MAXCNAME);
 8001e4e:	f7ff ff97 	bl	8001d80 <parse_name>

	if (len == -1) return 0;
 8001e52:	1c43      	adds	r3, r0, #1
 8001e54:	d103      	bne.n	8001e5e <dns_answer+0x1e>
 8001e56:	2400      	movs	r4, #0
		/* Ignore */
		break;
	}

	return cp;
}
 8001e58:	4620      	mov	r0, r4
 8001e5a:	b030      	add	sp, #192	; 0xc0
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
	cp += len;
 8001e5e:	1823      	adds	r3, r4, r0
	i = *s++ << 8;
 8001e60:	5c22      	ldrb	r2, [r4, r0]
	i = i + *s;
 8001e62:	7859      	ldrb	r1, [r3, #1]
	cp += 2;		/* len */
 8001e64:	f103 040a 	add.w	r4, r3, #10
	i = i + *s;
 8001e68:	eb01 2102 	add.w	r1, r1, r2, lsl #8
	switch (type)
 8001e6c:	b289      	uxth	r1, r1
 8001e6e:	3901      	subs	r1, #1
 8001e70:	290e      	cmp	r1, #14
 8001e72:	d8f1      	bhi.n	8001e58 <dns_answer+0x18>
 8001e74:	a201      	add	r2, pc, #4	; (adr r2, 8001e7c <dns_answer+0x3c>)
 8001e76:	f852 f021 	ldr.w	pc, [r2, r1, lsl #2]
 8001e7a:	bf00      	nop
 8001e7c:	08001eb9 	.word	0x08001eb9
 8001e80:	08001ee3 	.word	0x08001ee3
 8001e84:	08001e59 	.word	0x08001e59
 8001e88:	08001e59 	.word	0x08001e59
 8001e8c:	08001ee3 	.word	0x08001ee3
 8001e90:	08001ef7 	.word	0x08001ef7
 8001e94:	08001ee3 	.word	0x08001ee3
 8001e98:	08001ee3 	.word	0x08001ee3
 8001e9c:	08001ee3 	.word	0x08001ee3
 8001ea0:	08001e59 	.word	0x08001e59
 8001ea4:	08001e59 	.word	0x08001e59
 8001ea8:	08001ee3 	.word	0x08001ee3
 8001eac:	08001ecf 	.word	0x08001ecf
 8001eb0:	08001e59 	.word	0x08001e59
 8001eb4:	08001edf 	.word	0x08001edf
		ip_from_dns[0] = *cp++;
 8001eb8:	7a9a      	ldrb	r2, [r3, #10]
		ip_from_dns[3] = *cp++;
 8001eba:	f103 040e 	add.w	r4, r3, #14
		ip_from_dns[0] = *cp++;
 8001ebe:	702a      	strb	r2, [r5, #0]
		ip_from_dns[1] = *cp++;
 8001ec0:	7ada      	ldrb	r2, [r3, #11]
 8001ec2:	706a      	strb	r2, [r5, #1]
		ip_from_dns[2] = *cp++;
 8001ec4:	7b1a      	ldrb	r2, [r3, #12]
 8001ec6:	70aa      	strb	r2, [r5, #2]
		ip_from_dns[3] = *cp++;
 8001ec8:	7b5b      	ldrb	r3, [r3, #13]
 8001eca:	70eb      	strb	r3, [r5, #3]
		break;
 8001ecc:	e7c4      	b.n	8001e58 <dns_answer+0x18>
		len = *cp++;
 8001ece:	f103 020b 	add.w	r2, r3, #11
		cp += len;
 8001ed2:	7a9b      	ldrb	r3, [r3, #10]
		cp += len;
 8001ed4:	5cd1      	ldrb	r1, [r2, r3]
		cp += len;
 8001ed6:	18d4      	adds	r4, r2, r3
		cp += len;
 8001ed8:	3101      	adds	r1, #1
 8001eda:	440c      	add	r4, r1
		break;
 8001edc:	e7bc      	b.n	8001e58 <dns_answer+0x18>
		cp += 2;
 8001ede:	f103 040c 	add.w	r4, r3, #12
		len = parse_name(msg, cp, name, MAXCNAME);
 8001ee2:	4621      	mov	r1, r4
 8001ee4:	23c0      	movs	r3, #192	; 0xc0
 8001ee6:	466a      	mov	r2, sp
 8001ee8:	4630      	mov	r0, r6
 8001eea:	f7ff ff49 	bl	8001d80 <parse_name>
		if (len == -1) return 0;
 8001eee:	1c41      	adds	r1, r0, #1
 8001ef0:	d0b1      	beq.n	8001e56 <dns_answer+0x16>
		cp += len;
 8001ef2:	4404      	add	r4, r0
		break;
 8001ef4:	e7b0      	b.n	8001e58 <dns_answer+0x18>
		len = parse_name(msg, cp, name, MAXCNAME);
 8001ef6:	466a      	mov	r2, sp
 8001ef8:	23c0      	movs	r3, #192	; 0xc0
 8001efa:	4621      	mov	r1, r4
 8001efc:	4630      	mov	r0, r6
 8001efe:	f7ff ff3f 	bl	8001d80 <parse_name>
		if (len == -1) return 0;
 8001f02:	1c42      	adds	r2, r0, #1
 8001f04:	d0a7      	beq.n	8001e56 <dns_answer+0x16>
		cp += len;
 8001f06:	4404      	add	r4, r0
		len = parse_name(msg, cp, name, MAXCNAME);
 8001f08:	23c0      	movs	r3, #192	; 0xc0
 8001f0a:	466a      	mov	r2, sp
 8001f0c:	4621      	mov	r1, r4
 8001f0e:	4630      	mov	r0, r6
 8001f10:	f7ff ff36 	bl	8001d80 <parse_name>
		if (len == -1) return 0;
 8001f14:	1c43      	adds	r3, r0, #1
 8001f16:	d09e      	beq.n	8001e56 <dns_answer+0x16>
		cp += len;
 8001f18:	4404      	add	r4, r0
		cp += 4;
 8001f1a:	3414      	adds	r4, #20
		break;
 8001f1c:	e79c      	b.n	8001e58 <dns_answer+0x18>
 8001f1e:	bf00      	nop

08001f20 <parseDNSMSG>:
 * Returns     : -1 - Domain name lenght is too big
 *                0 - Fail (Timout or parse error)
 *                1 - Success,
 */
int8_t parseDNSMSG(struct dhdr * pdhdr, uint8_t * pbuf, uint8_t * ip_from_dns)
{
 8001f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f22:	460d      	mov	r5, r1
 8001f24:	4604      	mov	r4, r0
	uint16_t i;
	uint8_t * msg;
	uint8_t * cp;

	msg = pbuf;
	memset(pdhdr, 0, sizeof(*pdhdr));
 8001f26:	2100      	movs	r1, #0
{
 8001f28:	4616      	mov	r6, r2
	memset(pdhdr, 0, sizeof(*pdhdr));
 8001f2a:	2212      	movs	r2, #18
 8001f2c:	f001 fdde 	bl	8003aec <memset>
	i = *s++ << 8;
 8001f30:	782a      	ldrb	r2, [r5, #0]
	i = i + *s;
 8001f32:	786b      	ldrb	r3, [r5, #1]
 8001f34:	eb03 2302 	add.w	r3, r3, r2, lsl #8

	pdhdr->id = get16(&msg[0]);
 8001f38:	8023      	strh	r3, [r4, #0]
	i = *s++ << 8;
 8001f3a:	78ab      	ldrb	r3, [r5, #2]
	i = i + *s;
 8001f3c:	78ea      	ldrb	r2, [r5, #3]
 8001f3e:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8001f42:	b293      	uxth	r3, r2
	tmp = get16(&msg[2]);
	if (tmp & 0x8000) pdhdr->qr = 1;
 8001f44:	0412      	lsls	r2, r2, #16
 8001f46:	bf44      	itt	mi
 8001f48:	2201      	movmi	r2, #1
 8001f4a:	70a2      	strbmi	r2, [r4, #2]

	pdhdr->opcode = (tmp >> 11) & 0xf;
 8001f4c:	f3c3 22c3 	ubfx	r2, r3, #11, #4

	if (tmp & 0x0400) pdhdr->aa = 1;
 8001f50:	055f      	lsls	r7, r3, #21
	pdhdr->opcode = (tmp >> 11) & 0xf;
 8001f52:	70e2      	strb	r2, [r4, #3]
	if (tmp & 0x0400) pdhdr->aa = 1;
 8001f54:	bf44      	itt	mi
 8001f56:	2201      	movmi	r2, #1
 8001f58:	7122      	strbmi	r2, [r4, #4]
	if (tmp & 0x0200) pdhdr->tc = 1;
 8001f5a:	0598      	lsls	r0, r3, #22
 8001f5c:	bf44      	itt	mi
 8001f5e:	2201      	movmi	r2, #1
 8001f60:	7162      	strbmi	r2, [r4, #5]
	if (tmp & 0x0100) pdhdr->rd = 1;
 8001f62:	05d9      	lsls	r1, r3, #23
 8001f64:	bf44      	itt	mi
 8001f66:	2201      	movmi	r2, #1
 8001f68:	71a2      	strbmi	r2, [r4, #6]
	if (tmp & 0x0080) pdhdr->ra = 1;
 8001f6a:	061a      	lsls	r2, r3, #24
 8001f6c:	bf48      	it	mi
 8001f6e:	2201      	movmi	r2, #1

	/* Now parse the variable length sections */
	cp = &msg[12];

	/* Question section */
	for (i = 0; i < pdhdr->qdcount; i++)
 8001f70:	f04f 0700 	mov.w	r7, #0
	pdhdr->rcode = tmp & 0xf;
 8001f74:	f003 030f 	and.w	r3, r3, #15
	if (tmp & 0x0080) pdhdr->ra = 1;
 8001f78:	bf48      	it	mi
 8001f7a:	71e2      	strbmi	r2, [r4, #7]
	pdhdr->rcode = tmp & 0xf;
 8001f7c:	7223      	strb	r3, [r4, #8]
	i = *s++ << 8;
 8001f7e:	792a      	ldrb	r2, [r5, #4]
	i = i + *s;
 8001f80:	796b      	ldrb	r3, [r5, #5]
	cp = &msg[12];
 8001f82:	f105 010c 	add.w	r1, r5, #12
	i = i + *s;
 8001f86:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	pdhdr->qdcount = get16(&msg[4]);
 8001f8a:	8163      	strh	r3, [r4, #10]
	i = *s++ << 8;
 8001f8c:	79aa      	ldrb	r2, [r5, #6]
	i = i + *s;
 8001f8e:	79eb      	ldrb	r3, [r5, #7]
 8001f90:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	pdhdr->ancount = get16(&msg[6]);
 8001f94:	81a3      	strh	r3, [r4, #12]
	i = *s++ << 8;
 8001f96:	7a2a      	ldrb	r2, [r5, #8]
	i = i + *s;
 8001f98:	7a6b      	ldrb	r3, [r5, #9]
 8001f9a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	pdhdr->nscount = get16(&msg[8]);
 8001f9e:	81e3      	strh	r3, [r4, #14]
	i = *s++ << 8;
 8001fa0:	7aaa      	ldrb	r2, [r5, #10]
	i = i + *s;
 8001fa2:	7aeb      	ldrb	r3, [r5, #11]
 8001fa4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
	pdhdr->arcount = get16(&msg[10]);
 8001fa8:	8223      	strh	r3, [r4, #16]
	for (i = 0; i < pdhdr->qdcount; i++)
 8001faa:	8962      	ldrh	r2, [r4, #10]
 8001fac:	b2bb      	uxth	r3, r7
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d809      	bhi.n	8001fc6 <parseDNSMSG+0xa6>
 8001fb2:	2700      	movs	r7, #0
   #endif
		if(!cp) return -1;
	}

	/* Answer section */
	for (i = 0; i < pdhdr->ancount; i++)
 8001fb4:	89a2      	ldrh	r2, [r4, #12]
 8001fb6:	b2bb      	uxth	r3, r7
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d80e      	bhi.n	8001fda <parseDNSMSG+0xba>
	for (i = 0; i < pdhdr->arcount; i++)
	{
		;
	}

	if(pdhdr->rcode == 0) return 1;		// No error
 8001fbc:	7a20      	ldrb	r0, [r4, #8]
		if(!cp) return -1;
 8001fbe:	fab0 f080 	clz	r0, r0
 8001fc2:	0940      	lsrs	r0, r0, #5
 8001fc4:	e008      	b.n	8001fd8 <parseDNSMSG+0xb8>
		cp = dns_question(msg, cp);
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	f7ff ff2c 	bl	8001e24 <dns_question>
		if(!cp) return -1;
 8001fcc:	3701      	adds	r7, #1
 8001fce:	4601      	mov	r1, r0
 8001fd0:	2800      	cmp	r0, #0
 8001fd2:	d1ea      	bne.n	8001faa <parseDNSMSG+0x8a>
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
	else return 0;
}
 8001fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cp = dns_answer(msg, cp, ip_from_dns);
 8001fda:	4632      	mov	r2, r6
 8001fdc:	4628      	mov	r0, r5
 8001fde:	f7ff ff2f 	bl	8001e40 <dns_answer>
		if(!cp) return -1;
 8001fe2:	3701      	adds	r7, #1
 8001fe4:	4601      	mov	r1, r0
 8001fe6:	2800      	cmp	r0, #0
 8001fe8:	d1e4      	bne.n	8001fb4 <parseDNSMSG+0x94>
 8001fea:	e7f3      	b.n	8001fd4 <parseDNSMSG+0xb4>

08001fec <dns_makequery>:
 *               buf  - is a pointer to the buffer for DNS message.
 *               len  - is the MAX. size of buffer.
 * Returns     : the pointer to the DNS message.
 */
int16_t dns_makequery(uint16_t op, char * name, uint8_t * buf, uint16_t len)
{
 8001fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001ff0:	4615      	mov	r5, r2
	uint16_t p;
	uint16_t dlen;

	cp = buf;

	DNS_MSGID++;
 8001ff2:	4a27      	ldr	r2, [pc, #156]	; (8002090 <dns_makequery+0xa4>)
	*s++ = i >> 8;
 8001ff4:	00c0      	lsls	r0, r0, #3
	DNS_MSGID++;
 8001ff6:	8813      	ldrh	r3, [r2, #0]
{
 8001ff8:	b0b1      	sub	sp, #196	; 0xc4
	DNS_MSGID++;
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	8013      	strh	r3, [r2, #0]
	*s++ = i >> 8;
 8002000:	0a1a      	lsrs	r2, r3, #8
 8002002:	702a      	strb	r2, [r5, #0]
	*s++ = i;
 8002004:	706b      	strb	r3, [r5, #1]
 8002006:	2201      	movs	r2, #1
 8002008:	2300      	movs	r3, #0
	*s++ = i >> 8;
 800200a:	f040 0001 	orr.w	r0, r0, #1
 800200e:	70a8      	strb	r0, [r5, #2]
	*s++ = i;
 8002010:	70eb      	strb	r3, [r5, #3]
	*s++ = i >> 8;
 8002012:	712b      	strb	r3, [r5, #4]
	*s++ = i;
 8002014:	716a      	strb	r2, [r5, #5]
	*s++ = i >> 8;
 8002016:	71ab      	strb	r3, [r5, #6]
	*s++ = i;
 8002018:	71eb      	strb	r3, [r5, #7]
	*s++ = i >> 8;
 800201a:	722b      	strb	r3, [r5, #8]
	*s++ = i;
 800201c:	726b      	strb	r3, [r5, #9]
	*s++ = i >> 8;
 800201e:	72ab      	strb	r3, [r5, #10]
	*s++ = i;
 8002020:	72eb      	strb	r3, [r5, #11]
	cp = put16(cp, 1);
	cp = put16(cp, 0);
	cp = put16(cp, 0);
	cp = put16(cp, 0);

	strcpy(sname, name);
 8002022:	4668      	mov	r0, sp
 8002024:	f001 fed3 	bl	8003dce <strcpy>
	dname = sname;
	dlen = strlen(dname);
 8002028:	4668      	mov	r0, sp
 800202a:	f7fe f88f 	bl	800014c <strlen>
	dname = sname;
 800202e:	466f      	mov	r7, sp
	*s++ = i;
 8002030:	f105 040c 	add.w	r4, r5, #12
	dlen = strlen(dname);
 8002034:	fa1f f980 	uxth.w	r9, r0
	for (;;)
	{
		/* Look for next dot */
		cp1 = strchr(dname, '.');
 8002038:	212e      	movs	r1, #46	; 0x2e
 800203a:	4638      	mov	r0, r7
 800203c:	f001 feba 	bl	8003db4 <strchr>

		if (cp1 != NULL) len = cp1 - dname;	/* More to come */
 8002040:	4680      	mov	r8, r0
 8002042:	b1d8      	cbz	r0, 800207c <dns_makequery+0x90>
 8002044:	1bc6      	subs	r6, r0, r7
 8002046:	b2b6      	uxth	r6, r6
		else len = dlen;			/* Last component */

		*cp++ = len;				/* Write length of component */
 8002048:	f804 6b01 	strb.w	r6, [r4], #1
		if (len == 0) break;
 800204c:	b156      	cbz	r6, 8002064 <dns_makequery+0x78>

		/* Copy component up to (but not including) dot */
		strncpy((char *)cp, dname, len);
 800204e:	4620      	mov	r0, r4
 8002050:	4632      	mov	r2, r6
 8002052:	4639      	mov	r1, r7
 8002054:	f001 fec3 	bl	8003dde <strncpy>
		cp += len;
 8002058:	4434      	add	r4, r6
		if (cp1 == NULL)
 800205a:	f1b8 0f00 	cmp.w	r8, #0
 800205e:	d10f      	bne.n	8002080 <dns_makequery+0x94>
		{
			*cp++ = 0;			/* Last one; write null and finish */
 8002060:	f804 8b01 	strb.w	r8, [r4], #1
	*s++ = i >> 8;
 8002064:	2100      	movs	r1, #0
	*s++ = i;
 8002066:	2201      	movs	r2, #1
 8002068:	1d23      	adds	r3, r4, #4
	}

	cp = put16(cp, 0x0001);				/* type */
	cp = put16(cp, 0x0001);				/* class */

	return ((int16_t)((uint32_t)(cp) - (uint32_t)(buf)));
 800206a:	1b58      	subs	r0, r3, r5
}
 800206c:	b200      	sxth	r0, r0
	*s++ = i >> 8;
 800206e:	7021      	strb	r1, [r4, #0]
	*s++ = i;
 8002070:	7062      	strb	r2, [r4, #1]
	*s++ = i >> 8;
 8002072:	70a1      	strb	r1, [r4, #2]
	*s++ = i;
 8002074:	70e2      	strb	r2, [r4, #3]
}
 8002076:	b031      	add	sp, #196	; 0xc4
 8002078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		else len = dlen;			/* Last component */
 800207c:	464e      	mov	r6, r9
 800207e:	e7e3      	b.n	8002048 <dns_makequery+0x5c>
		dname += len+1;
 8002080:	1c73      	adds	r3, r6, #1
		dlen -= len+1;
 8002082:	43f6      	mvns	r6, r6
 8002084:	444e      	add	r6, r9
		dname += len+1;
 8002086:	441f      	add	r7, r3
		dlen -= len+1;
 8002088:	fa1f f986 	uxth.w	r9, r6
		cp1 = strchr(dname, '.');
 800208c:	e7d4      	b.n	8002038 <dns_makequery+0x4c>
 800208e:	bf00      	nop
 8002090:	20000538 	.word	0x20000538

08002094 <check_DNS_timeout>:
 */

int8_t check_DNS_timeout(void)
{

	if(dns_1s_tick >= DNS_WAIT_TIME)
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <check_DNS_timeout+0x24>)
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2a02      	cmp	r2, #2
 800209a:	d90b      	bls.n	80020b4 <check_DNS_timeout+0x20>
	{
		dns_1s_tick = 0;
 800209c:	2000      	movs	r0, #0
		if(retry_count >= MAX_DNS_RETRY) {
 800209e:	4a07      	ldr	r2, [pc, #28]	; (80020bc <check_DNS_timeout+0x28>)
		dns_1s_tick = 0;
 80020a0:	6018      	str	r0, [r3, #0]
		if(retry_count >= MAX_DNS_RETRY) {
 80020a2:	7813      	ldrb	r3, [r2, #0]
 80020a4:	2b01      	cmp	r3, #1
			retry_count = 0;
			return -1; // timeout occurred
		}
		retry_count++;
 80020a6:	bf95      	itete	ls
 80020a8:	3301      	addls	r3, #1
			retry_count = 0;
 80020aa:	7010      	strbhi	r0, [r2, #0]
		retry_count++;
 80020ac:	7013      	strbls	r3, [r2, #0]
			return -1; // timeout occurred
 80020ae:	f04f 30ff 	movhi.w	r0, #4294967295
		return 0; // timer over, but no timeout
 80020b2:	4770      	bx	lr
	}

	return 1; // no timer over, no timeout occur
 80020b4:	2001      	movs	r0, #1
}
 80020b6:	4770      	bx	lr
 80020b8:	2000053c 	.word	0x2000053c
 80020bc:	20000544 	.word	0x20000544

080020c0 <DNS_init>:
/* DNS CLIENT INIT */
void DNS_init(uint8_t s, uint8_t * buf)
{
	DNS_SOCKET = s; // SOCK_DNS
	pDNSMSG = buf; // User's shared buffer
	DNS_MSGID = DNS_MSG_ID;
 80020c0:	f241 1222 	movw	r2, #4386	; 0x1122
	DNS_SOCKET = s; // SOCK_DNS
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <DNS_init+0x14>)
 80020c6:	7018      	strb	r0, [r3, #0]
	pDNSMSG = buf; // User's shared buffer
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <DNS_init+0x18>)
 80020ca:	6019      	str	r1, [r3, #0]
	DNS_MSGID = DNS_MSG_ID;
 80020cc:	4b03      	ldr	r3, [pc, #12]	; (80020dc <DNS_init+0x1c>)
 80020ce:	801a      	strh	r2, [r3, #0]
}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	2000053a 	.word	0x2000053a
 80020d8:	20000540 	.word	0x20000540
 80020dc:	20000538 	.word	0x20000538

080020e0 <DNS_run>:

/* DNS CLIENT RUN */
int8_t DNS_run(uint8_t * dns_ip, uint8_t * name, uint8_t * ip_from_dns)
{
 80020e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct dhdr dhp;
	uint8_t ip[4];
	uint16_t len, port;
	int8_t ret_check_timeout;

	retry_count = 0;
 80020e4:	2400      	movs	r4, #0
{
 80020e6:	4689      	mov	r9, r1
 80020e8:	4680      	mov	r8, r0
	retry_count = 0;
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <DNS_run+0x9c>)
	dns_1s_tick = 0;

   // Socket open
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80020ec:	4d24      	ldr	r5, [pc, #144]	; (8002180 <DNS_run+0xa0>)
	retry_count = 0;
 80020ee:	701c      	strb	r4, [r3, #0]
	dns_1s_tick = 0;
 80020f0:	4b24      	ldr	r3, [pc, #144]	; (8002184 <DNS_run+0xa4>)

#ifdef _DNS_DEBUG_
	printf("> DNS Query to DNS Server : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif

	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 80020f2:	4e25      	ldr	r6, [pc, #148]	; (8002188 <DNS_run+0xa8>)
{
 80020f4:	b08b      	sub	sp, #44	; 0x2c
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80020f6:	2102      	movs	r1, #2
	dns_1s_tick = 0;
 80020f8:	601c      	str	r4, [r3, #0]
{
 80020fa:	4617      	mov	r7, r2
   socket(DNS_SOCKET, Sn_MR_UDP, 0, 0);
 80020fc:	4623      	mov	r3, r4
 80020fe:	4622      	mov	r2, r4
 8002100:	7828      	ldrb	r0, [r5, #0]
 8002102:	f000 facd 	bl	80026a0 <socket>
	len = dns_makequery(0, (char *)name, pDNSMSG, MAX_DNS_BUF_SIZE);
 8002106:	f44f 7380 	mov.w	r3, #256	; 0x100
 800210a:	4649      	mov	r1, r9
 800210c:	6832      	ldr	r2, [r6, #0]
 800210e:	4620      	mov	r0, r4
 8002110:	f7ff ff6c 	bl	8001fec <dns_makequery>
	sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002114:	f04f 0935 	mov.w	r9, #53	; 0x35
 8002118:	4643      	mov	r3, r8
 800211a:	f8cd 9000 	str.w	r9, [sp]
 800211e:	b282      	uxth	r2, r0
 8002120:	6831      	ldr	r1, [r6, #0]
 8002122:	7828      	ldrb	r0, [r5, #0]
 8002124:	f000 fb4e 	bl	80027c4 <sendto>

	while (1)
	{
		if ((len = getSn_RX_RSR(DNS_SOCKET)) > 0)
 8002128:	7828      	ldrb	r0, [r5, #0]
 800212a:	f7fe fe64 	bl	8000df6 <getSn_RX_RSR>
 800212e:	4604      	mov	r4, r0
 8002130:	b1d0      	cbz	r0, 8002168 <DNS_run+0x88>
		{
			if (len > MAX_DNS_BUF_SIZE) len = MAX_DNS_BUF_SIZE;
			len = recvfrom(DNS_SOCKET, pDNSMSG, len, ip, &port);
 8002132:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002136:	bf28      	it	cs
 8002138:	f44f 7480 	movcs.w	r4, #256	; 0x100
 800213c:	f10d 030e 	add.w	r3, sp, #14
 8002140:	b2a2      	uxth	r2, r4
 8002142:	6831      	ldr	r1, [r6, #0]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	7828      	ldrb	r0, [r5, #0]
 8002148:	ab04      	add	r3, sp, #16
 800214a:	f000 fbeb 	bl	8002924 <recvfrom>
      #ifdef _DNS_DEBUG_
	      printf("> Receive DNS message from %d.%d.%d.%d(%d). len = %d\r\n", ip[0], ip[1], ip[2], ip[3],port,len);
      #endif
         ret = parseDNSMSG(&dhp, pDNSMSG, ip_from_dns);
 800214e:	463a      	mov	r2, r7
 8002150:	6831      	ldr	r1, [r6, #0]
 8002152:	a805      	add	r0, sp, #20
 8002154:	f7ff fee4 	bl	8001f20 <parseDNSMSG>
 8002158:	4604      	mov	r4, r0
		if (ret_check_timeout < 0) {

#ifdef _DNS_DEBUG_
			printf("> DNS Server is not responding : %d.%d.%d.%d\r\n", dns_ip[0], dns_ip[1], dns_ip[2], dns_ip[3]);
#endif
			close(DNS_SOCKET);
 800215a:	7828      	ldrb	r0, [r5, #0]
 800215c:	f000 fa62 	bl	8002624 <close>
	}
	close(DNS_SOCKET);
	// Return value
	// 0 > :  failed / 1 - success
	return ret;
}
 8002160:	4620      	mov	r0, r4
 8002162:	b00b      	add	sp, #44	; 0x2c
 8002164:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret_check_timeout = check_DNS_timeout();
 8002168:	f7ff ff94 	bl	8002094 <check_DNS_timeout>
		if (ret_check_timeout < 0) {
 800216c:	1e02      	subs	r2, r0, #0
 800216e:	dbf4      	blt.n	800215a <DNS_run+0x7a>
		else if (ret_check_timeout == 0) {
 8002170:	d1da      	bne.n	8002128 <DNS_run+0x48>
			sendto(DNS_SOCKET, pDNSMSG, len, dns_ip, IPPORT_DOMAIN);
 8002172:	4643      	mov	r3, r8
 8002174:	f8cd 9000 	str.w	r9, [sp]
 8002178:	e7d2      	b.n	8002120 <DNS_run+0x40>
 800217a:	bf00      	nop
 800217c:	20000544 	.word	0x20000544
 8002180:	2000053a 	.word	0x2000053a
 8002184:	2000053c 	.word	0x2000053c
 8002188:	20000540 	.word	0x20000540

0800218c <DNS_time_handler>:


/* DNS TIMER HANDLER */
void DNS_time_handler(void)
{
	dns_1s_tick++;
 800218c:	4a02      	ldr	r2, [pc, #8]	; (8002198 <DNS_time_handler+0xc>)
 800218e:	6813      	ldr	r3, [r2, #0]
 8002190:	3301      	adds	r3, #1
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	2000053c 	.word	0x2000053c

0800219c <SNTP_init>:
	//calculation for date
	calcdatetime(seconds);
}

void SNTP_init(uint8_t s, uint8_t *ntp_server, uint8_t tz, uint8_t *buf)
{
 800219c:	b510      	push	{r4, lr}
	NTP_SOCKET = s;
 800219e:	4c13      	ldr	r4, [pc, #76]	; (80021ec <SNTP_init+0x50>)
 80021a0:	7020      	strb	r0, [r4, #0]

	NTPformat.dstaddr[0] = ntp_server[0];
 80021a2:	780c      	ldrb	r4, [r1, #0]
 80021a4:	4812      	ldr	r0, [pc, #72]	; (80021f0 <SNTP_init+0x54>)
 80021a6:	7004      	strb	r4, [r0, #0]
	NTPformat.dstaddr[1] = ntp_server[1];
 80021a8:	784c      	ldrb	r4, [r1, #1]
 80021aa:	7044      	strb	r4, [r0, #1]
	NTPformat.dstaddr[2] = ntp_server[2];
 80021ac:	788c      	ldrb	r4, [r1, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 80021ae:	78c9      	ldrb	r1, [r1, #3]
	NTPformat.dstaddr[2] = ntp_server[2];
 80021b0:	7084      	strb	r4, [r0, #2]
	NTPformat.dstaddr[3] = ntp_server[3];
 80021b2:	70c1      	strb	r1, [r0, #3]

	time_zone = tz;
 80021b4:	490f      	ldr	r1, [pc, #60]	; (80021f4 <SNTP_init+0x58>)
 80021b6:	700a      	strb	r2, [r1, #0]

	data_buf = buf;
 80021b8:	4a0f      	ldr	r2, [pc, #60]	; (80021f8 <SNTP_init+0x5c>)
 80021ba:	6013      	str	r3, [r2, #0]

	uint8_t Flag;
	NTPformat.leap = 0;           /* leap indicator */
	NTPformat.version = 4;        /* version number */
 80021bc:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <SNTP_init+0x60>)
	NTPformat.poll = 0;           /* poll interval */
	NTPformat.precision = 0;      /* precision */
	NTPformat.rootdelay = 0;      /* root delay */
	NTPformat.rootdisp = 0;       /* root dispersion */
	NTPformat.refid = 0;          /* reference ID */
	NTPformat.reftime = 0;        /* reference time */
 80021be:	2200      	movs	r2, #0
	NTPformat.version = 4;        /* version number */
 80021c0:	6043      	str	r3, [r0, #4]
	NTPformat.poll = 0;           /* poll interval */
 80021c2:	2300      	movs	r3, #0
	NTPformat.rootdisp = 0;       /* root dispersion */
 80021c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
	NTPformat.poll = 0;           /* poll interval */
 80021c8:	8103      	strh	r3, [r0, #8]
	NTPformat.refid = 0;          /* reference ID */
 80021ca:	7503      	strb	r3, [r0, #20]
	NTPformat.reftime = 0;        /* reference time */
 80021cc:	2300      	movs	r3, #0
 80021ce:	e9c0 2306 	strd	r2, r3, [r0, #24]
	NTPformat.org = 0;            /* origin timestamp */
 80021d2:	e9c0 2308 	strd	r2, r3, [r0, #32]
	NTPformat.rec = 0;            /* receive timestamp */
 80021d6:	e9c0 230a 	strd	r2, r3, [r0, #40]	; 0x28
	NTPformat.xmt = 1;            /* transmit timestamp */
 80021da:	2201      	movs	r2, #1
 80021dc:	2300      	movs	r3, #0
 80021de:	e9c0 230c 	strd	r2, r3, [r0, #48]	; 0x30

	Flag = (NTPformat.leap<<6)+(NTPformat.version<<3)+NTPformat.mode; //one byte Flag
	memcpy(ntpmessage,(void const*)(&Flag),1);
 80021e2:	2223      	movs	r2, #35	; 0x23
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <SNTP_init+0x64>)
 80021e6:	701a      	strb	r2, [r3, #0]
}
 80021e8:	bd10      	pop	{r4, pc}
 80021ea:	bf00      	nop
 80021ec:	20000545 	.word	0x20000545
 80021f0:	20000548 	.word	0x20000548
 80021f4:	200005be 	.word	0x200005be
 80021f8:	20000588 	.word	0x20000588
 80021fc:	00030004 	.word	0x00030004
 8002200:	2000058e 	.word	0x2000058e

08002204 <calcdatetime>:
	// 0 - failed / 1 - success
	return 0;
}

void calcdatetime(tstamp seconds)
{
 8002204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	tstamp n=0,d=0,total_d=0,rz=0;
	uint16_t y=0,r=0,yr=0;
	signed long long yd=0;

	n = seconds;
	total_d = seconds/(SECS_PERDAY);
 8002208:	2300      	movs	r3, #0
 800220a:	4a68      	ldr	r2, [pc, #416]	; (80023ac <calcdatetime+0x1a8>)
{
 800220c:	4680      	mov	r8, r0
 800220e:	460f      	mov	r7, r1
	d=0;
	uint32_t p_year_total_sec=SECS_PERDAY*365;
	uint32_t r_year_total_sec=SECS_PERDAY*366;
	while(n>=p_year_total_sec)
 8002210:	2500      	movs	r5, #0
	total_d = seconds/(SECS_PERDAY);
 8002212:	f7fd ffa3 	bl	800015c <__aeabi_uldivmod>
	n = seconds;
 8002216:	4644      	mov	r4, r8
	total_d = seconds/(SECS_PERDAY);
 8002218:	468a      	mov	sl, r1
	d=0;
 800221a:	462a      	mov	r2, r5
	n = seconds;
 800221c:	4639      	mov	r1, r7
	d=0;
 800221e:	462b      	mov	r3, r5
	{
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 8002220:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8002224:	f04f 0964 	mov.w	r9, #100	; 0x64
			d = d + 366;
		}
		else
		{
			n = n - (p_year_total_sec);
			d = d + 365;
 8002228:	f240 1b6d 	movw	fp, #365	; 0x16d
	total_d = seconds/(SECS_PERDAY);
 800222c:	9001      	str	r0, [sp, #4]
	while(n>=p_year_total_sec)
 800222e:	f8df c180 	ldr.w	ip, [pc, #384]	; 80023b0 <calcdatetime+0x1ac>
 8002232:	b2ae      	uxth	r6, r5
 8002234:	45a4      	cmp	ip, r4
 8002236:	f04f 0c00 	mov.w	ip, #0
 800223a:	eb7c 0c01 	sbcs.w	ip, ip, r1
 800223e:	d356      	bcc.n	80022ee <calcdatetime+0xea>
	y += EPOCH;

	Nowdatetime.yy = y;

	yd=0;
	yd = total_d - d;
 8002240:	9901      	ldr	r1, [sp, #4]
	y += EPOCH;
 8002242:	f206 766c 	addw	r6, r6, #1900	; 0x76c
	yd = total_d - d;
 8002246:	1a8d      	subs	r5, r1, r2
			rz += 31;
		}

		if (yf==2)
		{
			if (y%400==0 || (y%100!=0 && y%4==0))
 8002248:	f44f 71c8 	mov.w	r1, #400	; 0x190
	y += EPOCH;
 800224c:	b2b6      	uxth	r6, r6
			if (y%400==0 || (y%100!=0 && y%4==0))
 800224e:	fbb6 fef1 	udiv	lr, r6, r1
 8002252:	fb01 6e1e 	mls	lr, r1, lr, r6
 8002256:	f04f 0164 	mov.w	r1, #100	; 0x64
 800225a:	fbb6 f9f1 	udiv	r9, r6, r1
	tstamp n=0,d=0,total_d=0,rz=0;
 800225e:	f04f 0c00 	mov.w	ip, #0
			if (y%400==0 || (y%100!=0 && y%4==0))
 8002262:	fb01 6919 	mls	r9, r1, r9, r6
		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 8002266:	f241 5baa 	movw	fp, #5546	; 0x15aa
	yf=1;
 800226a:	f04f 0101 	mov.w	r1, #1
	Nowdatetime.yy = y;
 800226e:	4c51      	ldr	r4, [pc, #324]	; (80023b4 <calcdatetime+0x1b0>)
	yd = total_d - d;
 8002270:	eb6a 0303 	sbc.w	r3, sl, r3
	Nowdatetime.yy = y;
 8002274:	8026      	strh	r6, [r4, #0]
			if (y%400==0 || (y%100!=0 && y%4==0))
 8002276:	f006 0603 	and.w	r6, r6, #3
 800227a:	fa1f fe8e 	uxth.w	lr, lr
 800227e:	fa1f f989 	uxth.w	r9, r9
 8002282:	9601      	str	r6, [sp, #4]
	while(yd>=28)
 8002284:	2d1c      	cmp	r5, #28
 8002286:	f173 0600 	sbcs.w	r6, r3, #0
 800228a:	da54      	bge.n	8002336 <calcdatetime+0x132>

	}
	Nowdatetime.mo=yf;
	yr = total_d-d-rz;

	yr += 1;
 800228c:	3001      	adds	r0, #1
 800228e:	1a82      	subs	r2, r0, r2
 8002290:	eba2 0c0c 	sub.w	ip, r2, ip

	Nowdatetime.dd=yr;
 8002294:	f884 c003 	strb.w	ip, [r4, #3]
	Nowdatetime.mo=yf;
 8002298:	70a1      	strb	r1, [r4, #2]

	//calculation for time
	seconds = seconds%SECS_PERDAY;
 800229a:	4640      	mov	r0, r8
 800229c:	4639      	mov	r1, r7
 800229e:	2300      	movs	r3, #0
 80022a0:	4a42      	ldr	r2, [pc, #264]	; (80023ac <calcdatetime+0x1a8>)
 80022a2:	f7fd ff5b 	bl	800015c <__aeabi_uldivmod>
 80022a6:	4616      	mov	r6, r2
 80022a8:	461d      	mov	r5, r3
	Nowdatetime.hh = seconds/3600;
 80022aa:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022ae:	2300      	movs	r3, #0
 80022b0:	4630      	mov	r0, r6
 80022b2:	4629      	mov	r1, r5
 80022b4:	f7fd ff52 	bl	800015c <__aeabi_uldivmod>
	Nowdatetime.mm = (seconds%3600)/60;
 80022b8:	4629      	mov	r1, r5
	Nowdatetime.hh = seconds/3600;
 80022ba:	7120      	strb	r0, [r4, #4]
	Nowdatetime.mm = (seconds%3600)/60;
 80022bc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80022c0:	4630      	mov	r0, r6
 80022c2:	2300      	movs	r3, #0
 80022c4:	f7fd ff4a 	bl	800015c <__aeabi_uldivmod>
 80022c8:	4616      	mov	r6, r2
 80022ca:	461d      	mov	r5, r3
 80022cc:	223c      	movs	r2, #60	; 0x3c
 80022ce:	2300      	movs	r3, #0
 80022d0:	4630      	mov	r0, r6
 80022d2:	4629      	mov	r1, r5
 80022d4:	f7fd ff42 	bl	800015c <__aeabi_uldivmod>
	Nowdatetime.ss = (seconds%3600)%60;
 80022d8:	4629      	mov	r1, r5
	Nowdatetime.mm = (seconds%3600)/60;
 80022da:	7160      	strb	r0, [r4, #5]
	Nowdatetime.ss = (seconds%3600)%60;
 80022dc:	223c      	movs	r2, #60	; 0x3c
 80022de:	4630      	mov	r0, r6
 80022e0:	2300      	movs	r3, #0
 80022e2:	f7fd ff3b 	bl	800015c <__aeabi_uldivmod>
 80022e6:	71a2      	strb	r2, [r4, #6]

}
 80022e8:	b003      	add	sp, #12
 80022ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if((EPOCH+r)%400==0 || ((EPOCH+r)%100!=0 && (EPOCH+r)%4==0))
 80022ee:	b2ae      	uxth	r6, r5
 80022f0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80022f4:	fb96 fcfe 	sdiv	ip, r6, lr
 80022f8:	fb0e 6c1c 	mls	ip, lr, ip, r6
 80022fc:	f1bc 0f00 	cmp.w	ip, #0
 8002300:	d008      	beq.n	8002314 <calcdatetime+0x110>
 8002302:	fb96 fcf9 	sdiv	ip, r6, r9
 8002306:	fb09 6c1c 	mls	ip, r9, ip, r6
 800230a:	f1bc 0f00 	cmp.w	ip, #0
 800230e:	d00b      	beq.n	8002328 <calcdatetime+0x124>
 8002310:	07b6      	lsls	r6, r6, #30
 8002312:	d109      	bne.n	8002328 <calcdatetime+0x124>
			n = n -(r_year_total_sec);
 8002314:	4e28      	ldr	r6, [pc, #160]	; (80023b8 <calcdatetime+0x1b4>)
 8002316:	19a4      	adds	r4, r4, r6
 8002318:	f161 0100 	sbc.w	r1, r1, #0
			d = d + 366;
 800231c:	f512 72b7 	adds.w	r2, r2, #366	; 0x16e
			d = d + 365;
 8002320:	f143 0300 	adc.w	r3, r3, #0
		y+=1;
 8002324:	3501      	adds	r5, #1
 8002326:	e782      	b.n	800222e <calcdatetime+0x2a>
			n = n - (p_year_total_sec);
 8002328:	4e24      	ldr	r6, [pc, #144]	; (80023bc <calcdatetime+0x1b8>)
 800232a:	19a4      	adds	r4, r4, r6
 800232c:	f161 0100 	sbc.w	r1, r1, #0
			d = d + 365;
 8002330:	eb12 020b 	adds.w	r2, r2, fp
 8002334:	e7f4      	b.n	8002320 <calcdatetime+0x11c>
		if(yf==1 || yf==3 || yf==5 || yf==7 || yf==8 || yf==10 || yf==12)
 8002336:	290c      	cmp	r1, #12
 8002338:	d827      	bhi.n	800238a <calcdatetime+0x186>
 800233a:	fa2b fa01 	lsr.w	sl, fp, r1
 800233e:	f01a 0f01 	tst.w	sl, #1
 8002342:	d006      	beq.n	8002352 <calcdatetime+0x14e>
			yd -= 31;
 8002344:	3d1f      	subs	r5, #31
 8002346:	f163 0300 	sbc.w	r3, r3, #0
			if(yd<0)break;
 800234a:	2b00      	cmp	r3, #0
 800234c:	db9e      	blt.n	800228c <calcdatetime+0x88>
			rz += 31;
 800234e:	f11c 0c1f 	adds.w	ip, ip, #31
		if (yf==2)
 8002352:	2902      	cmp	r1, #2
 8002354:	d119      	bne.n	800238a <calcdatetime+0x186>
			if (y%400==0 || (y%100!=0 && y%4==0))
 8002356:	f1be 0f00 	cmp.w	lr, #0
 800235a:	d004      	beq.n	8002366 <calcdatetime+0x162>
 800235c:	f1b9 0f00 	cmp.w	r9, #0
 8002360:	d00b      	beq.n	800237a <calcdatetime+0x176>
 8002362:	9e01      	ldr	r6, [sp, #4]
 8002364:	b94e      	cbnz	r6, 800237a <calcdatetime+0x176>
				yd -= 29;
 8002366:	3d1d      	subs	r5, #29
 8002368:	f163 0300 	sbc.w	r3, r3, #0
				if(yd<0)break;
 800236c:	2b00      	cmp	r3, #0
 800236e:	db8d      	blt.n	800228c <calcdatetime+0x88>
				rz += 29;
 8002370:	f11c 0c1d 	adds.w	ip, ip, #29
		yf += 1;
 8002374:	3101      	adds	r1, #1
 8002376:	b2c9      	uxtb	r1, r1
 8002378:	e784      	b.n	8002284 <calcdatetime+0x80>
				yd -= 28;
 800237a:	3d1c      	subs	r5, #28
 800237c:	f163 0300 	sbc.w	r3, r3, #0
				if(yd<0)break;
 8002380:	2b00      	cmp	r3, #0
 8002382:	db83      	blt.n	800228c <calcdatetime+0x88>
				rz += 28;
 8002384:	f11c 0c1c 	adds.w	ip, ip, #28
 8002388:	e7f4      	b.n	8002374 <calcdatetime+0x170>
		if(yf==4 || yf==6 || yf==9 || yf==11 )
 800238a:	f001 0afd 	and.w	sl, r1, #253	; 0xfd
 800238e:	f1ba 0f04 	cmp.w	sl, #4
 8002392:	d002      	beq.n	800239a <calcdatetime+0x196>
 8002394:	f1ba 0f09 	cmp.w	sl, #9
 8002398:	d1ec      	bne.n	8002374 <calcdatetime+0x170>
			yd -= 30;
 800239a:	3d1e      	subs	r5, #30
 800239c:	f163 0300 	sbc.w	r3, r3, #0
			if(yd<0)break;
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f6ff af73 	blt.w	800228c <calcdatetime+0x88>
			rz += 30;
 80023a6:	f11c 0c1e 	adds.w	ip, ip, #30
 80023aa:	e7e3      	b.n	8002374 <calcdatetime+0x170>
 80023ac:	00015180 	.word	0x00015180
 80023b0:	01e1337f 	.word	0x01e1337f
 80023b4:	20000580 	.word	0x20000580
 80023b8:	fe1d7b00 	.word	0xfe1d7b00
 80023bc:	fe1ecc80 	.word	0xfe1ecc80

080023c0 <get_seconds_from_ntp_server>:
	for (i = 0; i < 4; i++)
 80023c0:	2200      	movs	r2, #0
{
 80023c2:	b410      	push	{r4}
 80023c4:	1844      	adds	r4, r0, r1
	tstamp seconds = 0;
 80023c6:	4610      	mov	r0, r2
 80023c8:	4611      	mov	r1, r2
	for (i = 0; i < 4; i++)
 80023ca:	3201      	adds	r2, #1
		seconds = (seconds << 8) | buf[idx + i];
 80023cc:	020b      	lsls	r3, r1, #8
	for (i = 0; i < 4; i++)
 80023ce:	b2d2      	uxtb	r2, r2
		seconds = (seconds << 8) | buf[idx + i];
 80023d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80023d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
	for (i = 0; i < 4; i++)
 80023d8:	2a04      	cmp	r2, #4
		seconds = (seconds << 8) | buf[idx + i];
 80023da:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 80023de:	4619      	mov	r1, r3
	for (i = 0; i < 4; i++)
 80023e0:	d1f3      	bne.n	80023ca <get_seconds_from_ntp_server+0xa>
	switch (time_zone)
 80023e2:	4a47      	ldr	r2, [pc, #284]	; (8002500 <get_seconds_from_ntp_server+0x140>)
 80023e4:	7812      	ldrb	r2, [r2, #0]
 80023e6:	2a31      	cmp	r2, #49	; 0x31
 80023e8:	d81e      	bhi.n	8002428 <get_seconds_from_ntp_server+0x68>
 80023ea:	e8df f002 	tbb	[pc, r2]
 80023ee:	2019      	.short	0x2019
 80023f0:	28262422 	.word	0x28262422
 80023f4:	2d2b2b28 	.word	0x2d2b2b28
 80023f8:	2f2f2f2d 	.word	0x2f2f2f2d
 80023fc:	36333331 	.word	0x36333331
 8002400:	1d3d3a38 	.word	0x1d3d3a38
 8002404:	4040401d 	.word	0x4040401d
 8002408:	48484545 	.word	0x48484545
 800240c:	55524f4c 	.word	0x55524f4c
 8002410:	615e5b58 	.word	0x615e5b58
 8002414:	6d6a6764 	.word	0x6d6a6764
 8002418:	79767370 	.word	0x79767370
 800241c:	85827f7c 	.word	0x85827f7c
		seconds -=  12*3600;
 8002420:	4a38      	ldr	r2, [pc, #224]	; (8002504 <get_seconds_from_ntp_server+0x144>)
		seconds -=  11*3600;
 8002422:	1880      	adds	r0, r0, r2
		seconds -=  1*3600;
 8002424:	f163 0100 	sbc.w	r1, r3, #0
}
 8002428:	bc10      	pop	{r4}
	calcdatetime(seconds);
 800242a:	f7ff beeb 	b.w	8002204 <calcdatetime>
		seconds -=  11*3600;
 800242e:	4a36      	ldr	r2, [pc, #216]	; (8002508 <get_seconds_from_ntp_server+0x148>)
 8002430:	e7f7      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -=  10*3600;
 8002432:	4a36      	ldr	r2, [pc, #216]	; (800250c <get_seconds_from_ntp_server+0x14c>)
 8002434:	e7f5      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -=  (9*3600+30*60);
 8002436:	4a36      	ldr	r2, [pc, #216]	; (8002510 <get_seconds_from_ntp_server+0x150>)
 8002438:	e7f3      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -=  9*3600;
 800243a:	4a36      	ldr	r2, [pc, #216]	; (8002514 <get_seconds_from_ntp_server+0x154>)
 800243c:	e7f1      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -=  8*3600;
 800243e:	f5b0 40e1 	subs.w	r0, r0, #28800	; 0x7080
 8002442:	e7ef      	b.n	8002424 <get_seconds_from_ntp_server+0x64>
		seconds -=  7*3600;
 8002444:	4a34      	ldr	r2, [pc, #208]	; (8002518 <get_seconds_from_ntp_server+0x158>)
 8002446:	e7ec      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -=  6*3600;
 8002448:	4a34      	ldr	r2, [pc, #208]	; (800251c <get_seconds_from_ntp_server+0x15c>)
 800244a:	e7ea      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -= 5*3600;
 800244c:	4a34      	ldr	r2, [pc, #208]	; (8002520 <get_seconds_from_ntp_server+0x160>)
 800244e:	e7e8      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -=  (4*3600+30*60);
 8002450:	4a34      	ldr	r2, [pc, #208]	; (8002524 <get_seconds_from_ntp_server+0x164>)
 8002452:	e7e6      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -=  4*3600;
 8002454:	f5b0 5061 	subs.w	r0, r0, #14400	; 0x3840
 8002458:	e7e4      	b.n	8002424 <get_seconds_from_ntp_server+0x64>
		seconds -=  (3*3600+30*60);
 800245a:	4a33      	ldr	r2, [pc, #204]	; (8002528 <get_seconds_from_ntp_server+0x168>)
 800245c:	e7e1      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -=  3*3600;
 800245e:	4a33      	ldr	r2, [pc, #204]	; (800252c <get_seconds_from_ntp_server+0x16c>)
 8002460:	e7df      	b.n	8002422 <get_seconds_from_ntp_server+0x62>
		seconds -=  2*3600;
 8002462:	f5b0 50e1 	subs.w	r0, r0, #7200	; 0x1c20
 8002466:	e7dd      	b.n	8002424 <get_seconds_from_ntp_server+0x64>
		seconds -=  1*3600;
 8002468:	f5b0 6061 	subs.w	r0, r0, #3600	; 0xe10
 800246c:	e7da      	b.n	8002424 <get_seconds_from_ntp_server+0x64>
		seconds +=  1*3600;
 800246e:	f510 6061 	adds.w	r0, r0, #3600	; 0xe10
		seconds +=  14*3600;
 8002472:	f143 0100 	adc.w	r1, r3, #0
		break;
 8002476:	e7d7      	b.n	8002428 <get_seconds_from_ntp_server+0x68>
		seconds +=  2*3600;
 8002478:	f510 50e1 	adds.w	r0, r0, #7200	; 0x1c20
 800247c:	e7f9      	b.n	8002472 <get_seconds_from_ntp_server+0xb2>
		seconds +=  3*3600;
 800247e:	f642 2230 	movw	r2, #10800	; 0x2a30
		seconds +=  14*3600;
 8002482:	1880      	adds	r0, r0, r2
 8002484:	e7f5      	b.n	8002472 <get_seconds_from_ntp_server+0xb2>
		seconds +=  (3*3600+30*60);
 8002486:	f243 1238 	movw	r2, #12600	; 0x3138
 800248a:	e7fa      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  4*3600;
 800248c:	f510 5061 	adds.w	r0, r0, #14400	; 0x3840
 8002490:	e7ef      	b.n	8002472 <get_seconds_from_ntp_server+0xb2>
		seconds +=  (4*3600+30*60);
 8002492:	f643 7248 	movw	r2, #16200	; 0x3f48
 8002496:	e7f4      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  5*3600;
 8002498:	f244 6250 	movw	r2, #18000	; 0x4650
 800249c:	e7f1      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  (5*3600+30*60);
 800249e:	f644 5258 	movw	r2, #19800	; 0x4d58
 80024a2:	e7ee      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  (5*3600+45*60);
 80024a4:	f245 02dc 	movw	r2, #20700	; 0x50dc
 80024a8:	e7eb      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  6*3600;
 80024aa:	f245 4260 	movw	r2, #21600	; 0x5460
 80024ae:	e7e8      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  (6*3600+30*60);
 80024b0:	f645 3268 	movw	r2, #23400	; 0x5b68
 80024b4:	e7e5      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  7*3600;
 80024b6:	f246 2270 	movw	r2, #25200	; 0x6270
 80024ba:	e7e2      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  8*3600;
 80024bc:	f510 40e1 	adds.w	r0, r0, #28800	; 0x7080
 80024c0:	e7d7      	b.n	8002472 <get_seconds_from_ntp_server+0xb2>
		seconds +=  9*3600;
 80024c2:	f647 6290 	movw	r2, #32400	; 0x7e90
 80024c6:	e7dc      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  (9*3600+30*60);
 80024c8:	f248 5298 	movw	r2, #34200	; 0x8598
 80024cc:	e7d9      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  10*3600;
 80024ce:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 80024d2:	e7d6      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  (10*3600+30*60);
 80024d4:	f249 32a8 	movw	r2, #37800	; 0x93a8
 80024d8:	e7d3      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  11*3600;
 80024da:	f649 22b0 	movw	r2, #39600	; 0x9ab0
 80024de:	e7d0      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  (11*3600+30*60);
 80024e0:	f24a 12b8 	movw	r2, #41400	; 0xa1b8
 80024e4:	e7cd      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  12*3600;
 80024e6:	f64a 02c0 	movw	r2, #43200	; 0xa8c0
 80024ea:	e7ca      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  (12*3600+45*60);
 80024ec:	f24b 324c 	movw	r2, #45900	; 0xb34c
 80024f0:	e7c7      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  13*3600;
 80024f2:	f24b 62d0 	movw	r2, #46800	; 0xb6d0
 80024f6:	e7c4      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
		seconds +=  14*3600;
 80024f8:	f24c 42e0 	movw	r2, #50400	; 0xc4e0
 80024fc:	e7c1      	b.n	8002482 <get_seconds_from_ntp_server+0xc2>
 80024fe:	bf00      	nop
 8002500:	200005be 	.word	0x200005be
 8002504:	ffff5740 	.word	0xffff5740
 8002508:	ffff6550 	.word	0xffff6550
 800250c:	ffff7360 	.word	0xffff7360
 8002510:	ffff7a68 	.word	0xffff7a68
 8002514:	ffff8170 	.word	0xffff8170
 8002518:	ffff9d90 	.word	0xffff9d90
 800251c:	ffffaba0 	.word	0xffffaba0
 8002520:	ffffb9b0 	.word	0xffffb9b0
 8002524:	ffffc0b8 	.word	0xffffc0b8
 8002528:	ffffcec8 	.word	0xffffcec8
 800252c:	ffffd5d0 	.word	0xffffd5d0

08002530 <SNTP_run>:
{
 8002530:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	uint32_t destip = 0;
 8002534:	2400      	movs	r4, #0
	switch(getSn_SR(NTP_SOCKET))
 8002536:	4e35      	ldr	r6, [pc, #212]	; (800260c <SNTP_run+0xdc>)
{
 8002538:	4680      	mov	r8, r0
	switch(getSn_SR(NTP_SOCKET))
 800253a:	7830      	ldrb	r0, [r6, #0]
	uint32_t destip = 0;
 800253c:	9403      	str	r4, [sp, #12]
	switch(getSn_SR(NTP_SOCKET))
 800253e:	0140      	lsls	r0, r0, #5
 8002540:	f500 7042 	add.w	r0, r0, #776	; 0x308
 8002544:	f7fe fb62 	bl	8000c0c <WIZCHIP_READ>
 8002548:	4605      	mov	r5, r0
 800254a:	2800      	cmp	r0, #0
 800254c:	d055      	beq.n	80025fa <SNTP_run+0xca>
 800254e:	2822      	cmp	r0, #34	; 0x22
 8002550:	d15a      	bne.n	8002608 <SNTP_run+0xd8>
		if ((RSR_len = getSn_RX_RSR(NTP_SOCKET)) > 0)
 8002552:	7830      	ldrb	r0, [r6, #0]
 8002554:	f7fe fc4f 	bl	8000df6 <getSn_RX_RSR>
 8002558:	4f2d      	ldr	r7, [pc, #180]	; (8002610 <SNTP_run+0xe0>)
 800255a:	4605      	mov	r5, r0
 800255c:	b368      	cbz	r0, 80025ba <SNTP_run+0x8a>
			recvfrom(NTP_SOCKET, data_buf, RSR_len, (uint8_t *)&destip, &destport);
 800255e:	2838      	cmp	r0, #56	; 0x38
 8002560:	4602      	mov	r2, r0
 8002562:	bf28      	it	cs
 8002564:	2238      	movcs	r2, #56	; 0x38
 8002566:	4d2b      	ldr	r5, [pc, #172]	; (8002614 <SNTP_run+0xe4>)
 8002568:	f10d 030a 	add.w	r3, sp, #10
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	6829      	ldr	r1, [r5, #0]
 8002570:	ab03      	add	r3, sp, #12
 8002572:	b292      	uxth	r2, r2
 8002574:	7830      	ldrb	r0, [r6, #0]
 8002576:	f000 f9d5 	bl	8002924 <recvfrom>
			get_seconds_from_ntp_server(data_buf,startindex);
 800257a:	6828      	ldr	r0, [r5, #0]
 800257c:	2128      	movs	r1, #40	; 0x28
 800257e:	f7ff ff1f 	bl	80023c0 <get_seconds_from_ntp_server>
			time->yy = Nowdatetime.yy;
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <SNTP_run+0xe8>)
			return 1;
 8002584:	2501      	movs	r5, #1
			time->yy = Nowdatetime.yy;
 8002586:	881a      	ldrh	r2, [r3, #0]
 8002588:	f8a8 2000 	strh.w	r2, [r8]
			time->mo = Nowdatetime.mo;
 800258c:	789a      	ldrb	r2, [r3, #2]
			close(NTP_SOCKET);
 800258e:	7830      	ldrb	r0, [r6, #0]
			time->mo = Nowdatetime.mo;
 8002590:	f888 2002 	strb.w	r2, [r8, #2]
			time->dd = Nowdatetime.dd;
 8002594:	78da      	ldrb	r2, [r3, #3]
			ntp_retry_cnt=0;
 8002596:	803c      	strh	r4, [r7, #0]
			time->dd = Nowdatetime.dd;
 8002598:	f888 2003 	strb.w	r2, [r8, #3]
			time->hh = Nowdatetime.hh;
 800259c:	791a      	ldrb	r2, [r3, #4]
 800259e:	f888 2004 	strb.w	r2, [r8, #4]
			time->mm = Nowdatetime.mm;
 80025a2:	795a      	ldrb	r2, [r3, #5]
 80025a4:	f888 2005 	strb.w	r2, [r8, #5]
			time->ss = Nowdatetime.ss;
 80025a8:	799b      	ldrb	r3, [r3, #6]
 80025aa:	f888 3006 	strb.w	r3, [r8, #6]
			close(NTP_SOCKET);
 80025ae:	f000 f839 	bl	8002624 <close>
}
 80025b2:	4628      	mov	r0, r5
 80025b4:	b004      	add	sp, #16
 80025b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(ntp_retry_cnt<0xFFFF)
 80025ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025be:	883b      	ldrh	r3, [r7, #0]
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d015      	beq.n	80025f0 <SNTP_run+0xc0>
			if(ntp_retry_cnt==0)//first send request, no need to wait
 80025c4:	b963      	cbnz	r3, 80025e0 <SNTP_run+0xb0>
				sendto(NTP_SOCKET,ntpmessage,sizeof(ntpmessage),NTPformat.dstaddr,ntp_port);
 80025c6:	237b      	movs	r3, #123	; 0x7b
 80025c8:	2230      	movs	r2, #48	; 0x30
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4913      	ldr	r1, [pc, #76]	; (800261c <SNTP_run+0xec>)
 80025ce:	4b14      	ldr	r3, [pc, #80]	; (8002620 <SNTP_run+0xf0>)
 80025d0:	7830      	ldrb	r0, [r6, #0]
 80025d2:	f000 f8f7 	bl	80027c4 <sendto>
				ntp_retry_cnt++;
 80025d6:	883b      	ldrh	r3, [r7, #0]
	return 0;
 80025d8:	2500      	movs	r5, #0
				ntp_retry_cnt++;
 80025da:	3301      	adds	r3, #1
 80025dc:	803b      	strh	r3, [r7, #0]
 80025de:	e7e8      	b.n	80025b2 <SNTP_run+0x82>
				if((ntp_retry_cnt % 0xFFF) == 0) //wait time
 80025e0:	ebc3 1203 	rsb	r2, r3, r3, lsl #4
 80025e4:	ebc3 3302 	rsb	r3, r3, r2, lsl #12
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	2b10      	cmp	r3, #16
 80025ec:	d8e1      	bhi.n	80025b2 <SNTP_run+0x82>
 80025ee:	e7ea      	b.n	80025c6 <SNTP_run+0x96>
			ntp_retry_cnt=0;
 80025f0:	8038      	strh	r0, [r7, #0]
			close(NTP_SOCKET);
 80025f2:	7830      	ldrb	r0, [r6, #0]
 80025f4:	f000 f816 	bl	8002624 <close>
 80025f8:	e7db      	b.n	80025b2 <SNTP_run+0x82>
		socket(NTP_SOCKET,Sn_MR_UDP,ntp_port,0);
 80025fa:	4603      	mov	r3, r0
 80025fc:	227b      	movs	r2, #123	; 0x7b
 80025fe:	2102      	movs	r1, #2
 8002600:	7830      	ldrb	r0, [r6, #0]
 8002602:	f000 f84d 	bl	80026a0 <socket>
		break;
 8002606:	e7d4      	b.n	80025b2 <SNTP_run+0x82>
	switch(getSn_SR(NTP_SOCKET))
 8002608:	4625      	mov	r5, r4
 800260a:	e7d2      	b.n	80025b2 <SNTP_run+0x82>
 800260c:	20000545 	.word	0x20000545
 8002610:	2000058c 	.word	0x2000058c
 8002614:	20000588 	.word	0x20000588
 8002618:	20000580 	.word	0x20000580
 800261c:	2000058e 	.word	0x2000058e
 8002620:	20000548 	.word	0x20000548

08002624 <close>:
   return (int8_t)sn;
}	   

int8_t close(uint8_t sn)
{
	CHECK_SOCKNUM();
 8002624:	2808      	cmp	r0, #8
{
 8002626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002628:	4604      	mov	r4, r0
	CHECK_SOCKNUM();
 800262a:	d82d      	bhi.n	8002688 <close+0x64>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 800262c:	0147      	lsls	r7, r0, #5
 800262e:	f107 0608 	add.w	r6, r7, #8
 8002632:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002636:	2110      	movs	r1, #16
 8002638:	4638      	mov	r0, r7
 800263a:	f7fe fb15 	bl	8000c68 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 800263e:	4638      	mov	r0, r7
 8002640:	f7fe fae4 	bl	8000c0c <WIZCHIP_READ>
 8002644:	4605      	mov	r5, r0
 8002646:	2800      	cmp	r0, #0
 8002648:	d1f9      	bne.n	800263e <close+0x1a>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 800264a:	211f      	movs	r1, #31
 800264c:	f506 7000 	add.w	r0, r6, #512	; 0x200
 8002650:	f7fe fb0a 	bl	8000c68 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8002654:	2301      	movs	r3, #1
 8002656:	40a3      	lsls	r3, r4
 8002658:	43db      	mvns	r3, r3
 800265a:	490d      	ldr	r1, [pc, #52]	; (8002690 <close+0x6c>)
 800265c:	b21b      	sxth	r3, r3
 800265e:	880a      	ldrh	r2, [r1, #0]
	//
	sock_is_sending &= ~(1<<sn);
	sock_remained_size[sn] = 0;
	sock_pack_info[sn] = 0;
	while(getSn_SR(sn) != SOCK_CLOSED);
 8002660:	f506 7640 	add.w	r6, r6, #768	; 0x300
	sock_io_mode &= ~(1<<sn);
 8002664:	401a      	ands	r2, r3
 8002666:	800a      	strh	r2, [r1, #0]
	sock_is_sending &= ~(1<<sn);
 8002668:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <close+0x70>)
 800266a:	8811      	ldrh	r1, [r2, #0]
 800266c:	400b      	ands	r3, r1
 800266e:	8013      	strh	r3, [r2, #0]
	sock_remained_size[sn] = 0;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <close+0x74>)
 8002672:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	sock_pack_info[sn] = 0;
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <close+0x78>)
 8002678:	551d      	strb	r5, [r3, r4]
	while(getSn_SR(sn) != SOCK_CLOSED);
 800267a:	4630      	mov	r0, r6
 800267c:	f7fe fac6 	bl	8000c0c <WIZCHIP_READ>
 8002680:	2800      	cmp	r0, #0
 8002682:	d1fa      	bne.n	800267a <close+0x56>
 8002684:	2001      	movs	r0, #1
	return SOCK_OK;
}
 8002686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECK_SOCKNUM();
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	e7fb      	b.n	8002686 <close+0x62>
 800268e:	bf00      	nop
 8002690:	200005c0 	.word	0x200005c0
 8002694:	200005c2 	.word	0x200005c2
 8002698:	200005cc 	.word	0x200005cc
 800269c:	200005c4 	.word	0x200005c4

080026a0 <socket>:
	CHECK_SOCKNUM();
 80026a0:	2808      	cmp	r0, #8
{
 80026a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80026a6:	4604      	mov	r4, r0
 80026a8:	4688      	mov	r8, r1
 80026aa:	4617      	mov	r7, r2
 80026ac:	461d      	mov	r5, r3
	CHECK_SOCKNUM();
 80026ae:	d87c      	bhi.n	80027aa <socket+0x10a>
	switch(protocol)
 80026b0:	2901      	cmp	r1, #1
 80026b2:	d005      	beq.n	80026c0 <socket+0x20>
 80026b4:	1e8b      	subs	r3, r1, #2
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d910      	bls.n	80026dc <socket+0x3c>
 80026ba:	f06f 0004 	mvn.w	r0, #4
 80026be:	e00a      	b.n	80026d6 <socket+0x36>
            getSIPR((uint8_t*)&taddr);
 80026c0:	2204      	movs	r2, #4
 80026c2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80026c6:	eb0d 0102 	add.w	r1, sp, r2
 80026ca:	f7fe faff 	bl	8000ccc <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 80026ce:	9b01      	ldr	r3, [sp, #4]
 80026d0:	b923      	cbnz	r3, 80026dc <socket+0x3c>
 80026d2:	f06f 0002 	mvn.w	r0, #2
}	   
 80026d6:	b002      	add	sp, #8
 80026d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 80026dc:	0768      	lsls	r0, r5, #29
 80026de:	d457      	bmi.n	8002790 <socket+0xf0>
	if(flag != 0)
 80026e0:	b12d      	cbz	r5, 80026ee <socket+0x4e>
   	switch(protocol)
 80026e2:	f1b8 0f01 	cmp.w	r8, #1
 80026e6:	d050      	beq.n	800278a <socket+0xea>
 80026e8:	f1b8 0f02 	cmp.w	r8, #2
 80026ec:	d053      	beq.n	8002796 <socket+0xf6>
	close(sn);
 80026ee:	4620      	mov	r0, r4
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80026f0:	0166      	lsls	r6, r4, #5
	close(sn);
 80026f2:	f7ff ff97 	bl	8002624 <close>
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 80026f6:	3608      	adds	r6, #8
 80026f8:	f025 010f 	bic.w	r1, r5, #15
 80026fc:	4630      	mov	r0, r6
 80026fe:	ea41 0108 	orr.w	r1, r1, r8
 8002702:	f7fe fab1 	bl	8000c68 <WIZCHIP_WRITE>
	if(!port)
 8002706:	b96f      	cbnz	r7, 8002724 <socket+0x84>
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002708:	f64f 71f0 	movw	r1, #65520	; 0xfff0
	   port = sock_any_port++;
 800270c:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <socket+0x110>)
 800270e:	8817      	ldrh	r7, [r2, #0]
 8002710:	1c7b      	adds	r3, r7, #1
 8002712:	b29b      	uxth	r3, r3
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002714:	428b      	cmp	r3, r1
 8002716:	bf05      	ittet	eq
 8002718:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
	   port = sock_any_port++;
 800271c:	f64f 77ef 	movweq	r7, #65519	; 0xffef
 8002720:	8013      	strhne	r3, [r2, #0]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002722:	8013      	strheq	r3, [r2, #0]
   setSn_PORT(sn,port);	
 8002724:	0a39      	lsrs	r1, r7, #8
 8002726:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800272a:	f7fe fa9d 	bl	8000c68 <WIZCHIP_WRITE>
 800272e:	b2f9      	uxtb	r1, r7
 8002730:	f506 60a0 	add.w	r0, r6, #1280	; 0x500
   setSn_CR(sn,Sn_CR_OPEN);
 8002734:	f506 7780 	add.w	r7, r6, #256	; 0x100
   setSn_PORT(sn,port);	
 8002738:	f7fe fa96 	bl	8000c68 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 800273c:	2101      	movs	r1, #1
 800273e:	4638      	mov	r0, r7
 8002740:	f7fe fa92 	bl	8000c68 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002744:	4638      	mov	r0, r7
 8002746:	f7fe fa61 	bl	8000c0c <WIZCHIP_READ>
 800274a:	2800      	cmp	r0, #0
 800274c:	d1fa      	bne.n	8002744 <socket+0xa4>
   sock_io_mode &= ~(1 <<sn);
 800274e:	2301      	movs	r3, #1
 8002750:	40a3      	lsls	r3, r4
 8002752:	43db      	mvns	r3, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002754:	4917      	ldr	r1, [pc, #92]	; (80027b4 <socket+0x114>)
   sock_io_mode &= ~(1 <<sn);
 8002756:	b21b      	sxth	r3, r3
 8002758:	880a      	ldrh	r2, [r1, #0]
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 800275a:	f005 0501 	and.w	r5, r5, #1
   sock_io_mode &= ~(1 <<sn);
 800275e:	401a      	ands	r2, r3
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002760:	40a5      	lsls	r5, r4
 8002762:	4315      	orrs	r5, r2
   sock_is_sending &= ~(1<<sn);
 8002764:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <socket+0x118>)
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8002766:	800d      	strh	r5, [r1, #0]
   sock_is_sending &= ~(1<<sn);
 8002768:	8811      	ldrh	r1, [r2, #0]
   while(getSn_SR(sn) == SOCK_CLOSED);
 800276a:	f506 7640 	add.w	r6, r6, #768	; 0x300
   sock_is_sending &= ~(1<<sn);
 800276e:	400b      	ands	r3, r1
 8002770:	8013      	strh	r3, [r2, #0]
   sock_remained_size[sn] = 0;
 8002772:	4b12      	ldr	r3, [pc, #72]	; (80027bc <socket+0x11c>)
 8002774:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
   sock_pack_info[sn] = PACK_COMPLETED;
 8002778:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <socket+0x120>)
 800277a:	5518      	strb	r0, [r3, r4]
   while(getSn_SR(sn) == SOCK_CLOSED);
 800277c:	4630      	mov	r0, r6
 800277e:	f7fe fa45 	bl	8000c0c <WIZCHIP_READ>
 8002782:	2800      	cmp	r0, #0
 8002784:	d0fa      	beq.n	800277c <socket+0xdc>
   return (int8_t)sn;
 8002786:	b260      	sxtb	r0, r4
 8002788:	e7a5      	b.n	80026d6 <socket+0x36>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 800278a:	f015 0f21 	tst.w	r5, #33	; 0x21
 800278e:	d1ae      	bne.n	80026ee <socket+0x4e>
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002790:	f06f 0005 	mvn.w	r0, #5
 8002794:	e79f      	b.n	80026d6 <socket+0x36>
   	      if(flag & SF_IGMP_VER2)
 8002796:	06a9      	lsls	r1, r5, #26
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002798:	b26b      	sxtb	r3, r5
   	      if(flag & SF_IGMP_VER2)
 800279a:	d501      	bpl.n	80027a0 <socket+0x100>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 800279c:	2b00      	cmp	r3, #0
 800279e:	daf7      	bge.n	8002790 <socket+0xf0>
      	      if(flag & SF_UNI_BLOCK)
 80027a0:	06ea      	lsls	r2, r5, #27
 80027a2:	d5a4      	bpl.n	80026ee <socket+0x4e>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	dba2      	blt.n	80026ee <socket+0x4e>
 80027a8:	e7f2      	b.n	8002790 <socket+0xf0>
	CHECK_SOCKNUM();
 80027aa:	f04f 30ff 	mov.w	r0, #4294967295
 80027ae:	e792      	b.n	80026d6 <socket+0x36>
 80027b0:	20000038 	.word	0x20000038
 80027b4:	200005c0 	.word	0x200005c0
 80027b8:	200005c2 	.word	0x200005c2
 80027bc:	200005cc 	.word	0x200005cc
 80027c0:	200005c4 	.word	0x200005c4

080027c4 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80027c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   uint8_t tmp = 0;
   uint16_t freesize = 0;
   uint32_t taddr;

   CHECK_SOCKNUM();
 80027c8:	2808      	cmp	r0, #8
{
 80027ca:	4606      	mov	r6, r0
 80027cc:	4688      	mov	r8, r1
 80027ce:	4614      	mov	r4, r2
 80027d0:	461f      	mov	r7, r3
 80027d2:	f8bd a028 	ldrh.w	sl, [sp, #40]	; 0x28
   CHECK_SOCKNUM();
 80027d6:	f200 8097 	bhi.w	8002908 <sendto+0x144>
   switch(getSn_MR(sn) & 0x0F)
 80027da:	0145      	lsls	r5, r0, #5
 80027dc:	3508      	adds	r5, #8
 80027de:	4628      	mov	r0, r5
 80027e0:	f7fe fa14 	bl	8000c0c <WIZCHIP_READ>
 80027e4:	f000 000f 	and.w	r0, r0, #15
 80027e8:	3802      	subs	r0, #2
 80027ea:	2802      	cmp	r0, #2
 80027ec:	f200 808f 	bhi.w	800290e <sendto+0x14a>
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 80027f0:	2c00      	cmp	r4, #0
 80027f2:	f000 808f 	beq.w	8002914 <sendto+0x150>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 80027f6:	783b      	ldrb	r3, [r7, #0]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80027f8:	787a      	ldrb	r2, [r7, #1]
 80027fa:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80027fe:	78bb      	ldrb	r3, [r7, #2]
 8002800:	eb03 2202 	add.w	r2, r3, r2, lsl #8
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 800280a:	2b00      	cmp	r3, #0
 800280c:	d03c      	beq.n	8002888 <sendto+0xc4>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 800280e:	f1ba 0f00 	cmp.w	sl, #0
 8002812:	d041      	beq.n	8002898 <sendto+0xd4>
   tmp = getSn_SR(sn);
 8002814:	f505 7940 	add.w	r9, r5, #768	; 0x300
 8002818:	4648      	mov	r0, r9
 800281a:	f7fe f9f7 	bl	8000c0c <WIZCHIP_READ>
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 800281e:	2842      	cmp	r0, #66	; 0x42
 8002820:	d142      	bne.n	80028a8 <sendto+0xe4>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 8002822:	2204      	movs	r2, #4
 8002824:	4639      	mov	r1, r7
 8002826:	f505 6040 	add.w	r0, r5, #3072	; 0xc00
 800282a:	f7fe fa89 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 800282e:	ea4f 211a 	mov.w	r1, sl, lsr #8
 8002832:	f505 5080 	add.w	r0, r5, #4096	; 0x1000
 8002836:	f7fe fa17 	bl	8000c68 <WIZCHIP_WRITE>
 800283a:	fa5f f18a 	uxtb.w	r1, sl
 800283e:	f505 5088 	add.w	r0, r5, #4352	; 0x1100
 8002842:	f7fe fa11 	bl	8000c68 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8002846:	f505 50f8 	add.w	r0, r5, #7936	; 0x1f00
 800284a:	f7fe f9df 	bl	8000c0c <WIZCHIP_READ>
 800284e:	0280      	lsls	r0, r0, #10
 8002850:	b280      	uxth	r0, r0
 8002852:	f04f 0a01 	mov.w	sl, #1
 8002856:	4284      	cmp	r4, r0
 8002858:	bf28      	it	cs
 800285a:	4604      	movcs	r4, r0
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800285c:	f8df b0c0 	ldr.w	fp, [pc, #192]	; 8002920 <sendto+0x15c>
 8002860:	fa0a fa06 	lsl.w	sl, sl, r6
      freesize = getSn_TX_FSR(sn);
 8002864:	4630      	mov	r0, r6
 8002866:	f7fe faa5 	bl	8000db4 <getSn_TX_FSR>
 800286a:	4607      	mov	r7, r0
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800286c:	4648      	mov	r0, r9
 800286e:	f7fe f9cd 	bl	8000c0c <WIZCHIP_READ>
 8002872:	2800      	cmp	r0, #0
 8002874:	d051      	beq.n	800291a <sendto+0x156>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8002876:	f8bb 3000 	ldrh.w	r3, [fp]
 800287a:	ea13 0f0a 	tst.w	r3, sl
 800287e:	d01a      	beq.n	80028b6 <sendto+0xf2>
 8002880:	42bc      	cmp	r4, r7
 8002882:	d91a      	bls.n	80028ba <sendto+0xf6>
 8002884:	2000      	movs	r0, #0
 8002886:	e034      	b.n	80028f2 <sendto+0x12e>
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8002888:	4628      	mov	r0, r5
 800288a:	f7fe f9bf 	bl	8000c0c <WIZCHIP_READ>
 800288e:	0740      	lsls	r0, r0, #29
 8002890:	d4bd      	bmi.n	800280e <sendto+0x4a>
 8002892:	f06f 000b 	mvn.w	r0, #11
 8002896:	e02c      	b.n	80028f2 <sendto+0x12e>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8002898:	4628      	mov	r0, r5
 800289a:	f7fe f9b7 	bl	8000c0c <WIZCHIP_READ>
 800289e:	0741      	lsls	r1, r0, #29
 80028a0:	d4b8      	bmi.n	8002814 <sendto+0x50>
 80028a2:	f06f 000a 	mvn.w	r0, #10
 80028a6:	e024      	b.n	80028f2 <sendto+0x12e>
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80028a8:	f000 00ef 	and.w	r0, r0, #239	; 0xef
 80028ac:	2822      	cmp	r0, #34	; 0x22
 80028ae:	d0b8      	beq.n	8002822 <sendto+0x5e>
 80028b0:	f06f 0006 	mvn.w	r0, #6
 80028b4:	e01d      	b.n	80028f2 <sendto+0x12e>
      if(len <= freesize) break;
 80028b6:	42bc      	cmp	r4, r7
 80028b8:	d8d4      	bhi.n	8002864 <sendto+0xa0>
   };
	wiz_send_data(sn, buf, len);
 80028ba:	4630      	mov	r0, r6
 80028bc:	4641      	mov	r1, r8
 80028be:	4622      	mov	r2, r4
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80028c0:	f505 7680 	add.w	r6, r5, #256	; 0x100
	wiz_send_data(sn, buf, len);
 80028c4:	f7fe fab8 	bl	8000e38 <wiz_send_data>
	setSn_CR(sn,Sn_CR_SEND);
 80028c8:	2120      	movs	r1, #32
 80028ca:	4630      	mov	r0, r6
 80028cc:	f7fe f9cc 	bl	8000c68 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80028d0:	4630      	mov	r0, r6
 80028d2:	f7fe f99b 	bl	8000c0c <WIZCHIP_READ>
 80028d6:	2800      	cmp	r0, #0
 80028d8:	d1fa      	bne.n	80028d0 <sendto+0x10c>
   while(1)
   {
      tmp = getSn_IR(sn);
 80028da:	f505 7500 	add.w	r5, r5, #512	; 0x200
 80028de:	4628      	mov	r0, r5
 80028e0:	f7fe f994 	bl	8000c0c <WIZCHIP_READ>
      if(tmp & Sn_IR_SENDOK)
 80028e4:	06c2      	lsls	r2, r0, #27
 80028e6:	d506      	bpl.n	80028f6 <sendto+0x132>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80028e8:	4628      	mov	r0, r5
 80028ea:	2110      	movs	r1, #16
 80028ec:	f7fe f9bc 	bl	8000c68 <WIZCHIP_WRITE>
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80028f0:	4620      	mov	r0, r4
}
 80028f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if(tmp & Sn_IR_TIMEOUT)
 80028f6:	0703      	lsls	r3, r0, #28
 80028f8:	d5f1      	bpl.n	80028de <sendto+0x11a>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 80028fa:	4628      	mov	r0, r5
 80028fc:	2108      	movs	r1, #8
 80028fe:	f7fe f9b3 	bl	8000c68 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8002902:	f06f 000c 	mvn.w	r0, #12
 8002906:	e7f4      	b.n	80028f2 <sendto+0x12e>
   CHECK_SOCKNUM();
 8002908:	f04f 30ff 	mov.w	r0, #4294967295
 800290c:	e7f1      	b.n	80028f2 <sendto+0x12e>
         return SOCKERR_SOCKMODE;
 800290e:	f06f 0004 	mvn.w	r0, #4
 8002912:	e7ee      	b.n	80028f2 <sendto+0x12e>
   CHECK_SOCKDATA();
 8002914:	f06f 000d 	mvn.w	r0, #13
 8002918:	e7eb      	b.n	80028f2 <sendto+0x12e>
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 800291a:	f06f 0003 	mvn.w	r0, #3
 800291e:	e7e8      	b.n	80028f2 <sendto+0x12e>
 8002920:	200005c0 	.word	0x200005c0

08002924 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8002924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;

   CHECK_SOCKNUM();
 8002928:	2808      	cmp	r0, #8
{
 800292a:	4604      	mov	r4, r0
 800292c:	468a      	mov	sl, r1
 800292e:	4691      	mov	r9, r2
 8002930:	4698      	mov	r8, r3
 8002932:	b085      	sub	sp, #20
   CHECK_SOCKNUM();
 8002934:	f200 80e8 	bhi.w	8002b08 <recvfrom+0x1e4>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 8002938:	0146      	lsls	r6, r0, #5
 800293a:	3608      	adds	r6, #8
 800293c:	4630      	mov	r0, r6
 800293e:	f7fe f965 	bl	8000c0c <WIZCHIP_READ>
 8002942:	f000 020f 	and.w	r2, r0, #15
 8002946:	3a02      	subs	r2, #2
 8002948:	2a02      	cmp	r2, #2
 800294a:	4683      	mov	fp, r0
 800294c:	f200 80df 	bhi.w	8002b0e <recvfrom+0x1ea>
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
   }
   CHECK_SOCKDATA();
 8002950:	f1b9 0f00 	cmp.w	r9, #0
 8002954:	f000 80de 	beq.w	8002b14 <recvfrom+0x1f0>
   if(sock_remained_size[sn] == 0)
 8002958:	4f71      	ldr	r7, [pc, #452]	; (8002b20 <recvfrom+0x1fc>)
 800295a:	f837 2014 	ldrh.w	r2, [r7, r4, lsl #1]
 800295e:	2a00      	cmp	r2, #0
 8002960:	d17a      	bne.n	8002a58 <recvfrom+0x134>
 8002962:	2201      	movs	r2, #1
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002964:	f506 7340 	add.w	r3, r6, #768	; 0x300
 8002968:	40a2      	lsls	r2, r4
 800296a:	9300      	str	r3, [sp, #0]
         pack_len = getSn_RX_RSR(sn);
 800296c:	4620      	mov	r0, r4
 800296e:	9201      	str	r2, [sp, #4]
 8002970:	f7fe fa41 	bl	8000df6 <getSn_RX_RSR>
 8002974:	4605      	mov	r5, r0
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002976:	9800      	ldr	r0, [sp, #0]
 8002978:	f7fe f948 	bl	8000c0c <WIZCHIP_READ>
 800297c:	2800      	cmp	r0, #0
 800297e:	f000 80cc 	beq.w	8002b1a <recvfrom+0x1f6>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8002982:	4968      	ldr	r1, [pc, #416]	; (8002b24 <recvfrom+0x200>)
 8002984:	9a01      	ldr	r2, [sp, #4]
 8002986:	8808      	ldrh	r0, [r1, #0]
 8002988:	4210      	tst	r0, r2
 800298a:	d002      	beq.n	8002992 <recvfrom+0x6e>
 800298c:	b91d      	cbnz	r5, 8002996 <recvfrom+0x72>
 800298e:	4628      	mov	r0, r5
 8002990:	e089      	b.n	8002aa6 <recvfrom+0x182>
         if(pack_len != 0) break;
 8002992:	2d00      	cmp	r5, #0
 8002994:	d0ea      	beq.n	800296c <recvfrom+0x48>
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8002996:	f00b 0007 	and.w	r0, fp, #7
 800299a:	2803      	cmp	r0, #3
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
	      {
   			wiz_recv_data(sn, head, 8);
   			setSn_CR(sn,Sn_CR_RECV);
 800299c:	f506 7680 	add.w	r6, r6, #256	; 0x100
	switch (mr & 0x07)
 80029a0:	f000 8084 	beq.w	8002aac <recvfrom+0x188>
 80029a4:	2804      	cmp	r0, #4
 80029a6:	d059      	beq.n	8002a5c <recvfrom+0x138>
 80029a8:	2802      	cmp	r0, #2
 80029aa:	f040 80a6 	bne.w	8002afa <recvfrom+0x1d6>
	      if(sock_remained_size[sn] == 0)
 80029ae:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 80029b2:	bb8b      	cbnz	r3, 8002a18 <recvfrom+0xf4>
   			wiz_recv_data(sn, head, 8);
 80029b4:	2208      	movs	r2, #8
 80029b6:	4620      	mov	r0, r4
 80029b8:	eb0d 0102 	add.w	r1, sp, r2
 80029bc:	f7fe fa69 	bl	8000e92 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80029c0:	2140      	movs	r1, #64	; 0x40
 80029c2:	4630      	mov	r0, r6
 80029c4:	f7fe f950 	bl	8000c68 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 80029c8:	4630      	mov	r0, r6
 80029ca:	f7fe f91f 	bl	8000c0c <WIZCHIP_READ>
 80029ce:	2800      	cmp	r0, #0
 80029d0:	d1fa      	bne.n	80029c8 <recvfrom+0xa4>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80029d2:	f89d 3008 	ldrb.w	r3, [sp, #8]
      			addr[1] = head[1];
      			addr[2] = head[2];
      			addr[3] = head[3];
      			*port = head[4];
 80029d6:	f89d 200c 	ldrb.w	r2, [sp, #12]
               addr[0] = head[0];
 80029da:	f888 3000 	strb.w	r3, [r8]
      			addr[1] = head[1];
 80029de:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80029e2:	f888 3001 	strb.w	r3, [r8, #1]
      			addr[2] = head[2];
 80029e6:	f89d 300a 	ldrb.w	r3, [sp, #10]
 80029ea:	f888 3002 	strb.w	r3, [r8, #2]
      			addr[3] = head[3];
 80029ee:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80029f2:	f888 3003 	strb.w	r3, [r8, #3]
      			*port = (*port << 8) + head[5];
 80029f6:	f89d 300d 	ldrb.w	r3, [sp, #13]
 80029fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80029fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a00:	8013      	strh	r3, [r2, #0]
      			sock_remained_size[sn] = head[6];
 8002a02:	f89d 200e 	ldrb.w	r2, [sp, #14]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 8002a06:	f89d 300f 	ldrb.w	r3, [sp, #15]
   			addr[2] = head[2];
   			addr[3] = head[3];
   			sock_remained_size[sn] = head[4];
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8002a0a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002a0e:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8002a12:	2280      	movs	r2, #128	; 0x80
 8002a14:	4b44      	ldr	r3, [pc, #272]	; (8002b28 <recvfrom+0x204>)
 8002a16:	551a      	strb	r2, [r3, r4]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8002a18:	f837 5014 	ldrh.w	r5, [r7, r4, lsl #1]
			else pack_len = sock_remained_size[sn];
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8002a1c:	4651      	mov	r1, sl
 8002a1e:	454d      	cmp	r5, r9
 8002a20:	bf28      	it	cs
 8002a22:	464d      	movcs	r5, r9
 8002a24:	4620      	mov	r0, r4
 8002a26:	462a      	mov	r2, r5
 8002a28:	f7fe fa33 	bl	8000e92 <wiz_recv_data>
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
         sock_remained_size[sn] = pack_len;
         break;
   }
	setSn_CR(sn,Sn_CR_RECV);
 8002a2c:	2140      	movs	r1, #64	; 0x40
 8002a2e:	4630      	mov	r0, r6
 8002a30:	f7fe f91a 	bl	8000c68 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8002a34:	4630      	mov	r0, r6
 8002a36:	f7fe f8e9 	bl	8000c0c <WIZCHIP_READ>
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	d1fa      	bne.n	8002a34 <recvfrom+0x110>
	sock_remained_size[sn] -= pack_len;
 8002a3e:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8002a42:	4a39      	ldr	r2, [pc, #228]	; (8002b28 <recvfrom+0x204>)
 8002a44:	1b5b      	subs	r3, r3, r5
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8002a4c:	b113      	cbz	r3, 8002a54 <recvfrom+0x130>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8002a4e:	5d10      	ldrb	r0, [r2, r4]
 8002a50:	f040 0001 	orr.w	r0, r0, #1
 8002a54:	5510      	strb	r0, [r2, r4]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8002a56:	e79a      	b.n	800298e <recvfrom+0x6a>
	uint16_t pack_len=0;
 8002a58:	2500      	movs	r5, #0
 8002a5a:	e79c      	b.n	8002996 <recvfrom+0x72>
	      if(sock_remained_size[sn] == 0)
 8002a5c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1d9      	bne.n	8002a18 <recvfrom+0xf4>
   			wiz_recv_data(sn, head, 2);
 8002a64:	4620      	mov	r0, r4
 8002a66:	a902      	add	r1, sp, #8
 8002a68:	2202      	movs	r2, #2
 8002a6a:	f7fe fa12 	bl	8000e92 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002a6e:	2140      	movs	r1, #64	; 0x40
 8002a70:	4630      	mov	r0, r6
 8002a72:	f7fe f8f9 	bl	8000c68 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002a76:	4630      	mov	r0, r6
 8002a78:	f7fe f8c8 	bl	8000c0c <WIZCHIP_READ>
 8002a7c:	2800      	cmp	r0, #0
 8002a7e:	d1fa      	bne.n	8002a76 <recvfrom+0x152>
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002a80:	f89d 3009 	ldrb.w	r3, [sp, #9]
    			sock_remained_size[sn] = head[0];
 8002a84:	f89d 2008 	ldrb.w	r2, [sp, #8]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002a88:	3b02      	subs	r3, #2
 8002a8a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   			if(sock_remained_size[sn] > 1514) 
 8002a8e:	f240 52ea 	movw	r2, #1514	; 0x5ea
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002a92:	b29b      	uxth	r3, r3
   			if(sock_remained_size[sn] > 1514) 
 8002a94:	4293      	cmp	r3, r2
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 8002a96:	f827 3014 	strh.w	r3, [r7, r4, lsl #1]
   			if(sock_remained_size[sn] > 1514) 
 8002a9a:	d9ba      	bls.n	8002a12 <recvfrom+0xee>
   			   close(sn);
 8002a9c:	4620      	mov	r0, r4
 8002a9e:	f7ff fdc1 	bl	8002624 <close>
   			   return SOCKFATAL_PACKLEN;
 8002aa2:	f46f 707a 	mvn.w	r0, #1000	; 0x3e8
}
 8002aa6:	b005      	add	sp, #20
 8002aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		   if(sock_remained_size[sn] == 0)
 8002aac:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d1b1      	bne.n	8002a18 <recvfrom+0xf4>
   			wiz_recv_data(sn, head, 6);
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	a902      	add	r1, sp, #8
 8002ab8:	2206      	movs	r2, #6
 8002aba:	f7fe f9ea 	bl	8000e92 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8002abe:	2140      	movs	r1, #64	; 0x40
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	f7fe f8d1 	bl	8000c68 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8002ac6:	4630      	mov	r0, r6
 8002ac8:	f7fe f8a0 	bl	8000c0c <WIZCHIP_READ>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d1fa      	bne.n	8002ac6 <recvfrom+0x1a2>
   			addr[0] = head[0];
 8002ad0:	f89d 3008 	ldrb.w	r3, [sp, #8]
   			sock_remained_size[sn] = head[4];
 8002ad4:	f89d 200c 	ldrb.w	r2, [sp, #12]
   			addr[0] = head[0];
 8002ad8:	f888 3000 	strb.w	r3, [r8]
   			addr[1] = head[1];
 8002adc:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8002ae0:	f888 3001 	strb.w	r3, [r8, #1]
   			addr[2] = head[2];
 8002ae4:	f89d 300a 	ldrb.w	r3, [sp, #10]
 8002ae8:	f888 3002 	strb.w	r3, [r8, #2]
   			addr[3] = head[3];
 8002aec:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8002af0:	f888 3003 	strb.w	r3, [r8, #3]
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8002af4:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8002af8:	e787      	b.n	8002a0a <recvfrom+0xe6>
         wiz_recv_ignore(sn, pack_len); // data copy.
 8002afa:	4629      	mov	r1, r5
 8002afc:	4620      	mov	r0, r4
 8002afe:	f7fe f9f5 	bl	8000eec <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8002b02:	f827 5014 	strh.w	r5, [r7, r4, lsl #1]
         break;
 8002b06:	e791      	b.n	8002a2c <recvfrom+0x108>
   CHECK_SOCKNUM();
 8002b08:	f04f 30ff 	mov.w	r0, #4294967295
 8002b0c:	e7cb      	b.n	8002aa6 <recvfrom+0x182>
         return SOCKERR_SOCKMODE;
 8002b0e:	f06f 0004 	mvn.w	r0, #4
 8002b12:	e7c8      	b.n	8002aa6 <recvfrom+0x182>
   CHECK_SOCKDATA();
 8002b14:	f06f 000d 	mvn.w	r0, #13
 8002b18:	e7c5      	b.n	8002aa6 <recvfrom+0x182>
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8002b1a:	f06f 0003 	mvn.w	r0, #3
 8002b1e:	e7c2      	b.n	8002aa6 <recvfrom+0x182>
 8002b20:	200005cc 	.word	0x200005cc
 8002b24:	200005c0 	.word	0x200005c0
 8002b28:	200005c4 	.word	0x200005c4

08002b2c <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8002b2c:	4770      	bx	lr

08002b2e <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8002b2e:	7800      	ldrb	r0, [r0, #0]
 8002b30:	4770      	bx	lr

08002b32 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8002b32:	7001      	strb	r1, [r0, #0]
 8002b34:	4770      	bx	lr

08002b36 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8002b36:	2000      	movs	r0, #0
 8002b38:	4770      	bx	lr

08002b3a <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8002b3a:	4770      	bx	lr

08002b3c <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8002b3c:	4770      	bx	lr

08002b3e <wizchip_spi_writeburst>:
 8002b3e:	4770      	bx	lr

08002b40 <wizchip_cris_exit>:
 8002b40:	4770      	bx	lr

08002b42 <wizchip_cs_select>:
 8002b42:	4770      	bx	lr

08002b44 <wizchip_cs_deselect>:
 8002b44:	4770      	bx	lr
	...

08002b48 <reg_wizchip_cs_cbfunc>:
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
   if(!cs_sel || !cs_desel)
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <reg_wizchip_cs_cbfunc+0x18>)
 8002b4a:	b100      	cbz	r0, 8002b4e <reg_wizchip_cs_cbfunc+0x6>
 8002b4c:	b921      	cbnz	r1, 8002b58 <reg_wizchip_cs_cbfunc+0x10>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8002b4e:	4a05      	ldr	r2, [pc, #20]	; (8002b64 <reg_wizchip_cs_cbfunc+0x1c>)
 8002b50:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8002b52:	4a05      	ldr	r2, [pc, #20]	; (8002b68 <reg_wizchip_cs_cbfunc+0x20>)
 8002b54:	619a      	str	r2, [r3, #24]
 8002b56:	4770      	bx	lr
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
      WIZCHIP.CS._deselect = cs_desel;
 8002b58:	e9c3 0105 	strd	r0, r1, [r3, #20]
   }
}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	2000003c 	.word	0x2000003c
 8002b64:	08002b43 	.word	0x08002b43
 8002b68:	08002b45 	.word	0x08002b45

08002b6c <reg_wizchip_spi_cbfunc>:
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <reg_wizchip_spi_cbfunc+0x20>)
 8002b6e:	881a      	ldrh	r2, [r3, #0]
 8002b70:	0592      	lsls	r2, r2, #22
 8002b72:	d400      	bmi.n	8002b76 <reg_wizchip_spi_cbfunc+0xa>
 8002b74:	e7fe      	b.n	8002b74 <reg_wizchip_spi_cbfunc+0x8>
   
   if(!spi_rb || !spi_wb)
 8002b76:	b100      	cbz	r0, 8002b7a <reg_wizchip_spi_cbfunc+0xe>
 8002b78:	b921      	cbnz	r1, 8002b84 <reg_wizchip_spi_cbfunc+0x18>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8002b7a:	4a05      	ldr	r2, [pc, #20]	; (8002b90 <reg_wizchip_spi_cbfunc+0x24>)
 8002b7c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8002b7e:	4a05      	ldr	r2, [pc, #20]	; (8002b94 <reg_wizchip_spi_cbfunc+0x28>)
 8002b80:	621a      	str	r2, [r3, #32]
 8002b82:	4770      	bx	lr
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8002b84:	e9c3 0107 	strd	r0, r1, [r3, #28]
   }
}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	2000003c 	.word	0x2000003c
 8002b90:	08002b37 	.word	0x08002b37
 8002b94:	08002b3b 	.word	0x08002b3b

08002b98 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8002b98:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <reg_wizchip_spiburst_cbfunc+0x20>)
 8002b9a:	881a      	ldrh	r2, [r3, #0]
 8002b9c:	0592      	lsls	r2, r2, #22
 8002b9e:	d400      	bmi.n	8002ba2 <reg_wizchip_spiburst_cbfunc+0xa>
 8002ba0:	e7fe      	b.n	8002ba0 <reg_wizchip_spiburst_cbfunc+0x8>

   if(!spi_rb || !spi_wb)
 8002ba2:	b100      	cbz	r0, 8002ba6 <reg_wizchip_spiburst_cbfunc+0xe>
 8002ba4:	b921      	cbnz	r1, 8002bb0 <reg_wizchip_spiburst_cbfunc+0x18>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <reg_wizchip_spiburst_cbfunc+0x24>)
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <reg_wizchip_spiburst_cbfunc+0x28>)
 8002bac:	629a      	str	r2, [r3, #40]	; 0x28
 8002bae:	4770      	bx	lr
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8002bb0:	e9c3 0109 	strd	r0, r1, [r3, #36]	; 0x24
   }
}
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	2000003c 	.word	0x2000003c
 8002bbc:	08002b3d 	.word	0x08002b3d
 8002bc0:	08002b3f 	.word	0x08002b3f

08002bc4 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8002bc4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8002bc6:	2206      	movs	r2, #6
 8002bc8:	a904      	add	r1, sp, #16
 8002bca:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002bce:	f7fe f87d 	bl	8000ccc <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8002bd2:	2204      	movs	r2, #4
 8002bd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002bd8:	eb0d 0102 	add.w	r1, sp, r2
 8002bdc:	f7fe f876 	bl	8000ccc <WIZCHIP_READ_BUF>
 8002be0:	a902      	add	r1, sp, #8
 8002be2:	2204      	movs	r2, #4
 8002be4:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002be8:	f7fe f870 	bl	8000ccc <WIZCHIP_READ_BUF>
 8002bec:	2204      	movs	r2, #4
 8002bee:	a903      	add	r1, sp, #12
 8002bf0:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002bf4:	f7fe f86a 	bl	8000ccc <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8002bf8:	2180      	movs	r1, #128	; 0x80
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7fe f834 	bl	8000c68 <WIZCHIP_WRITE>
   getMR(); // for delay
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fe f803 	bl	8000c0c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8002c06:	a904      	add	r1, sp, #16
 8002c08:	2206      	movs	r2, #6
 8002c0a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002c0e:	f7fe f897 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8002c12:	2204      	movs	r2, #4
 8002c14:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002c18:	eb0d 0102 	add.w	r1, sp, r2
 8002c1c:	f7fe f890 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8002c20:	a902      	add	r1, sp, #8
 8002c22:	2204      	movs	r2, #4
 8002c24:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002c28:	f7fe f88a 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002c32:	a903      	add	r1, sp, #12
 8002c34:	f7fe f884 	bl	8000d40 <WIZCHIP_WRITE_BUF>
}
 8002c38:	b007      	add	sp, #28
 8002c3a:	f85d fb04 	ldr.w	pc, [sp], #4

08002c3e <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8002c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c40:	4605      	mov	r5, r0
 8002c42:	460c      	mov	r4, r1
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
   wizchip_sw_reset();
 8002c44:	f7ff ffbe 	bl	8002bc4 <wizchip_sw_reset>
   if(txsize)
 8002c48:	b1bd      	cbz	r5, 8002c7a <wizchip_init+0x3c>
 8002c4a:	1e6e      	subs	r6, r5, #1
 8002c4c:	4632      	mov	r2, r6
   {
      tmp = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	3507      	adds	r5, #7
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
		{
			tmp += txsize[i];
 8002c52:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002c56:	440b      	add	r3, r1
 8002c58:	b25b      	sxtb	r3, r3

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	dc29      	bgt.n	8002cb2 <wizchip_init+0x74>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c5e:	42aa      	cmp	r2, r5
 8002c60:	d1f7      	bne.n	8002c52 <wizchip_init+0x14>
 8002c62:	f641 7508 	movw	r5, #7944	; 0x1f08
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c66:	f242 0708 	movw	r7, #8200	; 0x2008
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c70:	3520      	adds	r5, #32
			setSn_TXBUF_SIZE(i, txsize[i]);
 8002c72:	f7fd fff9 	bl	8000c68 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c76:	42bd      	cmp	r5, r7
 8002c78:	d1f7      	bne.n	8002c6a <wizchip_init+0x2c>
#endif
		}	
   }

   if(rxsize)
 8002c7a:	b90c      	cbnz	r4, 8002c80 <wizchip_init+0x42>
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
#endif
		}
   }
   return 0;
 8002c7c:	2000      	movs	r0, #0
}
 8002c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c80:	1e65      	subs	r5, r4, #1
   if(rxsize)
 8002c82:	462a      	mov	r2, r5
      tmp = 0;
 8002c84:	2300      	movs	r3, #0
 8002c86:	3407      	adds	r4, #7
			tmp += rxsize[i];
 8002c88:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8002c8c:	440b      	add	r3, r1
 8002c8e:	b25b      	sxtb	r3, r3
			if(tmp > 16) return -1;
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	dc0e      	bgt.n	8002cb2 <wizchip_init+0x74>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c94:	4294      	cmp	r4, r2
 8002c96:	d1f7      	bne.n	8002c88 <wizchip_init+0x4a>
 8002c98:	f641 6408 	movw	r4, #7688	; 0x1e08
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002c9c:	f641 7608 	movw	r6, #7944	; 0x1f08
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002ca0:	4620      	mov	r0, r4
 8002ca2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002ca6:	3420      	adds	r4, #32
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8002ca8:	f7fd ffde 	bl	8000c68 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8002cac:	42b4      	cmp	r4, r6
 8002cae:	d1f7      	bne.n	8002ca0 <wizchip_init+0x62>
 8002cb0:	e7e4      	b.n	8002c7c <wizchip_init+0x3e>
			if(tmp > 16) return -1;
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8002cb6:	e7e2      	b.n	8002c7e <wizchip_init+0x40>

08002cb8 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8002cb8:	b538      	push	{r3, r4, r5, lr}
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8002cba:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8002cbe:	0a05      	lsrs	r5, r0, #8
   setIR(ir);
 8002cc0:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002cc4:	f7fd ffd0 	bl	8000c68 <WIZCHIP_WRITE>
 8002cc8:	2400      	movs	r4, #0
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8002cca:	fa45 f304 	asr.w	r3, r5, r4
 8002cce:	07db      	lsls	r3, r3, #31
 8002cd0:	d505      	bpl.n	8002cde <wizchip_clrinterrupt+0x26>
 8002cd2:	0160      	lsls	r0, r4, #5
 8002cd4:	211f      	movs	r1, #31
 8002cd6:	f500 7002 	add.w	r0, r0, #520	; 0x208
 8002cda:	f7fd ffc5 	bl	8000c68 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8002cde:	3401      	adds	r4, #1
 8002ce0:	2c08      	cmp	r4, #8
 8002ce2:	d1f2      	bne.n	8002cca <wizchip_clrinterrupt+0x12>
   }

#endif   
}
 8002ce4:	bd38      	pop	{r3, r4, r5, pc}

08002ce6 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8002ce6:	b510      	push	{r4, lr}
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8002ce8:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8002cec:	f7fd ff8e 	bl	8000c0c <WIZCHIP_READ>
 8002cf0:	4604      	mov	r4, r0
   sir = getSIR();
 8002cf2:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8002cf6:	f7fd ff89 	bl	8000c0c <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
  ret = (ret << 8) + ir;
 8002cfa:	0203      	lsls	r3, r0, #8
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	f004 00f0 	and.w	r0, r4, #240	; 0xf0
 8002d02:	4418      	add	r0, r3
  return (intr_kind)ret;
 8002d04:	b280      	uxth	r0, r0
}
 8002d06:	bd10      	pop	{r4, pc}

08002d08 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8002d08:	b510      	push	{r4, lr}
 8002d0a:	4604      	mov	r4, r0
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8002d0c:	b2c1      	uxtb	r1, r0
 8002d0e:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002d12:	f7fd ffa9 	bl	8000c68 <WIZCHIP_WRITE>
   setSIMR(simr);
 8002d16:	0a21      	lsrs	r1, r4, #8
 8002d18:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
#endif   
}
 8002d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setSIMR(simr);
 8002d20:	f7fd bfa2 	b.w	8000c68 <WIZCHIP_WRITE>

08002d24 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8002d24:	b510      	push	{r4, lr}
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8002d26:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8002d2a:	f7fd ff6f 	bl	8000c0c <WIZCHIP_READ>
 8002d2e:	4604      	mov	r4, r0
   simr = getSIMR();
 8002d30:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8002d34:	f7fd ff6a 	bl	8000c0c <WIZCHIP_READ>
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
  ret = (ret << 8) + imr;
 8002d38:	eb04 2000 	add.w	r0, r4, r0, lsl #8
  return (intr_kind)ret;
}
 8002d3c:	b280      	uxth	r0, r0
 8002d3e:	bd10      	pop	{r4, pc}

08002d40 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8002d40:	b508      	push	{r3, lr}
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8002d42:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d46:	f7fd ff61 	bl	8000c0c <WIZCHIP_READ>

#else
   tmp = -1;
#endif
   return tmp;
}
 8002d4a:	f000 0001 	and.w	r0, r0, #1
 8002d4e:	bd08      	pop	{r3, pc}

08002d50 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8002d50:	b508      	push	{r3, lr}
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8002d52:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d56:	f7fd ff59 	bl	8000c0c <WIZCHIP_READ>
 8002d5a:	f000 0038 	and.w	r0, r0, #56	; 0x38
         tmp = PHY_POWER_NORM;
   #else
      tmp = -1;
   #endif
   return tmp;
}
 8002d5e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8002d62:	4258      	negs	r0, r3
 8002d64:	4158      	adcs	r0, r3
 8002d66:	bd08      	pop	{r3, pc}

08002d68 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8002d68:	b508      	push	{r3, lr}
   uint8_t tmp = getPHYCFGR();
 8002d6a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d6e:	f7fd ff4d 	bl	8000c0c <WIZCHIP_READ>
   tmp &= PHYCFGR_RST;
   setPHYCFGR(tmp);
 8002d72:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 8002d76:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d7a:	f7fd ff75 	bl	8000c68 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8002d7e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d82:	f7fd ff43 	bl	8000c0c <WIZCHIP_READ>
   tmp |= ~PHYCFGR_RST;
   setPHYCFGR(tmp);
}
 8002d86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   tmp |= ~PHYCFGR_RST;
 8002d8a:	f060 017f 	orn	r1, r0, #127	; 0x7f
   setPHYCFGR(tmp);
 8002d8e:	b2c9      	uxtb	r1, r1
 8002d90:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002d94:	f7fd bf68 	b.w	8000c68 <WIZCHIP_WRITE>

08002d98 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8002d98:	b508      	push	{r3, lr}
   uint8_t tmp = 0;
   if(phyconf->by == PHY_CONFBY_SW)
 8002d9a:	7803      	ldrb	r3, [r0, #0]
      tmp |= PHYCFGR_OPMD;
   else
      tmp &= ~PHYCFGR_OPMD;
 8002d9c:	2b01      	cmp	r3, #1
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002d9e:	7843      	ldrb	r3, [r0, #1]
      tmp &= ~PHYCFGR_OPMD;
 8002da0:	bf0c      	ite	eq
 8002da2:	2140      	moveq	r1, #64	; 0x40
 8002da4:	2100      	movne	r1, #0
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d109      	bne.n	8002dbe <wizphy_setphyconf+0x26>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002daa:	f041 0138 	orr.w	r1, r1, #56	; 0x38
            tmp |= PHYCFGR_OPMDC_100H;
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8002dae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002db2:	f7fd ff59 	bl	8000c68 <WIZCHIP_WRITE>
   wizphy_reset();
}
 8002db6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   wizphy_reset();
 8002dba:	f7ff bfd5 	b.w	8002d68 <wizphy_reset>
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002dbe:	78c2      	ldrb	r2, [r0, #3]
         if(phyconf->speed == PHY_SPEED_100)
 8002dc0:	7883      	ldrb	r3, [r0, #2]
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8002dc2:	2a01      	cmp	r2, #1
 8002dc4:	d106      	bne.n	8002dd4 <wizphy_setphyconf+0x3c>
         if(phyconf->speed == PHY_SPEED_100)
 8002dc6:	2b01      	cmp	r3, #1
            tmp |= PHYCFGR_OPMDC_100F;
 8002dc8:	bf0c      	ite	eq
 8002dca:	f041 0118 	orreq.w	r1, r1, #24
            tmp |= PHYCFGR_OPMDC_10F;
 8002dce:	f041 0108 	orrne.w	r1, r1, #8
 8002dd2:	e7ec      	b.n	8002dae <wizphy_setphyconf+0x16>
         if(phyconf->speed == PHY_SPEED_100)
 8002dd4:	2b01      	cmp	r3, #1
            tmp |= PHYCFGR_OPMDC_100H;
 8002dd6:	bf08      	it	eq
 8002dd8:	f041 0110 	orreq.w	r1, r1, #16
 8002ddc:	e7e7      	b.n	8002dae <wizphy_setphyconf+0x16>

08002dde <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8002dde:	b510      	push	{r4, lr}
 8002de0:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8002de2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002de6:	f7fd ff11 	bl	8000c0c <WIZCHIP_READ>
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8002dea:	f3c0 1380 	ubfx	r3, r0, #6, #1
 8002dee:	7023      	strb	r3, [r4, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002df0:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8002df4:	2b20      	cmp	r3, #32
 8002df6:	d001      	beq.n	8002dfc <wizphy_getphyconf+0x1e>
 8002df8:	2b38      	cmp	r3, #56	; 0x38
 8002dfa:	d11d      	bne.n	8002e38 <wizphy_getphyconf+0x5a>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8002dfc:	2201      	movs	r2, #1
         break;
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8002dfe:	7062      	strb	r2, [r4, #1]
         break;
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e00:	f1a3 0210 	sub.w	r2, r3, #16
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	2a10      	cmp	r2, #16
 8002e08:	d818      	bhi.n	8002e3c <wizphy_getphyconf+0x5e>
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e10:	f002 3201 	and.w	r2, r2, #16843009	; 0x1010101
 8002e14:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002e18:	b182      	cbz	r2, 8002e3c <wizphy_getphyconf+0x5e>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8002e1a:	70a1      	strb	r1, [r4, #2]
         break;
      default:
         phyconf->speed = PHY_SPEED_10;
         break;
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8002e1c:	3b08      	subs	r3, #8
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b18      	cmp	r3, #24
 8002e22:	d80e      	bhi.n	8002e42 <wizphy_getphyconf+0x64>
 8002e24:	2201      	movs	r2, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8002e2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e32:	b133      	cbz	r3, 8002e42 <wizphy_getphyconf+0x64>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8002e34:	70e2      	strb	r2, [r4, #3]
         break;
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
         break;
   }
}
 8002e36:	bd10      	pop	{r4, pc}
         phyconf->mode = PHY_MODE_MANUAL;
 8002e38:	2200      	movs	r2, #0
 8002e3a:	e7e0      	b.n	8002dfe <wizphy_getphyconf+0x20>
         phyconf->speed = PHY_SPEED_10;
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	70a2      	strb	r2, [r4, #2]
         break;
 8002e40:	e7ec      	b.n	8002e1c <wizphy_getphyconf+0x3e>
         phyconf->duplex = PHY_DUPLEX_HALF;
 8002e42:	2300      	movs	r3, #0
 8002e44:	70e3      	strb	r3, [r4, #3]
}
 8002e46:	e7f6      	b.n	8002e36 <wizphy_getphyconf+0x58>

08002e48 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	4604      	mov	r4, r0
   uint8_t tmp = 0;
   tmp = getPHYCFGR();
 8002e4c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e50:	f7fd fedc 	bl	8000c0c <WIZCHIP_READ>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002e54:	0643      	lsls	r3, r0, #25
 8002e56:	d51d      	bpl.n	8002e94 <wizphy_setphypmode+0x4c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8002e58:	f000 01c7 	and.w	r1, r0, #199	; 0xc7
   if( pmode == PHY_POWER_DOWN)
 8002e5c:	2c01      	cmp	r4, #1
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8002e5e:	bf0c      	ite	eq
 8002e60:	f041 0130 	orreq.w	r1, r1, #48	; 0x30
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8002e64:	f041 0138 	orrne.w	r1, r1, #56	; 0x38
   setPHYCFGR(tmp);
 8002e68:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e6c:	f7fd fefc 	bl	8000c68 <WIZCHIP_WRITE>
   wizphy_reset();
 8002e70:	f7ff ff7a 	bl	8002d68 <wizphy_reset>
   tmp = getPHYCFGR();
 8002e74:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8002e78:	f7fd fec8 	bl	8000c0c <WIZCHIP_READ>
   if( pmode == PHY_POWER_DOWN)
 8002e7c:	2c01      	cmp	r4, #1
 8002e7e:	d106      	bne.n	8002e8e <wizphy_setphypmode+0x46>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8002e80:	f010 0f30 	tst.w	r0, #48	; 0x30
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002e84:	bf0c      	ite	eq
 8002e86:	f04f 30ff 	moveq.w	r0, #4294967295
 8002e8a:	2000      	movne	r0, #0
   }
   return -1;
}
 8002e8c:	bd10      	pop	{r4, pc}
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8002e8e:	f010 0f38 	tst.w	r0, #56	; 0x38
 8002e92:	e7f7      	b.n	8002e84 <wizphy_setphypmode+0x3c>
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	e7f8      	b.n	8002e8c <wizphy_setphypmode+0x44>
	...

08002e9c <ctlwizchip>:
{
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	460c      	mov	r4, r1
   switch(cwtype)
 8002ea0:	280f      	cmp	r0, #15
 8002ea2:	d865      	bhi.n	8002f70 <ctlwizchip+0xd4>
 8002ea4:	e8df f000 	tbb	[pc, r0]
 8002ea8:	13170c08 	.word	0x13170c08
 8002eac:	2e221f1b 	.word	0x2e221f1b
 8002eb0:	514d4a3a 	.word	0x514d4a3a
 8002eb4:	615a550a 	.word	0x615a550a
         wizchip_sw_reset();
 8002eb8:	f7ff fe84 	bl	8002bc4 <wizchip_sw_reset>
   return 0;
 8002ebc:	2000      	movs	r0, #0
         break;
 8002ebe:	e03c      	b.n	8002f3a <ctlwizchip+0x9e>
         if(arg != 0) 
 8002ec0:	b101      	cbz	r1, 8002ec4 <ctlwizchip+0x28>
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8002ec2:	3108      	adds	r1, #8
         return wizchip_init(ptmp[0], ptmp[1]);
 8002ec4:	4620      	mov	r0, r4
}
 8002ec6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         return wizchip_init(ptmp[0], ptmp[1]);
 8002eca:	f7ff beb8 	b.w	8002c3e <wizchip_init>
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8002ece:	8808      	ldrh	r0, [r1, #0]
 8002ed0:	f7ff fef2 	bl	8002cb8 <wizchip_clrinterrupt>
         break;
 8002ed4:	e7f2      	b.n	8002ebc <ctlwizchip+0x20>
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8002ed6:	f7ff ff06 	bl	8002ce6 <wizchip_getinterrupt>
         *(uint16_t*)arg = getINTLEVEL();
 8002eda:	8020      	strh	r0, [r4, #0]
         break;
 8002edc:	e7ee      	b.n	8002ebc <ctlwizchip+0x20>
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8002ede:	8808      	ldrh	r0, [r1, #0]
 8002ee0:	f7ff ff12 	bl	8002d08 <wizchip_setinterruptmask>
         break;         
 8002ee4:	e7ea      	b.n	8002ebc <ctlwizchip+0x20>
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8002ee6:	f7ff ff1d 	bl	8002d24 <wizchip_getinterruptmask>
 8002eea:	e7f6      	b.n	8002eda <ctlwizchip+0x3e>
         setINTLEVEL(*(uint16_t*)arg);
 8002eec:	8809      	ldrh	r1, [r1, #0]
 8002eee:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002ef2:	0a09      	lsrs	r1, r1, #8
 8002ef4:	f7fd feb8 	bl	8000c68 <WIZCHIP_WRITE>
 8002ef8:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002efc:	7821      	ldrb	r1, [r4, #0]
 8002efe:	f7fd feb3 	bl	8000c68 <WIZCHIP_WRITE>
         break;
 8002f02:	e7db      	b.n	8002ebc <ctlwizchip+0x20>
         *(uint16_t*)arg = getINTLEVEL();
 8002f04:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8002f08:	f7fd fe80 	bl	8000c0c <WIZCHIP_READ>
 8002f0c:	4605      	mov	r5, r0
 8002f0e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8002f12:	f7fd fe7b 	bl	8000c0c <WIZCHIP_READ>
 8002f16:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 8002f1a:	e7de      	b.n	8002eda <ctlwizchip+0x3e>
         ((uint8_t*)arg)[6] = 0;
 8002f1c:	2000      	movs	r0, #0
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <ctlwizchip+0xdc>)
 8002f20:	789a      	ldrb	r2, [r3, #2]
 8002f22:	700a      	strb	r2, [r1, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8002f24:	78da      	ldrb	r2, [r3, #3]
 8002f26:	704a      	strb	r2, [r1, #1]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8002f28:	791a      	ldrb	r2, [r3, #4]
 8002f2a:	708a      	strb	r2, [r1, #2]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8002f2c:	795a      	ldrb	r2, [r3, #5]
 8002f2e:	70ca      	strb	r2, [r1, #3]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8002f30:	799a      	ldrb	r2, [r3, #6]
 8002f32:	710a      	strb	r2, [r1, #4]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8002f34:	79db      	ldrb	r3, [r3, #7]
         ((uint8_t*)arg)[6] = 0;
 8002f36:	7188      	strb	r0, [r1, #6]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8002f38:	714b      	strb	r3, [r1, #5]
}
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
         wizphy_reset();
 8002f3c:	f7ff ff14 	bl	8002d68 <wizphy_reset>
         break;
 8002f40:	e7bc      	b.n	8002ebc <ctlwizchip+0x20>
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8002f42:	4608      	mov	r0, r1
 8002f44:	f7ff ff28 	bl	8002d98 <wizphy_setphyconf>
         break;
 8002f48:	e7b8      	b.n	8002ebc <ctlwizchip+0x20>
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8002f4a:	4608      	mov	r0, r1
 8002f4c:	f7ff ff47 	bl	8002dde <wizphy_getphyconf>
         break;
 8002f50:	e7b4      	b.n	8002ebc <ctlwizchip+0x20>
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002f52:	7808      	ldrb	r0, [r1, #0]
}
 8002f54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
         return wizphy_setphypmode(*(uint8_t*)arg);
 8002f58:	f7ff bf76 	b.w	8002e48 <wizphy_setphypmode>
         tmp = wizphy_getphypmode();
 8002f5c:	f7ff fef8 	bl	8002d50 <wizphy_getphypmode>
         tmp = wizphy_getphylink();
 8002f60:	b2c0      	uxtb	r0, r0
         if((int8_t)tmp == -1) return -1;
 8002f62:	28ff      	cmp	r0, #255	; 0xff
 8002f64:	d004      	beq.n	8002f70 <ctlwizchip+0xd4>
         *(uint8_t*)arg = tmp;
 8002f66:	7020      	strb	r0, [r4, #0]
 8002f68:	e7a8      	b.n	8002ebc <ctlwizchip+0x20>
         tmp = wizphy_getphylink();
 8002f6a:	f7ff fee9 	bl	8002d40 <wizphy_getphylink>
 8002f6e:	e7f7      	b.n	8002f60 <ctlwizchip+0xc4>
         return -1;
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	e7e1      	b.n	8002f3a <ctlwizchip+0x9e>
 8002f76:	bf00      	nop
 8002f78:	2000003c 	.word	0x2000003c

08002f7c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8002f7c:	b510      	push	{r4, lr}
 8002f7e:	4604      	mov	r4, r0
   setSHAR(pnetinfo->mac);
 8002f80:	4601      	mov	r1, r0
 8002f82:	2206      	movs	r2, #6
 8002f84:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002f88:	f7fd feda 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8002f8c:	2204      	movs	r2, #4
 8002f8e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f92:	f104 010e 	add.w	r1, r4, #14
 8002f96:	f7fd fed3 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002fa0:	f104 010a 	add.w	r1, r4, #10
 8002fa4:	f7fd fecc 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8002fa8:	2204      	movs	r2, #4
 8002faa:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8002fae:	1da1      	adds	r1, r4, #6
 8002fb0:	f7fd fec6 	bl	8000d40 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <wizchip_setnetinfo+0x54>)
 8002fb6:	7ca2      	ldrb	r2, [r4, #18]
 8002fb8:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8002fba:	7ce2      	ldrb	r2, [r4, #19]
 8002fbc:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8002fbe:	7d22      	ldrb	r2, [r4, #20]
 8002fc0:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8002fc2:	7d62      	ldrb	r2, [r4, #21]
 8002fc4:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8002fc6:	7da2      	ldrb	r2, [r4, #22]
 8002fc8:	4b02      	ldr	r3, [pc, #8]	; (8002fd4 <wizchip_setnetinfo+0x58>)
 8002fca:	701a      	strb	r2, [r3, #0]
}
 8002fcc:	bd10      	pop	{r4, pc}
 8002fce:	bf00      	nop
 8002fd0:	200005dd 	.word	0x200005dd
 8002fd4:	200005dc 	.word	0x200005dc

08002fd8 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8002fd8:	b510      	push	{r4, lr}
 8002fda:	4604      	mov	r4, r0
   getSHAR(pnetinfo->mac);
 8002fdc:	4601      	mov	r1, r0
 8002fde:	2206      	movs	r2, #6
 8002fe0:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8002fe4:	f7fd fe72 	bl	8000ccc <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8002fe8:	2204      	movs	r2, #4
 8002fea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002fee:	f104 010e 	add.w	r1, r4, #14
 8002ff2:	f7fd fe6b 	bl	8000ccc <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8002ff6:	2204      	movs	r2, #4
 8002ff8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8002ffc:	f104 010a 	add.w	r1, r4, #10
 8003000:	f7fd fe64 	bl	8000ccc <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8003004:	2204      	movs	r2, #4
 8003006:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800300a:	1da1      	adds	r1, r4, #6
 800300c:	f7fd fe5e 	bl	8000ccc <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <wizchip_getnetinfo+0x54>)
 8003012:	781a      	ldrb	r2, [r3, #0]
 8003014:	74a2      	strb	r2, [r4, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8003016:	785a      	ldrb	r2, [r3, #1]
 8003018:	74e2      	strb	r2, [r4, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800301a:	789a      	ldrb	r2, [r3, #2]
   pnetinfo->dns[3]= _DNS_[3];
 800301c:	78db      	ldrb	r3, [r3, #3]
   pnetinfo->dns[2]= _DNS_[2];
 800301e:	7522      	strb	r2, [r4, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8003020:	7563      	strb	r3, [r4, #21]
   pnetinfo->dhcp  = _DHCP_;
 8003022:	4b03      	ldr	r3, [pc, #12]	; (8003030 <wizchip_getnetinfo+0x58>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	75a3      	strb	r3, [r4, #22]
}
 8003028:	bd10      	pop	{r4, pc}
 800302a:	bf00      	nop
 800302c:	200005dd 	.word	0x200005dd
 8003030:	200005dc 	.word	0x200005dc

08003034 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8003034:	b538      	push	{r3, r4, r5, lr}
   uint8_t tmp = 0;
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003036:	f030 053a 	bics.w	r5, r0, #58	; 0x3a
{
 800303a:	4604      	mov	r4, r0
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800303c:	d10a      	bne.n	8003054 <wizchip_setnetmode+0x20>
#endif      
   tmp = getMR();
 800303e:	4628      	mov	r0, r5
 8003040:	f7fd fde4 	bl	8000c0c <WIZCHIP_READ>
   tmp |= (uint8_t)netmode;
 8003044:	ea44 0100 	orr.w	r1, r4, r0
   setMR(tmp);
 8003048:	b2c9      	uxtb	r1, r1
 800304a:	4628      	mov	r0, r5
 800304c:	f7fd fe0c 	bl	8000c68 <WIZCHIP_WRITE>
   return 0;
 8003050:	4628      	mov	r0, r5
}
 8003052:	bd38      	pop	{r3, r4, r5, pc}
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	e7fb      	b.n	8003052 <wizchip_setnetmode+0x1e>

0800305a <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
   return (netmode_type) getMR();
 800305a:	2000      	movs	r0, #0
 800305c:	f7fd bdd6 	b.w	8000c0c <WIZCHIP_READ>

08003060 <wizchip_settimeout>:
}

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8003060:	b510      	push	{r4, lr}
 8003062:	4604      	mov	r4, r0
   setRCR(nettime->retry_cnt);
 8003064:	7801      	ldrb	r1, [r0, #0]
 8003066:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800306a:	f7fd fdfd 	bl	8000c68 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800306e:	8861      	ldrh	r1, [r4, #2]
 8003070:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8003074:	0a09      	lsrs	r1, r1, #8
 8003076:	f7fd fdf7 	bl	8000c68 <WIZCHIP_WRITE>
 800307a:	78a1      	ldrb	r1, [r4, #2]
 800307c:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
}
 8003080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   setRTR(nettime->time_100us);
 8003084:	f7fd bdf0 	b.w	8000c68 <WIZCHIP_WRITE>

08003088 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4604      	mov	r4, r0
   nettime->retry_cnt = getRCR();
 800308c:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8003090:	f7fd fdbc 	bl	8000c0c <WIZCHIP_READ>
 8003094:	7020      	strb	r0, [r4, #0]
   nettime->time_100us = getRTR();
 8003096:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800309a:	f7fd fdb7 	bl	8000c0c <WIZCHIP_READ>
 800309e:	4605      	mov	r5, r0
 80030a0:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80030a4:	f7fd fdb2 	bl	8000c0c <WIZCHIP_READ>
 80030a8:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80030ac:	8060      	strh	r0, [r4, #2]
}
 80030ae:	bd38      	pop	{r3, r4, r5, pc}

080030b0 <ctlnetwork>:
{
 80030b0:	b510      	push	{r4, lr}
 80030b2:	460c      	mov	r4, r1
   switch(cntype)
 80030b4:	2805      	cmp	r0, #5
 80030b6:	d81e      	bhi.n	80030f6 <ctlnetwork+0x46>
 80030b8:	e8df f000 	tbb	[pc, r0]
 80030bc:	110c0803 	.word	0x110c0803
 80030c0:	1915      	.short	0x1915
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 80030c2:	4608      	mov	r0, r1
 80030c4:	f7ff ff5a 	bl	8002f7c <wizchip_setnetinfo>
   return 0;
 80030c8:	2000      	movs	r0, #0
}
 80030ca:	bd10      	pop	{r4, pc}
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 80030cc:	4608      	mov	r0, r1
 80030ce:	f7ff ff83 	bl	8002fd8 <wizchip_getnetinfo>
         break;
 80030d2:	e7f9      	b.n	80030c8 <ctlnetwork+0x18>
         return wizchip_setnetmode(*(netmode_type*)arg);
 80030d4:	7808      	ldrb	r0, [r1, #0]
}
 80030d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
         return wizchip_setnetmode(*(netmode_type*)arg);
 80030da:	f7ff bfab 	b.w	8003034 <wizchip_setnetmode>
         *(netmode_type*)arg = wizchip_getnetmode();
 80030de:	f7ff ffbc 	bl	800305a <wizchip_getnetmode>
 80030e2:	7020      	strb	r0, [r4, #0]
         break;
 80030e4:	e7f0      	b.n	80030c8 <ctlnetwork+0x18>
         wizchip_settimeout((wiz_NetTimeout*)arg);
 80030e6:	4608      	mov	r0, r1
 80030e8:	f7ff ffba 	bl	8003060 <wizchip_settimeout>
 80030ec:	e7ec      	b.n	80030c8 <ctlnetwork+0x18>
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 80030ee:	4608      	mov	r0, r1
 80030f0:	f7ff ffca 	bl	8003088 <wizchip_gettimeout>
         break;
 80030f4:	e7e8      	b.n	80030c8 <ctlnetwork+0x18>
   switch(cntype)
 80030f6:	f04f 30ff 	mov.w	r0, #4294967295
 80030fa:	e7e6      	b.n	80030ca <ctlnetwork+0x1a>

080030fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030fe:	4b0e      	ldr	r3, [pc, #56]	; (8003138 <HAL_InitTick+0x3c>)
{
 8003100:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003102:	7818      	ldrb	r0, [r3, #0]
 8003104:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003108:	fbb3 f3f0 	udiv	r3, r3, r0
 800310c:	4a0b      	ldr	r2, [pc, #44]	; (800313c <HAL_InitTick+0x40>)
 800310e:	6810      	ldr	r0, [r2, #0]
 8003110:	fbb0 f0f3 	udiv	r0, r0, r3
 8003114:	f000 f890 	bl	8003238 <HAL_SYSTICK_Config>
 8003118:	4604      	mov	r4, r0
 800311a:	b958      	cbnz	r0, 8003134 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800311c:	2d0f      	cmp	r5, #15
 800311e:	d809      	bhi.n	8003134 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003120:	4602      	mov	r2, r0
 8003122:	4629      	mov	r1, r5
 8003124:	f04f 30ff 	mov.w	r0, #4294967295
 8003128:	f000 f854 	bl	80031d4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800312c:	4620      	mov	r0, r4
 800312e:	4b04      	ldr	r3, [pc, #16]	; (8003140 <HAL_InitTick+0x44>)
 8003130:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003132:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8003134:	2001      	movs	r0, #1
 8003136:	e7fc      	b.n	8003132 <HAL_InitTick+0x36>
 8003138:	20000068 	.word	0x20000068
 800313c:	20000018 	.word	0x20000018
 8003140:	2000006c 	.word	0x2000006c

08003144 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003144:	4a07      	ldr	r2, [pc, #28]	; (8003164 <HAL_Init+0x20>)
{
 8003146:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003148:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800314a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800314c:	f043 0310 	orr.w	r3, r3, #16
 8003150:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003152:	f000 f82d 	bl	80031b0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003156:	200f      	movs	r0, #15
 8003158:	f7ff ffd0 	bl	80030fc <HAL_InitTick>
  HAL_MspInit();
 800315c:	f7fd fc30 	bl	80009c0 <HAL_MspInit>
}
 8003160:	2000      	movs	r0, #0
 8003162:	bd08      	pop	{r3, pc}
 8003164:	40022000 	.word	0x40022000

08003168 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003168:	4a03      	ldr	r2, [pc, #12]	; (8003178 <HAL_IncTick+0x10>)
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <HAL_IncTick+0x14>)
 800316c:	6811      	ldr	r1, [r2, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	440b      	add	r3, r1
 8003172:	6013      	str	r3, [r2, #0]
}
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	200005e4 	.word	0x200005e4
 800317c:	20000068 	.word	0x20000068

08003180 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003180:	4b01      	ldr	r3, [pc, #4]	; (8003188 <HAL_GetTick+0x8>)
 8003182:	6818      	ldr	r0, [r3, #0]
}
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	200005e4 	.word	0x200005e4

0800318c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800318c:	b538      	push	{r3, r4, r5, lr}
 800318e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff fff6 	bl	8003180 <HAL_GetTick>
 8003194:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003196:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8003198:	bf1e      	ittt	ne
 800319a:	4b04      	ldrne	r3, [pc, #16]	; (80031ac <HAL_Delay+0x20>)
 800319c:	781b      	ldrbne	r3, [r3, #0]
 800319e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031a0:	f7ff ffee 	bl	8003180 <HAL_GetTick>
 80031a4:	1b43      	subs	r3, r0, r5
 80031a6:	42a3      	cmp	r3, r4
 80031a8:	d3fa      	bcc.n	80031a0 <HAL_Delay+0x14>
  {
  }
}
 80031aa:	bd38      	pop	{r3, r4, r5, pc}
 80031ac:	20000068 	.word	0x20000068

080031b0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4907      	ldr	r1, [pc, #28]	; (80031d0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031b2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80031b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80031be:	0412      	lsls	r2, r2, #16
 80031c0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80031cc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80031ce:	4770      	bx	lr
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d4:	4b16      	ldr	r3, [pc, #88]	; (8003230 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d6:	b530      	push	{r4, r5, lr}
 80031d8:	68dc      	ldr	r4, [r3, #12]
 80031da:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031de:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031e2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	bf28      	it	cs
 80031e8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ea:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f0:	bf98      	it	ls
 80031f2:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031f4:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f8:	bf88      	it	hi
 80031fa:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	ea21 0303 	bic.w	r3, r1, r3
 8003200:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003202:	fa05 f404 	lsl.w	r4, r5, r4
 8003206:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800320a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800320c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003210:	bfac      	ite	ge
 8003212:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003216:	4a07      	ldrlt	r2, [pc, #28]	; (8003234 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003218:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800321c:	b2db      	uxtb	r3, r3
 800321e:	bfab      	itete	ge
 8003220:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003224:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003228:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800322c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800322e:	bd30      	pop	{r4, r5, pc}
 8003230:	e000ed00 	.word	0xe000ed00
 8003234:	e000ed14 	.word	0xe000ed14

08003238 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003238:	3801      	subs	r0, #1
 800323a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800323e:	d20b      	bcs.n	8003258 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003240:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003244:	21f0      	movs	r1, #240	; 0xf0
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003248:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800324a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800324e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003250:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003252:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003254:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003256:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003258:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800325a:	4770      	bx	lr
 800325c:	e000ed00 	.word	0xe000ed00

08003260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003260:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003264:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8003266:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003268:	4f61      	ldr	r7, [pc, #388]	; (80033f0 <HAL_GPIO_Init+0x190>)
 800326a:	4b62      	ldr	r3, [pc, #392]	; (80033f4 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 800326c:	f8df c188 	ldr.w	ip, [pc, #392]	; 80033f8 <HAL_GPIO_Init+0x198>
 8003270:	f8df e188 	ldr.w	lr, [pc, #392]	; 80033fc <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003274:	680d      	ldr	r5, [r1, #0]
 8003276:	fa35 f406 	lsrs.w	r4, r5, r6
 800327a:	d102      	bne.n	8003282 <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 800327c:	b003      	add	sp, #12
 800327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8003282:	f04f 0801 	mov.w	r8, #1
 8003286:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800328a:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 800328e:	ea38 0505 	bics.w	r5, r8, r5
 8003292:	d177      	bne.n	8003384 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8003294:	684d      	ldr	r5, [r1, #4]
 8003296:	2d03      	cmp	r5, #3
 8003298:	d807      	bhi.n	80032aa <HAL_GPIO_Init+0x4a>
 800329a:	3d01      	subs	r5, #1
 800329c:	2d02      	cmp	r5, #2
 800329e:	f200 8082 	bhi.w	80033a6 <HAL_GPIO_Init+0x146>
 80032a2:	e8df f005 	tbb	[pc, r5]
 80032a6:	9792      	.short	0x9792
 80032a8:	9d          	.byte	0x9d
 80032a9:	00          	.byte	0x00
 80032aa:	2d12      	cmp	r5, #18
 80032ac:	f000 8095 	beq.w	80033da <HAL_GPIO_Init+0x17a>
 80032b0:	d86a      	bhi.n	8003388 <HAL_GPIO_Init+0x128>
 80032b2:	2d11      	cmp	r5, #17
 80032b4:	f000 808b 	beq.w	80033ce <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032b8:	2cff      	cmp	r4, #255	; 0xff
 80032ba:	bf98      	it	ls
 80032bc:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032be:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032c2:	bf88      	it	hi
 80032c4:	f100 0a04 	addhi.w	sl, r0, #4
 80032c8:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032cc:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032d0:	bf88      	it	hi
 80032d2:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032d4:	fa09 fb05 	lsl.w	fp, r9, r5
 80032d8:	ea28 080b 	bic.w	r8, r8, fp
 80032dc:	fa02 f505 	lsl.w	r5, r2, r5
 80032e0:	ea48 0505 	orr.w	r5, r8, r5
 80032e4:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032e8:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80032ec:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80032f0:	d048      	beq.n	8003384 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032f2:	69bd      	ldr	r5, [r7, #24]
 80032f4:	f026 0803 	bic.w	r8, r6, #3
 80032f8:	f045 0501 	orr.w	r5, r5, #1
 80032fc:	61bd      	str	r5, [r7, #24]
 80032fe:	69bd      	ldr	r5, [r7, #24]
 8003300:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8003304:	f005 0501 	and.w	r5, r5, #1
 8003308:	9501      	str	r5, [sp, #4]
 800330a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800330e:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003312:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003314:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8003318:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800331c:	fa09 f90b 	lsl.w	r9, r9, fp
 8003320:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003324:	4d36      	ldr	r5, [pc, #216]	; (8003400 <HAL_GPIO_Init+0x1a0>)
 8003326:	42a8      	cmp	r0, r5
 8003328:	d05e      	beq.n	80033e8 <HAL_GPIO_Init+0x188>
 800332a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800332e:	42a8      	cmp	r0, r5
 8003330:	d05c      	beq.n	80033ec <HAL_GPIO_Init+0x18c>
 8003332:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003336:	42a8      	cmp	r0, r5
 8003338:	bf0c      	ite	eq
 800333a:	2502      	moveq	r5, #2
 800333c:	2503      	movne	r5, #3
 800333e:	fa05 f50b 	lsl.w	r5, r5, fp
 8003342:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8003346:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800334a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800334c:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003350:	bf14      	ite	ne
 8003352:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003354:	43a5      	biceq	r5, r4
 8003356:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003358:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800335a:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800335e:	bf14      	ite	ne
 8003360:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003362:	43a5      	biceq	r5, r4
 8003364:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8003366:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003368:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800336c:	bf14      	ite	ne
 800336e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003370:	43a5      	biceq	r5, r4
 8003372:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8003374:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003376:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800337a:	bf14      	ite	ne
 800337c:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800337e:	ea25 0404 	biceq.w	r4, r5, r4
 8003382:	601c      	str	r4, [r3, #0]
	position++;
 8003384:	3601      	adds	r6, #1
 8003386:	e775      	b.n	8003274 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8003388:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8003404 <HAL_GPIO_Init+0x1a4>
 800338c:	454d      	cmp	r5, r9
 800338e:	d00a      	beq.n	80033a6 <HAL_GPIO_Init+0x146>
 8003390:	d815      	bhi.n	80033be <HAL_GPIO_Init+0x15e>
 8003392:	4575      	cmp	r5, lr
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x146>
 8003396:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 800339a:	454d      	cmp	r5, r9
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x146>
 800339e:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80033a2:	454d      	cmp	r5, r9
 80033a4:	d188      	bne.n	80032b8 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80033a6:	688a      	ldr	r2, [r1, #8]
 80033a8:	b1e2      	cbz	r2, 80033e4 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80033aa:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80033ac:	bf08      	it	eq
 80033ae:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80033b2:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80033b6:	bf18      	it	ne
 80033b8:	f8c0 8014 	strne.w	r8, [r0, #20]
 80033bc:	e77c      	b.n	80032b8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80033be:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8003408 <HAL_GPIO_Init+0x1a8>
 80033c2:	454d      	cmp	r5, r9
 80033c4:	d0ef      	beq.n	80033a6 <HAL_GPIO_Init+0x146>
 80033c6:	4565      	cmp	r5, ip
 80033c8:	e7ec      	b.n	80033a4 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80033ca:	68ca      	ldr	r2, [r1, #12]
          break;
 80033cc:	e774      	b.n	80032b8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80033ce:	68ca      	ldr	r2, [r1, #12]
 80033d0:	3204      	adds	r2, #4
          break;
 80033d2:	e771      	b.n	80032b8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80033d4:	68ca      	ldr	r2, [r1, #12]
 80033d6:	3208      	adds	r2, #8
          break;
 80033d8:	e76e      	b.n	80032b8 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80033da:	68ca      	ldr	r2, [r1, #12]
 80033dc:	320c      	adds	r2, #12
          break;
 80033de:	e76b      	b.n	80032b8 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80033e0:	2200      	movs	r2, #0
 80033e2:	e769      	b.n	80032b8 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80033e4:	2204      	movs	r2, #4
 80033e6:	e767      	b.n	80032b8 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80033e8:	2500      	movs	r5, #0
 80033ea:	e7a8      	b.n	800333e <HAL_GPIO_Init+0xde>
 80033ec:	2501      	movs	r5, #1
 80033ee:	e7a6      	b.n	800333e <HAL_GPIO_Init+0xde>
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40010400 	.word	0x40010400
 80033f8:	10320000 	.word	0x10320000
 80033fc:	10120000 	.word	0x10120000
 8003400:	40010800 	.word	0x40010800
 8003404:	10220000 	.word	0x10220000
 8003408:	10310000 	.word	0x10310000

0800340c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800340c:	b10a      	cbz	r2, 8003412 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800340e:	6101      	str	r1, [r0, #16]
  }
}
 8003410:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003412:	0409      	lsls	r1, r1, #16
 8003414:	e7fb      	b.n	800340e <HAL_GPIO_WritePin+0x2>
	...

08003418 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003418:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800341c:	4605      	mov	r5, r0
 800341e:	b338      	cbz	r0, 8003470 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003420:	6803      	ldr	r3, [r0, #0]
 8003422:	07db      	lsls	r3, r3, #31
 8003424:	d410      	bmi.n	8003448 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003426:	682b      	ldr	r3, [r5, #0]
 8003428:	079f      	lsls	r7, r3, #30
 800342a:	d45e      	bmi.n	80034ea <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800342c:	682b      	ldr	r3, [r5, #0]
 800342e:	0719      	lsls	r1, r3, #28
 8003430:	f100 8095 	bmi.w	800355e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003434:	682b      	ldr	r3, [r5, #0]
 8003436:	075a      	lsls	r2, r3, #29
 8003438:	f100 80c1 	bmi.w	80035be <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343c:	69e8      	ldr	r0, [r5, #28]
 800343e:	2800      	cmp	r0, #0
 8003440:	f040 812c 	bne.w	800369c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8003444:	2000      	movs	r0, #0
 8003446:	e029      	b.n	800349c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003448:	4c90      	ldr	r4, [pc, #576]	; (800368c <HAL_RCC_OscConfig+0x274>)
 800344a:	6863      	ldr	r3, [r4, #4]
 800344c:	f003 030c 	and.w	r3, r3, #12
 8003450:	2b04      	cmp	r3, #4
 8003452:	d007      	beq.n	8003464 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003454:	6863      	ldr	r3, [r4, #4]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b08      	cmp	r3, #8
 800345c:	d10a      	bne.n	8003474 <HAL_RCC_OscConfig+0x5c>
 800345e:	6863      	ldr	r3, [r4, #4]
 8003460:	03de      	lsls	r6, r3, #15
 8003462:	d507      	bpl.n	8003474 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	039c      	lsls	r4, r3, #14
 8003468:	d5dd      	bpl.n	8003426 <HAL_RCC_OscConfig+0xe>
 800346a:	686b      	ldr	r3, [r5, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1da      	bne.n	8003426 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003470:	2001      	movs	r0, #1
 8003472:	e013      	b.n	800349c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003474:	686b      	ldr	r3, [r5, #4]
 8003476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347a:	d112      	bne.n	80034a2 <HAL_RCC_OscConfig+0x8a>
 800347c:	6823      	ldr	r3, [r4, #0]
 800347e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003482:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8003484:	f7ff fe7c 	bl	8003180 <HAL_GetTick>
 8003488:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	6823      	ldr	r3, [r4, #0]
 800348c:	0398      	lsls	r0, r3, #14
 800348e:	d4ca      	bmi.n	8003426 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003490:	f7ff fe76 	bl	8003180 <HAL_GetTick>
 8003494:	1b80      	subs	r0, r0, r6
 8003496:	2864      	cmp	r0, #100	; 0x64
 8003498:	d9f7      	bls.n	800348a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 800349a:	2003      	movs	r0, #3
}
 800349c:	b002      	add	sp, #8
 800349e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034a2:	b99b      	cbnz	r3, 80034cc <HAL_RCC_OscConfig+0xb4>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034aa:	6023      	str	r3, [r4, #0]
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80034b4:	f7ff fe64 	bl	8003180 <HAL_GetTick>
 80034b8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	0399      	lsls	r1, r3, #14
 80034be:	d5b2      	bpl.n	8003426 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c0:	f7ff fe5e 	bl	8003180 <HAL_GetTick>
 80034c4:	1b80      	subs	r0, r0, r6
 80034c6:	2864      	cmp	r0, #100	; 0x64
 80034c8:	d9f7      	bls.n	80034ba <HAL_RCC_OscConfig+0xa2>
 80034ca:	e7e6      	b.n	800349a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	d103      	bne.n	80034dc <HAL_RCC_OscConfig+0xc4>
 80034d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	e7cf      	b.n	800347c <HAL_RCC_OscConfig+0x64>
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e0:	6023      	str	r3, [r4, #0]
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e8:	e7cb      	b.n	8003482 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ea:	4c68      	ldr	r4, [pc, #416]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80034ec:	6863      	ldr	r3, [r4, #4]
 80034ee:	f013 0f0c 	tst.w	r3, #12
 80034f2:	d007      	beq.n	8003504 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034f4:	6863      	ldr	r3, [r4, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d110      	bne.n	8003520 <HAL_RCC_OscConfig+0x108>
 80034fe:	6863      	ldr	r3, [r4, #4]
 8003500:	03da      	lsls	r2, r3, #15
 8003502:	d40d      	bmi.n	8003520 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	079b      	lsls	r3, r3, #30
 8003508:	d502      	bpl.n	8003510 <HAL_RCC_OscConfig+0xf8>
 800350a:	692b      	ldr	r3, [r5, #16]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d1af      	bne.n	8003470 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	696a      	ldr	r2, [r5, #20]
 8003514:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003518:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	e785      	b.n	800342c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003520:	692a      	ldr	r2, [r5, #16]
 8003522:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <HAL_RCC_OscConfig+0x278>)
 8003524:	b16a      	cbz	r2, 8003542 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8003526:	2201      	movs	r2, #1
 8003528:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800352a:	f7ff fe29 	bl	8003180 <HAL_GetTick>
 800352e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	079f      	lsls	r7, r3, #30
 8003534:	d4ec      	bmi.n	8003510 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003536:	f7ff fe23 	bl	8003180 <HAL_GetTick>
 800353a:	1b80      	subs	r0, r0, r6
 800353c:	2802      	cmp	r0, #2
 800353e:	d9f7      	bls.n	8003530 <HAL_RCC_OscConfig+0x118>
 8003540:	e7ab      	b.n	800349a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8003542:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003544:	f7ff fe1c 	bl	8003180 <HAL_GetTick>
 8003548:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	0798      	lsls	r0, r3, #30
 800354e:	f57f af6d 	bpl.w	800342c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003552:	f7ff fe15 	bl	8003180 <HAL_GetTick>
 8003556:	1b80      	subs	r0, r0, r6
 8003558:	2802      	cmp	r0, #2
 800355a:	d9f6      	bls.n	800354a <HAL_RCC_OscConfig+0x132>
 800355c:	e79d      	b.n	800349a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800355e:	69aa      	ldr	r2, [r5, #24]
 8003560:	4e4a      	ldr	r6, [pc, #296]	; (800368c <HAL_RCC_OscConfig+0x274>)
 8003562:	4b4b      	ldr	r3, [pc, #300]	; (8003690 <HAL_RCC_OscConfig+0x278>)
 8003564:	b1e2      	cbz	r2, 80035a0 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8003566:	2201      	movs	r2, #1
 8003568:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800356c:	f7ff fe08 	bl	8003180 <HAL_GetTick>
 8003570:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003572:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003574:	079b      	lsls	r3, r3, #30
 8003576:	d50d      	bpl.n	8003594 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003578:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800357c:	4b45      	ldr	r3, [pc, #276]	; (8003694 <HAL_RCC_OscConfig+0x27c>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	fbb3 f3f2 	udiv	r3, r3, r2
 8003584:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003586:	bf00      	nop
  }
  while (Delay --);
 8003588:	9b01      	ldr	r3, [sp, #4]
 800358a:	1e5a      	subs	r2, r3, #1
 800358c:	9201      	str	r2, [sp, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f9      	bne.n	8003586 <HAL_RCC_OscConfig+0x16e>
 8003592:	e74f      	b.n	8003434 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003594:	f7ff fdf4 	bl	8003180 <HAL_GetTick>
 8003598:	1b00      	subs	r0, r0, r4
 800359a:	2802      	cmp	r0, #2
 800359c:	d9e9      	bls.n	8003572 <HAL_RCC_OscConfig+0x15a>
 800359e:	e77c      	b.n	800349a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80035a0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80035a4:	f7ff fdec 	bl	8003180 <HAL_GetTick>
 80035a8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035aa:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80035ac:	079f      	lsls	r7, r3, #30
 80035ae:	f57f af41 	bpl.w	8003434 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b2:	f7ff fde5 	bl	8003180 <HAL_GetTick>
 80035b6:	1b00      	subs	r0, r0, r4
 80035b8:	2802      	cmp	r0, #2
 80035ba:	d9f6      	bls.n	80035aa <HAL_RCC_OscConfig+0x192>
 80035bc:	e76d      	b.n	800349a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035be:	4c33      	ldr	r4, [pc, #204]	; (800368c <HAL_RCC_OscConfig+0x274>)
 80035c0:	69e3      	ldr	r3, [r4, #28]
 80035c2:	00d8      	lsls	r0, r3, #3
 80035c4:	d424      	bmi.n	8003610 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80035c6:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80035c8:	69e3      	ldr	r3, [r4, #28]
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ce:	61e3      	str	r3, [r4, #28]
 80035d0:	69e3      	ldr	r3, [r4, #28]
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035da:	4e2f      	ldr	r6, [pc, #188]	; (8003698 <HAL_RCC_OscConfig+0x280>)
 80035dc:	6833      	ldr	r3, [r6, #0]
 80035de:	05d9      	lsls	r1, r3, #23
 80035e0:	d518      	bpl.n	8003614 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035e2:	68eb      	ldr	r3, [r5, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d126      	bne.n	8003636 <HAL_RCC_OscConfig+0x21e>
 80035e8:	6a23      	ldr	r3, [r4, #32]
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80035f0:	f7ff fdc6 	bl	8003180 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80035f8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035fa:	6a23      	ldr	r3, [r4, #32]
 80035fc:	079b      	lsls	r3, r3, #30
 80035fe:	d53f      	bpl.n	8003680 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8003600:	2f00      	cmp	r7, #0
 8003602:	f43f af1b 	beq.w	800343c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003606:	69e3      	ldr	r3, [r4, #28]
 8003608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800360c:	61e3      	str	r3, [r4, #28]
 800360e:	e715      	b.n	800343c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003610:	2700      	movs	r7, #0
 8003612:	e7e2      	b.n	80035da <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003614:	6833      	ldr	r3, [r6, #0]
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800361c:	f7ff fdb0 	bl	8003180 <HAL_GetTick>
 8003620:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003622:	6833      	ldr	r3, [r6, #0]
 8003624:	05da      	lsls	r2, r3, #23
 8003626:	d4dc      	bmi.n	80035e2 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003628:	f7ff fdaa 	bl	8003180 <HAL_GetTick>
 800362c:	eba0 0008 	sub.w	r0, r0, r8
 8003630:	2864      	cmp	r0, #100	; 0x64
 8003632:	d9f6      	bls.n	8003622 <HAL_RCC_OscConfig+0x20a>
 8003634:	e731      	b.n	800349a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003636:	b9ab      	cbnz	r3, 8003664 <HAL_RCC_OscConfig+0x24c>
 8003638:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800363a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	6223      	str	r3, [r4, #32]
 8003644:	6a23      	ldr	r3, [r4, #32]
 8003646:	f023 0304 	bic.w	r3, r3, #4
 800364a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800364c:	f7ff fd98 	bl	8003180 <HAL_GetTick>
 8003650:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003652:	6a23      	ldr	r3, [r4, #32]
 8003654:	0798      	lsls	r0, r3, #30
 8003656:	d5d3      	bpl.n	8003600 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003658:	f7ff fd92 	bl	8003180 <HAL_GetTick>
 800365c:	1b80      	subs	r0, r0, r6
 800365e:	4540      	cmp	r0, r8
 8003660:	d9f7      	bls.n	8003652 <HAL_RCC_OscConfig+0x23a>
 8003662:	e71a      	b.n	800349a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003664:	2b05      	cmp	r3, #5
 8003666:	6a23      	ldr	r3, [r4, #32]
 8003668:	d103      	bne.n	8003672 <HAL_RCC_OscConfig+0x25a>
 800366a:	f043 0304 	orr.w	r3, r3, #4
 800366e:	6223      	str	r3, [r4, #32]
 8003670:	e7ba      	b.n	80035e8 <HAL_RCC_OscConfig+0x1d0>
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	6223      	str	r3, [r4, #32]
 8003678:	6a23      	ldr	r3, [r4, #32]
 800367a:	f023 0304 	bic.w	r3, r3, #4
 800367e:	e7b6      	b.n	80035ee <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003680:	f7ff fd7e 	bl	8003180 <HAL_GetTick>
 8003684:	1b80      	subs	r0, r0, r6
 8003686:	4540      	cmp	r0, r8
 8003688:	d9b7      	bls.n	80035fa <HAL_RCC_OscConfig+0x1e2>
 800368a:	e706      	b.n	800349a <HAL_RCC_OscConfig+0x82>
 800368c:	40021000 	.word	0x40021000
 8003690:	42420000 	.word	0x42420000
 8003694:	20000018 	.word	0x20000018
 8003698:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800369c:	4c2a      	ldr	r4, [pc, #168]	; (8003748 <HAL_RCC_OscConfig+0x330>)
 800369e:	6863      	ldr	r3, [r4, #4]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d03e      	beq.n	8003726 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a8:	2200      	movs	r2, #0
 80036aa:	4b28      	ldr	r3, [pc, #160]	; (800374c <HAL_RCC_OscConfig+0x334>)
 80036ac:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80036ae:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b0:	d12c      	bne.n	800370c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80036b2:	f7ff fd65 	bl	8003180 <HAL_GetTick>
 80036b6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b8:	6823      	ldr	r3, [r4, #0]
 80036ba:	0199      	lsls	r1, r3, #6
 80036bc:	d420      	bmi.n	8003700 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036be:	6a2b      	ldr	r3, [r5, #32]
 80036c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c4:	d105      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80036c6:	6862      	ldr	r2, [r4, #4]
 80036c8:	68a9      	ldr	r1, [r5, #8]
 80036ca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80036ce:	430a      	orrs	r2, r1
 80036d0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036d2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80036d4:	6862      	ldr	r2, [r4, #4]
 80036d6:	430b      	orrs	r3, r1
 80036d8:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80036dc:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80036de:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036e0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HAL_RCC_OscConfig+0x334>)
 80036e4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80036e6:	f7ff fd4b 	bl	8003180 <HAL_GetTick>
 80036ea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036ec:	6823      	ldr	r3, [r4, #0]
 80036ee:	019a      	lsls	r2, r3, #6
 80036f0:	f53f aea8 	bmi.w	8003444 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f4:	f7ff fd44 	bl	8003180 <HAL_GetTick>
 80036f8:	1b40      	subs	r0, r0, r5
 80036fa:	2802      	cmp	r0, #2
 80036fc:	d9f6      	bls.n	80036ec <HAL_RCC_OscConfig+0x2d4>
 80036fe:	e6cc      	b.n	800349a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003700:	f7ff fd3e 	bl	8003180 <HAL_GetTick>
 8003704:	1b80      	subs	r0, r0, r6
 8003706:	2802      	cmp	r0, #2
 8003708:	d9d6      	bls.n	80036b8 <HAL_RCC_OscConfig+0x2a0>
 800370a:	e6c6      	b.n	800349a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800370c:	f7ff fd38 	bl	8003180 <HAL_GetTick>
 8003710:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	019b      	lsls	r3, r3, #6
 8003716:	f57f ae95 	bpl.w	8003444 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800371a:	f7ff fd31 	bl	8003180 <HAL_GetTick>
 800371e:	1b40      	subs	r0, r0, r5
 8003720:	2802      	cmp	r0, #2
 8003722:	d9f6      	bls.n	8003712 <HAL_RCC_OscConfig+0x2fa>
 8003724:	e6b9      	b.n	800349a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003726:	2801      	cmp	r0, #1
 8003728:	f43f aeb8 	beq.w	800349c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 800372c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	6a2a      	ldr	r2, [r5, #32]
 8003730:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003734:	4291      	cmp	r1, r2
 8003736:	f47f ae9b 	bne.w	8003470 <HAL_RCC_OscConfig+0x58>
 800373a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800373c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003740:	4293      	cmp	r3, r2
 8003742:	f43f ae7f 	beq.w	8003444 <HAL_RCC_OscConfig+0x2c>
 8003746:	e693      	b.n	8003470 <HAL_RCC_OscConfig+0x58>
 8003748:	40021000 	.word	0x40021000
 800374c:	42420000 	.word	0x42420000

08003750 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8003750:	4a0d      	ldr	r2, [pc, #52]	; (8003788 <HAL_RCC_GetSysClockFreq+0x38>)
 8003752:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003754:	f003 010c 	and.w	r1, r3, #12
 8003758:	2908      	cmp	r1, #8
 800375a:	d112      	bne.n	8003782 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800375c:	480b      	ldr	r0, [pc, #44]	; (800378c <HAL_RCC_GetSysClockFreq+0x3c>)
 800375e:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003762:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003764:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003766:	d509      	bpl.n	800377c <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003768:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800376a:	4a09      	ldr	r2, [pc, #36]	; (8003790 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800376c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003770:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_RCC_GetSysClockFreq+0x44>)
 8003774:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003776:	fbb0 f0f3 	udiv	r0, r0, r3
 800377a:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_GetSysClockFreq+0x48>)
 800377e:	4358      	muls	r0, r3
 8003780:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8003782:	4803      	ldr	r0, [pc, #12]	; (8003790 <HAL_RCC_GetSysClockFreq+0x40>)
}
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	40021000 	.word	0x40021000
 800378c:	080052c5 	.word	0x080052c5
 8003790:	007a1200 	.word	0x007a1200
 8003794:	080052d5 	.word	0x080052d5
 8003798:	003d0900 	.word	0x003d0900

0800379c <HAL_RCC_ClockConfig>:
{
 800379c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80037a2:	4604      	mov	r4, r0
 80037a4:	b910      	cbnz	r0, 80037ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80037a6:	2001      	movs	r0, #1
}
 80037a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4a44      	ldr	r2, [pc, #272]	; (80038c0 <HAL_RCC_ClockConfig+0x124>)
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	428b      	cmp	r3, r1
 80037b6:	d328      	bcc.n	800380a <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	6821      	ldr	r1, [r4, #0]
 80037ba:	078e      	lsls	r6, r1, #30
 80037bc:	d430      	bmi.n	8003820 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037be:	07ca      	lsls	r2, r1, #31
 80037c0:	d443      	bmi.n	800384a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c2:	4a3f      	ldr	r2, [pc, #252]	; (80038c0 <HAL_RCC_ClockConfig+0x124>)
 80037c4:	6813      	ldr	r3, [r2, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	42ab      	cmp	r3, r5
 80037cc:	d865      	bhi.n	800389a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	4d3c      	ldr	r5, [pc, #240]	; (80038c4 <HAL_RCC_ClockConfig+0x128>)
 80037d2:	f012 0f04 	tst.w	r2, #4
 80037d6:	d16c      	bne.n	80038b2 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037d8:	0713      	lsls	r3, r2, #28
 80037da:	d506      	bpl.n	80037ea <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037dc:	686b      	ldr	r3, [r5, #4]
 80037de:	6922      	ldr	r2, [r4, #16]
 80037e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80037e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80037e8:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037ea:	f7ff ffb1 	bl	8003750 <HAL_RCC_GetSysClockFreq>
 80037ee:	686b      	ldr	r3, [r5, #4]
 80037f0:	4a35      	ldr	r2, [pc, #212]	; (80038c8 <HAL_RCC_ClockConfig+0x12c>)
 80037f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80037f6:	5cd3      	ldrb	r3, [r2, r3]
 80037f8:	40d8      	lsrs	r0, r3
 80037fa:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCC_ClockConfig+0x130>)
 80037fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80037fe:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <HAL_RCC_ClockConfig+0x134>)
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	f7ff fc7b 	bl	80030fc <HAL_InitTick>
  return HAL_OK;
 8003806:	2000      	movs	r0, #0
 8003808:	e7ce      	b.n	80037a8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	6813      	ldr	r3, [r2, #0]
 800380c:	f023 0307 	bic.w	r3, r3, #7
 8003810:	430b      	orrs	r3, r1
 8003812:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003814:	6813      	ldr	r3, [r2, #0]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	428b      	cmp	r3, r1
 800381c:	d1c3      	bne.n	80037a6 <HAL_RCC_ClockConfig+0xa>
 800381e:	e7cb      	b.n	80037b8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003820:	4b28      	ldr	r3, [pc, #160]	; (80038c4 <HAL_RCC_ClockConfig+0x128>)
 8003822:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003826:	bf1e      	ittt	ne
 8003828:	685a      	ldrne	r2, [r3, #4]
 800382a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800382e:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003830:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003832:	bf42      	ittt	mi
 8003834:	685a      	ldrmi	r2, [r3, #4]
 8003836:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800383a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	68a0      	ldr	r0, [r4, #8]
 8003840:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003844:	4302      	orrs	r2, r0
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	e7b9      	b.n	80037be <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800384a:	6862      	ldr	r2, [r4, #4]
 800384c:	4e1d      	ldr	r6, [pc, #116]	; (80038c4 <HAL_RCC_ClockConfig+0x128>)
 800384e:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003850:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003852:	d11a      	bne.n	800388a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003854:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	d0a5      	beq.n	80037a6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003860:	f023 0303 	bic.w	r3, r3, #3
 8003864:	4313      	orrs	r3, r2
 8003866:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003868:	f7ff fc8a 	bl	8003180 <HAL_GetTick>
 800386c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386e:	6873      	ldr	r3, [r6, #4]
 8003870:	6862      	ldr	r2, [r4, #4]
 8003872:	f003 030c 	and.w	r3, r3, #12
 8003876:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800387a:	d0a2      	beq.n	80037c2 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800387c:	f7ff fc80 	bl	8003180 <HAL_GetTick>
 8003880:	1bc0      	subs	r0, r0, r7
 8003882:	4540      	cmp	r0, r8
 8003884:	d9f3      	bls.n	800386e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8003886:	2003      	movs	r0, #3
 8003888:	e78e      	b.n	80037a8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	2a02      	cmp	r2, #2
 800388c:	d102      	bne.n	8003894 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003892:	e7e1      	b.n	8003858 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	f013 0f02 	tst.w	r3, #2
 8003898:	e7de      	b.n	8003858 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	f023 0307 	bic.w	r3, r3, #7
 80038a0:	432b      	orrs	r3, r5
 80038a2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038a4:	6813      	ldr	r3, [r2, #0]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	42ab      	cmp	r3, r5
 80038ac:	f47f af7b 	bne.w	80037a6 <HAL_RCC_ClockConfig+0xa>
 80038b0:	e78d      	b.n	80037ce <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b2:	686b      	ldr	r3, [r5, #4]
 80038b4:	68e1      	ldr	r1, [r4, #12]
 80038b6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80038ba:	430b      	orrs	r3, r1
 80038bc:	606b      	str	r3, [r5, #4]
 80038be:	e78b      	b.n	80037d8 <HAL_RCC_ClockConfig+0x3c>
 80038c0:	40022000 	.word	0x40022000
 80038c4:	40021000 	.word	0x40021000
 80038c8:	080050bd 	.word	0x080050bd
 80038cc:	20000018 	.word	0x20000018
 80038d0:	2000006c 	.word	0x2000006c

080038d4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80038d6:	4a05      	ldr	r2, [pc, #20]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80038de:	5cd3      	ldrb	r3, [r2, r3]
 80038e0:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80038e2:	6810      	ldr	r0, [r2, #0]
}
 80038e4:	40d8      	lsrs	r0, r3
 80038e6:	4770      	bx	lr
 80038e8:	40021000 	.word	0x40021000
 80038ec:	080050cd 	.word	0x080050cd
 80038f0:	20000018 	.word	0x20000018

080038f4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038f4:	4b04      	ldr	r3, [pc, #16]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x14>)
 80038f6:	4a05      	ldr	r2, [pc, #20]	; (800390c <HAL_RCC_GetPCLK2Freq+0x18>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80038fe:	5cd3      	ldrb	r3, [r2, r3]
 8003900:	4a03      	ldr	r2, [pc, #12]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003902:	6810      	ldr	r0, [r2, #0]
}
 8003904:	40d8      	lsrs	r0, r3
 8003906:	4770      	bx	lr
 8003908:	40021000 	.word	0x40021000
 800390c:	080050cd 	.word	0x080050cd
 8003910:	20000018 	.word	0x20000018

08003914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003914:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003916:	4604      	mov	r4, r0
 8003918:	2800      	cmp	r0, #0
 800391a:	d051      	beq.n	80039c0 <HAL_SPI_Init+0xac>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800391c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800391e:	2b00      	cmp	r3, #0
 8003920:	d14a      	bne.n	80039b8 <HAL_SPI_Init+0xa4>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003922:	6842      	ldr	r2, [r0, #4]
 8003924:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003928:	d000      	beq.n	800392c <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800392a:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800392c:	2300      	movs	r3, #0
 800392e:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003930:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003934:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003938:	b923      	cbnz	r3, 8003944 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800393a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800393c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003940:	f7fd f860 	bl	8000a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003944:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003946:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003948:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800394c:	6813      	ldr	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800394e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003950:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003954:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003956:	6863      	ldr	r3, [r4, #4]
 8003958:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800395c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003960:	4303      	orrs	r3, r0
 8003962:	68e0      	ldr	r0, [r4, #12]
 8003964:	69a1      	ldr	r1, [r4, #24]
 8003966:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800396a:	4303      	orrs	r3, r0
 800396c:	6920      	ldr	r0, [r4, #16]
 800396e:	f000 0002 	and.w	r0, r0, #2
 8003972:	4303      	orrs	r3, r0
 8003974:	6960      	ldr	r0, [r4, #20]
 8003976:	f000 0001 	and.w	r0, r0, #1
 800397a:	4303      	orrs	r3, r0
 800397c:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8003980:	4303      	orrs	r3, r0
 8003982:	69e0      	ldr	r0, [r4, #28]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003984:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003986:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800398a:	4303      	orrs	r3, r0
 800398c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800398e:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003992:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003996:	4303      	orrs	r3, r0
 8003998:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800399a:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 800399e:	4303      	orrs	r3, r0
 80039a0:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80039a2:	6051      	str	r1, [r2, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039a4:	69d3      	ldr	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039a6:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039ac:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 80039ae:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039b0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039b2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 80039b6:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039b8:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80039be:	e7b5      	b.n	800392c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 80039c0:	2001      	movs	r0, #1
 80039c2:	e7f8      	b.n	80039b6 <HAL_SPI_Init+0xa2>

080039c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039c4:	b510      	push	{r4, lr}
 80039c6:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039c8:	6803      	ldr	r3, [r0, #0]
 80039ca:	68c1      	ldr	r1, [r0, #12]
 80039cc:	691a      	ldr	r2, [r3, #16]
 80039ce:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80039d2:	430a      	orrs	r2, r1
 80039d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039d6:	6882      	ldr	r2, [r0, #8]
 80039d8:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80039da:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039dc:	4302      	orrs	r2, r0
 80039de:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80039e0:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80039e4:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039e8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80039ea:	430a      	orrs	r2, r1
 80039ec:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ee:	695a      	ldr	r2, [r3, #20]
 80039f0:	69a1      	ldr	r1, [r4, #24]
 80039f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80039f6:	430a      	orrs	r2, r1
 80039f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80039fa:	4a0e      	ldr	r2, [pc, #56]	; (8003a34 <UART_SetConfig+0x70>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d115      	bne.n	8003a2c <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7ff ff78 	bl	80038f4 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a04:	2319      	movs	r3, #25
 8003a06:	4343      	muls	r3, r0
 8003a08:	6862      	ldr	r2, [r4, #4]
 8003a0a:	6820      	ldr	r0, [r4, #0]
 8003a0c:	0092      	lsls	r2, r2, #2
 8003a0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a12:	2264      	movs	r2, #100	; 0x64
 8003a14:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a18:	fb02 3311 	mls	r3, r2, r1, r3
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	3332      	adds	r3, #50	; 0x32
 8003a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a24:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003a28:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8003a2a:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a2c:	f7ff ff52 	bl	80038d4 <HAL_RCC_GetPCLK1Freq>
 8003a30:	e7e8      	b.n	8003a04 <UART_SetConfig+0x40>
 8003a32:	bf00      	nop
 8003a34:	40013800 	.word	0x40013800

08003a38 <HAL_UART_Init>:
{
 8003a38:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	b348      	cbz	r0, 8003a92 <HAL_UART_Init+0x5a>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003a3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003a42:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003a46:	b91b      	cbnz	r3, 8003a50 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003a48:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8003a4c:	f7fd f814 	bl	8000a78 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003a52:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003a54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8003a58:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003a5a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003a5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a60:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003a62:	f7ff ffaf 	bl	80039c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a66:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a68:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a72:	695a      	ldr	r2, [r3, #20]
 8003a74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a78:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a80:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003a82:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8e:	6360      	str	r0, [r4, #52]	; 0x34
}
 8003a90:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003a92:	2001      	movs	r0, #1
 8003a94:	e7fc      	b.n	8003a90 <HAL_UART_Init+0x58>
	...

08003a98 <__errno>:
 8003a98:	4b01      	ldr	r3, [pc, #4]	; (8003aa0 <__errno+0x8>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000070 	.word	0x20000070

08003aa4 <__libc_init_array>:
 8003aa4:	b570      	push	{r4, r5, r6, lr}
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	4d0c      	ldr	r5, [pc, #48]	; (8003adc <__libc_init_array+0x38>)
 8003aaa:	4c0d      	ldr	r4, [pc, #52]	; (8003ae0 <__libc_init_array+0x3c>)
 8003aac:	1b64      	subs	r4, r4, r5
 8003aae:	10a4      	asrs	r4, r4, #2
 8003ab0:	42a6      	cmp	r6, r4
 8003ab2:	d109      	bne.n	8003ac8 <__libc_init_array+0x24>
 8003ab4:	f001 f92a 	bl	8004d0c <_init>
 8003ab8:	2600      	movs	r6, #0
 8003aba:	4d0a      	ldr	r5, [pc, #40]	; (8003ae4 <__libc_init_array+0x40>)
 8003abc:	4c0a      	ldr	r4, [pc, #40]	; (8003ae8 <__libc_init_array+0x44>)
 8003abe:	1b64      	subs	r4, r4, r5
 8003ac0:	10a4      	asrs	r4, r4, #2
 8003ac2:	42a6      	cmp	r6, r4
 8003ac4:	d105      	bne.n	8003ad2 <__libc_init_array+0x2e>
 8003ac6:	bd70      	pop	{r4, r5, r6, pc}
 8003ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003acc:	4798      	blx	r3
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__libc_init_array+0xc>
 8003ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad6:	4798      	blx	r3
 8003ad8:	3601      	adds	r6, #1
 8003ada:	e7f2      	b.n	8003ac2 <__libc_init_array+0x1e>
 8003adc:	08005378 	.word	0x08005378
 8003ae0:	08005378 	.word	0x08005378
 8003ae4:	08005378 	.word	0x08005378
 8003ae8:	0800537c 	.word	0x0800537c

08003aec <memset>:
 8003aec:	4603      	mov	r3, r0
 8003aee:	4402      	add	r2, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d100      	bne.n	8003af6 <memset+0xa>
 8003af4:	4770      	bx	lr
 8003af6:	f803 1b01 	strb.w	r1, [r3], #1
 8003afa:	e7f9      	b.n	8003af0 <memset+0x4>

08003afc <iprintf>:
 8003afc:	b40f      	push	{r0, r1, r2, r3}
 8003afe:	4b0a      	ldr	r3, [pc, #40]	; (8003b28 <iprintf+0x2c>)
 8003b00:	b513      	push	{r0, r1, r4, lr}
 8003b02:	681c      	ldr	r4, [r3, #0]
 8003b04:	b124      	cbz	r4, 8003b10 <iprintf+0x14>
 8003b06:	69a3      	ldr	r3, [r4, #24]
 8003b08:	b913      	cbnz	r3, 8003b10 <iprintf+0x14>
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f000 fb50 	bl	80041b0 <__sinit>
 8003b10:	ab05      	add	r3, sp, #20
 8003b12:	4620      	mov	r0, r4
 8003b14:	9a04      	ldr	r2, [sp, #16]
 8003b16:	68a1      	ldr	r1, [r4, #8]
 8003b18:	9301      	str	r3, [sp, #4]
 8003b1a:	f000 fd5b 	bl	80045d4 <_vfiprintf_r>
 8003b1e:	b002      	add	sp, #8
 8003b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b24:	b004      	add	sp, #16
 8003b26:	4770      	bx	lr
 8003b28:	20000070 	.word	0x20000070

08003b2c <_puts_r>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	460e      	mov	r6, r1
 8003b30:	4605      	mov	r5, r0
 8003b32:	b118      	cbz	r0, 8003b3c <_puts_r+0x10>
 8003b34:	6983      	ldr	r3, [r0, #24]
 8003b36:	b90b      	cbnz	r3, 8003b3c <_puts_r+0x10>
 8003b38:	f000 fb3a 	bl	80041b0 <__sinit>
 8003b3c:	69ab      	ldr	r3, [r5, #24]
 8003b3e:	68ac      	ldr	r4, [r5, #8]
 8003b40:	b913      	cbnz	r3, 8003b48 <_puts_r+0x1c>
 8003b42:	4628      	mov	r0, r5
 8003b44:	f000 fb34 	bl	80041b0 <__sinit>
 8003b48:	4b2c      	ldr	r3, [pc, #176]	; (8003bfc <_puts_r+0xd0>)
 8003b4a:	429c      	cmp	r4, r3
 8003b4c:	d120      	bne.n	8003b90 <_puts_r+0x64>
 8003b4e:	686c      	ldr	r4, [r5, #4]
 8003b50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b52:	07db      	lsls	r3, r3, #31
 8003b54:	d405      	bmi.n	8003b62 <_puts_r+0x36>
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	0598      	lsls	r0, r3, #22
 8003b5a:	d402      	bmi.n	8003b62 <_puts_r+0x36>
 8003b5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b5e:	f000 fbc5 	bl	80042ec <__retarget_lock_acquire_recursive>
 8003b62:	89a3      	ldrh	r3, [r4, #12]
 8003b64:	0719      	lsls	r1, r3, #28
 8003b66:	d51d      	bpl.n	8003ba4 <_puts_r+0x78>
 8003b68:	6923      	ldr	r3, [r4, #16]
 8003b6a:	b1db      	cbz	r3, 8003ba4 <_puts_r+0x78>
 8003b6c:	3e01      	subs	r6, #1
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b74:	3b01      	subs	r3, #1
 8003b76:	60a3      	str	r3, [r4, #8]
 8003b78:	bb39      	cbnz	r1, 8003bca <_puts_r+0x9e>
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	da38      	bge.n	8003bf0 <_puts_r+0xc4>
 8003b7e:	4622      	mov	r2, r4
 8003b80:	210a      	movs	r1, #10
 8003b82:	4628      	mov	r0, r5
 8003b84:	f000 f93e 	bl	8003e04 <__swbuf_r>
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d011      	beq.n	8003bb0 <_puts_r+0x84>
 8003b8c:	250a      	movs	r5, #10
 8003b8e:	e011      	b.n	8003bb4 <_puts_r+0x88>
 8003b90:	4b1b      	ldr	r3, [pc, #108]	; (8003c00 <_puts_r+0xd4>)
 8003b92:	429c      	cmp	r4, r3
 8003b94:	d101      	bne.n	8003b9a <_puts_r+0x6e>
 8003b96:	68ac      	ldr	r4, [r5, #8]
 8003b98:	e7da      	b.n	8003b50 <_puts_r+0x24>
 8003b9a:	4b1a      	ldr	r3, [pc, #104]	; (8003c04 <_puts_r+0xd8>)
 8003b9c:	429c      	cmp	r4, r3
 8003b9e:	bf08      	it	eq
 8003ba0:	68ec      	ldreq	r4, [r5, #12]
 8003ba2:	e7d5      	b.n	8003b50 <_puts_r+0x24>
 8003ba4:	4621      	mov	r1, r4
 8003ba6:	4628      	mov	r0, r5
 8003ba8:	f000 f97e 	bl	8003ea8 <__swsetup_r>
 8003bac:	2800      	cmp	r0, #0
 8003bae:	d0dd      	beq.n	8003b6c <_puts_r+0x40>
 8003bb0:	f04f 35ff 	mov.w	r5, #4294967295
 8003bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bb6:	07da      	lsls	r2, r3, #31
 8003bb8:	d405      	bmi.n	8003bc6 <_puts_r+0x9a>
 8003bba:	89a3      	ldrh	r3, [r4, #12]
 8003bbc:	059b      	lsls	r3, r3, #22
 8003bbe:	d402      	bmi.n	8003bc6 <_puts_r+0x9a>
 8003bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bc2:	f000 fb94 	bl	80042ee <__retarget_lock_release_recursive>
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	bd70      	pop	{r4, r5, r6, pc}
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	da04      	bge.n	8003bd8 <_puts_r+0xac>
 8003bce:	69a2      	ldr	r2, [r4, #24]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	dc06      	bgt.n	8003be2 <_puts_r+0xb6>
 8003bd4:	290a      	cmp	r1, #10
 8003bd6:	d004      	beq.n	8003be2 <_puts_r+0xb6>
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	6022      	str	r2, [r4, #0]
 8003bde:	7019      	strb	r1, [r3, #0]
 8003be0:	e7c5      	b.n	8003b6e <_puts_r+0x42>
 8003be2:	4622      	mov	r2, r4
 8003be4:	4628      	mov	r0, r5
 8003be6:	f000 f90d 	bl	8003e04 <__swbuf_r>
 8003bea:	3001      	adds	r0, #1
 8003bec:	d1bf      	bne.n	8003b6e <_puts_r+0x42>
 8003bee:	e7df      	b.n	8003bb0 <_puts_r+0x84>
 8003bf0:	250a      	movs	r5, #10
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	6022      	str	r2, [r4, #0]
 8003bf8:	701d      	strb	r5, [r3, #0]
 8003bfa:	e7db      	b.n	8003bb4 <_puts_r+0x88>
 8003bfc:	080052fc 	.word	0x080052fc
 8003c00:	0800531c 	.word	0x0800531c
 8003c04:	080052dc 	.word	0x080052dc

08003c08 <puts>:
 8003c08:	4b02      	ldr	r3, [pc, #8]	; (8003c14 <puts+0xc>)
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	f7ff bf8d 	b.w	8003b2c <_puts_r>
 8003c12:	bf00      	nop
 8003c14:	20000070 	.word	0x20000070

08003c18 <setbuf>:
 8003c18:	2900      	cmp	r1, #0
 8003c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1e:	bf0c      	ite	eq
 8003c20:	2202      	moveq	r2, #2
 8003c22:	2200      	movne	r2, #0
 8003c24:	f000 b800 	b.w	8003c28 <setvbuf>

08003c28 <setvbuf>:
 8003c28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c2c:	461d      	mov	r5, r3
 8003c2e:	4b5d      	ldr	r3, [pc, #372]	; (8003da4 <setvbuf+0x17c>)
 8003c30:	4604      	mov	r4, r0
 8003c32:	681f      	ldr	r7, [r3, #0]
 8003c34:	460e      	mov	r6, r1
 8003c36:	4690      	mov	r8, r2
 8003c38:	b127      	cbz	r7, 8003c44 <setvbuf+0x1c>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	b913      	cbnz	r3, 8003c44 <setvbuf+0x1c>
 8003c3e:	4638      	mov	r0, r7
 8003c40:	f000 fab6 	bl	80041b0 <__sinit>
 8003c44:	4b58      	ldr	r3, [pc, #352]	; (8003da8 <setvbuf+0x180>)
 8003c46:	429c      	cmp	r4, r3
 8003c48:	d167      	bne.n	8003d1a <setvbuf+0xf2>
 8003c4a:	687c      	ldr	r4, [r7, #4]
 8003c4c:	f1b8 0f02 	cmp.w	r8, #2
 8003c50:	d006      	beq.n	8003c60 <setvbuf+0x38>
 8003c52:	f1b8 0f01 	cmp.w	r8, #1
 8003c56:	f200 809f 	bhi.w	8003d98 <setvbuf+0x170>
 8003c5a:	2d00      	cmp	r5, #0
 8003c5c:	f2c0 809c 	blt.w	8003d98 <setvbuf+0x170>
 8003c60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c62:	07db      	lsls	r3, r3, #31
 8003c64:	d405      	bmi.n	8003c72 <setvbuf+0x4a>
 8003c66:	89a3      	ldrh	r3, [r4, #12]
 8003c68:	0598      	lsls	r0, r3, #22
 8003c6a:	d402      	bmi.n	8003c72 <setvbuf+0x4a>
 8003c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c6e:	f000 fb3d 	bl	80042ec <__retarget_lock_acquire_recursive>
 8003c72:	4621      	mov	r1, r4
 8003c74:	4638      	mov	r0, r7
 8003c76:	f000 fa07 	bl	8004088 <_fflush_r>
 8003c7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c7c:	b141      	cbz	r1, 8003c90 <setvbuf+0x68>
 8003c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c82:	4299      	cmp	r1, r3
 8003c84:	d002      	beq.n	8003c8c <setvbuf+0x64>
 8003c86:	4638      	mov	r0, r7
 8003c88:	f000 fba0 	bl	80043cc <_free_r>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	6363      	str	r3, [r4, #52]	; 0x34
 8003c90:	2300      	movs	r3, #0
 8003c92:	61a3      	str	r3, [r4, #24]
 8003c94:	6063      	str	r3, [r4, #4]
 8003c96:	89a3      	ldrh	r3, [r4, #12]
 8003c98:	0619      	lsls	r1, r3, #24
 8003c9a:	d503      	bpl.n	8003ca4 <setvbuf+0x7c>
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	6921      	ldr	r1, [r4, #16]
 8003ca0:	f000 fb94 	bl	80043cc <_free_r>
 8003ca4:	89a3      	ldrh	r3, [r4, #12]
 8003ca6:	f1b8 0f02 	cmp.w	r8, #2
 8003caa:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	81a3      	strh	r3, [r4, #12]
 8003cb4:	d06c      	beq.n	8003d90 <setvbuf+0x168>
 8003cb6:	ab01      	add	r3, sp, #4
 8003cb8:	466a      	mov	r2, sp
 8003cba:	4621      	mov	r1, r4
 8003cbc:	4638      	mov	r0, r7
 8003cbe:	f000 fb17 	bl	80042f0 <__swhatbuf_r>
 8003cc2:	89a3      	ldrh	r3, [r4, #12]
 8003cc4:	4318      	orrs	r0, r3
 8003cc6:	81a0      	strh	r0, [r4, #12]
 8003cc8:	2d00      	cmp	r5, #0
 8003cca:	d130      	bne.n	8003d2e <setvbuf+0x106>
 8003ccc:	9d00      	ldr	r5, [sp, #0]
 8003cce:	4628      	mov	r0, r5
 8003cd0:	f000 fb74 	bl	80043bc <malloc>
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d155      	bne.n	8003d86 <setvbuf+0x15e>
 8003cda:	f8dd 9000 	ldr.w	r9, [sp]
 8003cde:	45a9      	cmp	r9, r5
 8003ce0:	d14a      	bne.n	8003d78 <setvbuf+0x150>
 8003ce2:	f04f 35ff 	mov.w	r5, #4294967295
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	60a2      	str	r2, [r4, #8]
 8003cea:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8003cee:	6022      	str	r2, [r4, #0]
 8003cf0:	6122      	str	r2, [r4, #16]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003cf8:	6162      	str	r2, [r4, #20]
 8003cfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003cfc:	f043 0302 	orr.w	r3, r3, #2
 8003d00:	07d2      	lsls	r2, r2, #31
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	d405      	bmi.n	8003d12 <setvbuf+0xea>
 8003d06:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003d0a:	d102      	bne.n	8003d12 <setvbuf+0xea>
 8003d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d0e:	f000 faee 	bl	80042ee <__retarget_lock_release_recursive>
 8003d12:	4628      	mov	r0, r5
 8003d14:	b003      	add	sp, #12
 8003d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <setvbuf+0x184>)
 8003d1c:	429c      	cmp	r4, r3
 8003d1e:	d101      	bne.n	8003d24 <setvbuf+0xfc>
 8003d20:	68bc      	ldr	r4, [r7, #8]
 8003d22:	e793      	b.n	8003c4c <setvbuf+0x24>
 8003d24:	4b22      	ldr	r3, [pc, #136]	; (8003db0 <setvbuf+0x188>)
 8003d26:	429c      	cmp	r4, r3
 8003d28:	bf08      	it	eq
 8003d2a:	68fc      	ldreq	r4, [r7, #12]
 8003d2c:	e78e      	b.n	8003c4c <setvbuf+0x24>
 8003d2e:	2e00      	cmp	r6, #0
 8003d30:	d0cd      	beq.n	8003cce <setvbuf+0xa6>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	b913      	cbnz	r3, 8003d3c <setvbuf+0x114>
 8003d36:	4638      	mov	r0, r7
 8003d38:	f000 fa3a 	bl	80041b0 <__sinit>
 8003d3c:	f1b8 0f01 	cmp.w	r8, #1
 8003d40:	bf08      	it	eq
 8003d42:	89a3      	ldrheq	r3, [r4, #12]
 8003d44:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8003d48:	bf04      	itt	eq
 8003d4a:	f043 0301 	orreq.w	r3, r3, #1
 8003d4e:	81a3      	strheq	r3, [r4, #12]
 8003d50:	89a2      	ldrh	r2, [r4, #12]
 8003d52:	6026      	str	r6, [r4, #0]
 8003d54:	f012 0308 	ands.w	r3, r2, #8
 8003d58:	d01c      	beq.n	8003d94 <setvbuf+0x16c>
 8003d5a:	07d3      	lsls	r3, r2, #31
 8003d5c:	bf41      	itttt	mi
 8003d5e:	2300      	movmi	r3, #0
 8003d60:	426d      	negmi	r5, r5
 8003d62:	60a3      	strmi	r3, [r4, #8]
 8003d64:	61a5      	strmi	r5, [r4, #24]
 8003d66:	bf58      	it	pl
 8003d68:	60a5      	strpl	r5, [r4, #8]
 8003d6a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8003d6c:	f015 0501 	ands.w	r5, r5, #1
 8003d70:	d115      	bne.n	8003d9e <setvbuf+0x176>
 8003d72:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003d76:	e7c8      	b.n	8003d0a <setvbuf+0xe2>
 8003d78:	4648      	mov	r0, r9
 8003d7a:	f000 fb1f 	bl	80043bc <malloc>
 8003d7e:	4606      	mov	r6, r0
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d0ae      	beq.n	8003ce2 <setvbuf+0xba>
 8003d84:	464d      	mov	r5, r9
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d8c:	81a3      	strh	r3, [r4, #12]
 8003d8e:	e7d0      	b.n	8003d32 <setvbuf+0x10a>
 8003d90:	2500      	movs	r5, #0
 8003d92:	e7a8      	b.n	8003ce6 <setvbuf+0xbe>
 8003d94:	60a3      	str	r3, [r4, #8]
 8003d96:	e7e8      	b.n	8003d6a <setvbuf+0x142>
 8003d98:	f04f 35ff 	mov.w	r5, #4294967295
 8003d9c:	e7b9      	b.n	8003d12 <setvbuf+0xea>
 8003d9e:	2500      	movs	r5, #0
 8003da0:	e7b7      	b.n	8003d12 <setvbuf+0xea>
 8003da2:	bf00      	nop
 8003da4:	20000070 	.word	0x20000070
 8003da8:	080052fc 	.word	0x080052fc
 8003dac:	0800531c 	.word	0x0800531c
 8003db0:	080052dc 	.word	0x080052dc

08003db4 <strchr>:
 8003db4:	4603      	mov	r3, r0
 8003db6:	b2c9      	uxtb	r1, r1
 8003db8:	4618      	mov	r0, r3
 8003dba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003dbe:	b112      	cbz	r2, 8003dc6 <strchr+0x12>
 8003dc0:	428a      	cmp	r2, r1
 8003dc2:	d1f9      	bne.n	8003db8 <strchr+0x4>
 8003dc4:	4770      	bx	lr
 8003dc6:	2900      	cmp	r1, #0
 8003dc8:	bf18      	it	ne
 8003dca:	2000      	movne	r0, #0
 8003dcc:	4770      	bx	lr

08003dce <strcpy>:
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003dd4:	f803 2b01 	strb.w	r2, [r3], #1
 8003dd8:	2a00      	cmp	r2, #0
 8003dda:	d1f9      	bne.n	8003dd0 <strcpy+0x2>
 8003ddc:	4770      	bx	lr

08003dde <strncpy>:
 8003dde:	4603      	mov	r3, r0
 8003de0:	b510      	push	{r4, lr}
 8003de2:	3901      	subs	r1, #1
 8003de4:	b132      	cbz	r2, 8003df4 <strncpy+0x16>
 8003de6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003dea:	3a01      	subs	r2, #1
 8003dec:	f803 4b01 	strb.w	r4, [r3], #1
 8003df0:	2c00      	cmp	r4, #0
 8003df2:	d1f7      	bne.n	8003de4 <strncpy+0x6>
 8003df4:	2100      	movs	r1, #0
 8003df6:	441a      	add	r2, r3
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d100      	bne.n	8003dfe <strncpy+0x20>
 8003dfc:	bd10      	pop	{r4, pc}
 8003dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003e02:	e7f9      	b.n	8003df8 <strncpy+0x1a>

08003e04 <__swbuf_r>:
 8003e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e06:	460e      	mov	r6, r1
 8003e08:	4614      	mov	r4, r2
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	b118      	cbz	r0, 8003e16 <__swbuf_r+0x12>
 8003e0e:	6983      	ldr	r3, [r0, #24]
 8003e10:	b90b      	cbnz	r3, 8003e16 <__swbuf_r+0x12>
 8003e12:	f000 f9cd 	bl	80041b0 <__sinit>
 8003e16:	4b21      	ldr	r3, [pc, #132]	; (8003e9c <__swbuf_r+0x98>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	d12b      	bne.n	8003e74 <__swbuf_r+0x70>
 8003e1c:	686c      	ldr	r4, [r5, #4]
 8003e1e:	69a3      	ldr	r3, [r4, #24]
 8003e20:	60a3      	str	r3, [r4, #8]
 8003e22:	89a3      	ldrh	r3, [r4, #12]
 8003e24:	071a      	lsls	r2, r3, #28
 8003e26:	d52f      	bpl.n	8003e88 <__swbuf_r+0x84>
 8003e28:	6923      	ldr	r3, [r4, #16]
 8003e2a:	b36b      	cbz	r3, 8003e88 <__swbuf_r+0x84>
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	6820      	ldr	r0, [r4, #0]
 8003e30:	b2f6      	uxtb	r6, r6
 8003e32:	1ac0      	subs	r0, r0, r3
 8003e34:	6963      	ldr	r3, [r4, #20]
 8003e36:	4637      	mov	r7, r6
 8003e38:	4283      	cmp	r3, r0
 8003e3a:	dc04      	bgt.n	8003e46 <__swbuf_r+0x42>
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4628      	mov	r0, r5
 8003e40:	f000 f922 	bl	8004088 <_fflush_r>
 8003e44:	bb30      	cbnz	r0, 8003e94 <__swbuf_r+0x90>
 8003e46:	68a3      	ldr	r3, [r4, #8]
 8003e48:	3001      	adds	r0, #1
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	60a3      	str	r3, [r4, #8]
 8003e4e:	6823      	ldr	r3, [r4, #0]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	6022      	str	r2, [r4, #0]
 8003e54:	701e      	strb	r6, [r3, #0]
 8003e56:	6963      	ldr	r3, [r4, #20]
 8003e58:	4283      	cmp	r3, r0
 8003e5a:	d004      	beq.n	8003e66 <__swbuf_r+0x62>
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	07db      	lsls	r3, r3, #31
 8003e60:	d506      	bpl.n	8003e70 <__swbuf_r+0x6c>
 8003e62:	2e0a      	cmp	r6, #10
 8003e64:	d104      	bne.n	8003e70 <__swbuf_r+0x6c>
 8003e66:	4621      	mov	r1, r4
 8003e68:	4628      	mov	r0, r5
 8003e6a:	f000 f90d 	bl	8004088 <_fflush_r>
 8003e6e:	b988      	cbnz	r0, 8003e94 <__swbuf_r+0x90>
 8003e70:	4638      	mov	r0, r7
 8003e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e74:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <__swbuf_r+0x9c>)
 8003e76:	429c      	cmp	r4, r3
 8003e78:	d101      	bne.n	8003e7e <__swbuf_r+0x7a>
 8003e7a:	68ac      	ldr	r4, [r5, #8]
 8003e7c:	e7cf      	b.n	8003e1e <__swbuf_r+0x1a>
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <__swbuf_r+0xa0>)
 8003e80:	429c      	cmp	r4, r3
 8003e82:	bf08      	it	eq
 8003e84:	68ec      	ldreq	r4, [r5, #12]
 8003e86:	e7ca      	b.n	8003e1e <__swbuf_r+0x1a>
 8003e88:	4621      	mov	r1, r4
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f000 f80c 	bl	8003ea8 <__swsetup_r>
 8003e90:	2800      	cmp	r0, #0
 8003e92:	d0cb      	beq.n	8003e2c <__swbuf_r+0x28>
 8003e94:	f04f 37ff 	mov.w	r7, #4294967295
 8003e98:	e7ea      	b.n	8003e70 <__swbuf_r+0x6c>
 8003e9a:	bf00      	nop
 8003e9c:	080052fc 	.word	0x080052fc
 8003ea0:	0800531c 	.word	0x0800531c
 8003ea4:	080052dc 	.word	0x080052dc

08003ea8 <__swsetup_r>:
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <__swsetup_r+0xcc>)
 8003eaa:	b570      	push	{r4, r5, r6, lr}
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	4606      	mov	r6, r0
 8003eb0:	460c      	mov	r4, r1
 8003eb2:	b125      	cbz	r5, 8003ebe <__swsetup_r+0x16>
 8003eb4:	69ab      	ldr	r3, [r5, #24]
 8003eb6:	b913      	cbnz	r3, 8003ebe <__swsetup_r+0x16>
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f000 f979 	bl	80041b0 <__sinit>
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	; (8003f78 <__swsetup_r+0xd0>)
 8003ec0:	429c      	cmp	r4, r3
 8003ec2:	d10f      	bne.n	8003ee4 <__swsetup_r+0x3c>
 8003ec4:	686c      	ldr	r4, [r5, #4]
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ecc:	0719      	lsls	r1, r3, #28
 8003ece:	d42c      	bmi.n	8003f2a <__swsetup_r+0x82>
 8003ed0:	06dd      	lsls	r5, r3, #27
 8003ed2:	d411      	bmi.n	8003ef8 <__swsetup_r+0x50>
 8003ed4:	2309      	movs	r3, #9
 8003ed6:	6033      	str	r3, [r6, #0]
 8003ed8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	81a3      	strh	r3, [r4, #12]
 8003ee2:	e03e      	b.n	8003f62 <__swsetup_r+0xba>
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <__swsetup_r+0xd4>)
 8003ee6:	429c      	cmp	r4, r3
 8003ee8:	d101      	bne.n	8003eee <__swsetup_r+0x46>
 8003eea:	68ac      	ldr	r4, [r5, #8]
 8003eec:	e7eb      	b.n	8003ec6 <__swsetup_r+0x1e>
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <__swsetup_r+0xd8>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	bf08      	it	eq
 8003ef4:	68ec      	ldreq	r4, [r5, #12]
 8003ef6:	e7e6      	b.n	8003ec6 <__swsetup_r+0x1e>
 8003ef8:	0758      	lsls	r0, r3, #29
 8003efa:	d512      	bpl.n	8003f22 <__swsetup_r+0x7a>
 8003efc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003efe:	b141      	cbz	r1, 8003f12 <__swsetup_r+0x6a>
 8003f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <__swsetup_r+0x66>
 8003f08:	4630      	mov	r0, r6
 8003f0a:	f000 fa5f 	bl	80043cc <_free_r>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6363      	str	r3, [r4, #52]	; 0x34
 8003f12:	89a3      	ldrh	r3, [r4, #12]
 8003f14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003f18:	81a3      	strh	r3, [r4, #12]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	6063      	str	r3, [r4, #4]
 8003f1e:	6923      	ldr	r3, [r4, #16]
 8003f20:	6023      	str	r3, [r4, #0]
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	f043 0308 	orr.w	r3, r3, #8
 8003f28:	81a3      	strh	r3, [r4, #12]
 8003f2a:	6923      	ldr	r3, [r4, #16]
 8003f2c:	b94b      	cbnz	r3, 8003f42 <__swsetup_r+0x9a>
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003f34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f38:	d003      	beq.n	8003f42 <__swsetup_r+0x9a>
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f000 f9fd 	bl	800433c <__smakebuf_r>
 8003f42:	89a0      	ldrh	r0, [r4, #12]
 8003f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f48:	f010 0301 	ands.w	r3, r0, #1
 8003f4c:	d00a      	beq.n	8003f64 <__swsetup_r+0xbc>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60a3      	str	r3, [r4, #8]
 8003f52:	6963      	ldr	r3, [r4, #20]
 8003f54:	425b      	negs	r3, r3
 8003f56:	61a3      	str	r3, [r4, #24]
 8003f58:	6923      	ldr	r3, [r4, #16]
 8003f5a:	b943      	cbnz	r3, 8003f6e <__swsetup_r+0xc6>
 8003f5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003f60:	d1ba      	bne.n	8003ed8 <__swsetup_r+0x30>
 8003f62:	bd70      	pop	{r4, r5, r6, pc}
 8003f64:	0781      	lsls	r1, r0, #30
 8003f66:	bf58      	it	pl
 8003f68:	6963      	ldrpl	r3, [r4, #20]
 8003f6a:	60a3      	str	r3, [r4, #8]
 8003f6c:	e7f4      	b.n	8003f58 <__swsetup_r+0xb0>
 8003f6e:	2000      	movs	r0, #0
 8003f70:	e7f7      	b.n	8003f62 <__swsetup_r+0xba>
 8003f72:	bf00      	nop
 8003f74:	20000070 	.word	0x20000070
 8003f78:	080052fc 	.word	0x080052fc
 8003f7c:	0800531c 	.word	0x0800531c
 8003f80:	080052dc 	.word	0x080052dc

08003f84 <__sflush_r>:
 8003f84:	898a      	ldrh	r2, [r1, #12]
 8003f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f88:	4605      	mov	r5, r0
 8003f8a:	0710      	lsls	r0, r2, #28
 8003f8c:	460c      	mov	r4, r1
 8003f8e:	d457      	bmi.n	8004040 <__sflush_r+0xbc>
 8003f90:	684b      	ldr	r3, [r1, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	dc04      	bgt.n	8003fa0 <__sflush_r+0x1c>
 8003f96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	dc01      	bgt.n	8003fa0 <__sflush_r+0x1c>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fa0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fa2:	2e00      	cmp	r6, #0
 8003fa4:	d0fa      	beq.n	8003f9c <__sflush_r+0x18>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003fac:	682f      	ldr	r7, [r5, #0]
 8003fae:	602b      	str	r3, [r5, #0]
 8003fb0:	d032      	beq.n	8004018 <__sflush_r+0x94>
 8003fb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fb4:	89a3      	ldrh	r3, [r4, #12]
 8003fb6:	075a      	lsls	r2, r3, #29
 8003fb8:	d505      	bpl.n	8003fc6 <__sflush_r+0x42>
 8003fba:	6863      	ldr	r3, [r4, #4]
 8003fbc:	1ac0      	subs	r0, r0, r3
 8003fbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fc0:	b10b      	cbz	r3, 8003fc6 <__sflush_r+0x42>
 8003fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc4:	1ac0      	subs	r0, r0, r3
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	4602      	mov	r2, r0
 8003fca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003fcc:	4628      	mov	r0, r5
 8003fce:	6a21      	ldr	r1, [r4, #32]
 8003fd0:	47b0      	blx	r6
 8003fd2:	1c43      	adds	r3, r0, #1
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	d106      	bne.n	8003fe6 <__sflush_r+0x62>
 8003fd8:	6829      	ldr	r1, [r5, #0]
 8003fda:	291d      	cmp	r1, #29
 8003fdc:	d82c      	bhi.n	8004038 <__sflush_r+0xb4>
 8003fde:	4a29      	ldr	r2, [pc, #164]	; (8004084 <__sflush_r+0x100>)
 8003fe0:	40ca      	lsrs	r2, r1
 8003fe2:	07d6      	lsls	r6, r2, #31
 8003fe4:	d528      	bpl.n	8004038 <__sflush_r+0xb4>
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	6062      	str	r2, [r4, #4]
 8003fea:	6922      	ldr	r2, [r4, #16]
 8003fec:	04d9      	lsls	r1, r3, #19
 8003fee:	6022      	str	r2, [r4, #0]
 8003ff0:	d504      	bpl.n	8003ffc <__sflush_r+0x78>
 8003ff2:	1c42      	adds	r2, r0, #1
 8003ff4:	d101      	bne.n	8003ffa <__sflush_r+0x76>
 8003ff6:	682b      	ldr	r3, [r5, #0]
 8003ff8:	b903      	cbnz	r3, 8003ffc <__sflush_r+0x78>
 8003ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8003ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ffe:	602f      	str	r7, [r5, #0]
 8004000:	2900      	cmp	r1, #0
 8004002:	d0cb      	beq.n	8003f9c <__sflush_r+0x18>
 8004004:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004008:	4299      	cmp	r1, r3
 800400a:	d002      	beq.n	8004012 <__sflush_r+0x8e>
 800400c:	4628      	mov	r0, r5
 800400e:	f000 f9dd 	bl	80043cc <_free_r>
 8004012:	2000      	movs	r0, #0
 8004014:	6360      	str	r0, [r4, #52]	; 0x34
 8004016:	e7c2      	b.n	8003f9e <__sflush_r+0x1a>
 8004018:	6a21      	ldr	r1, [r4, #32]
 800401a:	2301      	movs	r3, #1
 800401c:	4628      	mov	r0, r5
 800401e:	47b0      	blx	r6
 8004020:	1c41      	adds	r1, r0, #1
 8004022:	d1c7      	bne.n	8003fb4 <__sflush_r+0x30>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0c4      	beq.n	8003fb4 <__sflush_r+0x30>
 800402a:	2b1d      	cmp	r3, #29
 800402c:	d001      	beq.n	8004032 <__sflush_r+0xae>
 800402e:	2b16      	cmp	r3, #22
 8004030:	d101      	bne.n	8004036 <__sflush_r+0xb2>
 8004032:	602f      	str	r7, [r5, #0]
 8004034:	e7b2      	b.n	8003f9c <__sflush_r+0x18>
 8004036:	89a3      	ldrh	r3, [r4, #12]
 8004038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403c:	81a3      	strh	r3, [r4, #12]
 800403e:	e7ae      	b.n	8003f9e <__sflush_r+0x1a>
 8004040:	690f      	ldr	r7, [r1, #16]
 8004042:	2f00      	cmp	r7, #0
 8004044:	d0aa      	beq.n	8003f9c <__sflush_r+0x18>
 8004046:	0793      	lsls	r3, r2, #30
 8004048:	bf18      	it	ne
 800404a:	2300      	movne	r3, #0
 800404c:	680e      	ldr	r6, [r1, #0]
 800404e:	bf08      	it	eq
 8004050:	694b      	ldreq	r3, [r1, #20]
 8004052:	1bf6      	subs	r6, r6, r7
 8004054:	600f      	str	r7, [r1, #0]
 8004056:	608b      	str	r3, [r1, #8]
 8004058:	2e00      	cmp	r6, #0
 800405a:	dd9f      	ble.n	8003f9c <__sflush_r+0x18>
 800405c:	4633      	mov	r3, r6
 800405e:	463a      	mov	r2, r7
 8004060:	4628      	mov	r0, r5
 8004062:	6a21      	ldr	r1, [r4, #32]
 8004064:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004068:	47e0      	blx	ip
 800406a:	2800      	cmp	r0, #0
 800406c:	dc06      	bgt.n	800407c <__sflush_r+0xf8>
 800406e:	89a3      	ldrh	r3, [r4, #12]
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004078:	81a3      	strh	r3, [r4, #12]
 800407a:	e790      	b.n	8003f9e <__sflush_r+0x1a>
 800407c:	4407      	add	r7, r0
 800407e:	1a36      	subs	r6, r6, r0
 8004080:	e7ea      	b.n	8004058 <__sflush_r+0xd4>
 8004082:	bf00      	nop
 8004084:	20400001 	.word	0x20400001

08004088 <_fflush_r>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	690b      	ldr	r3, [r1, #16]
 800408c:	4605      	mov	r5, r0
 800408e:	460c      	mov	r4, r1
 8004090:	b913      	cbnz	r3, 8004098 <_fflush_r+0x10>
 8004092:	2500      	movs	r5, #0
 8004094:	4628      	mov	r0, r5
 8004096:	bd38      	pop	{r3, r4, r5, pc}
 8004098:	b118      	cbz	r0, 80040a2 <_fflush_r+0x1a>
 800409a:	6983      	ldr	r3, [r0, #24]
 800409c:	b90b      	cbnz	r3, 80040a2 <_fflush_r+0x1a>
 800409e:	f000 f887 	bl	80041b0 <__sinit>
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <_fflush_r+0x6c>)
 80040a4:	429c      	cmp	r4, r3
 80040a6:	d11b      	bne.n	80040e0 <_fflush_r+0x58>
 80040a8:	686c      	ldr	r4, [r5, #4]
 80040aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0ef      	beq.n	8004092 <_fflush_r+0xa>
 80040b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80040b4:	07d0      	lsls	r0, r2, #31
 80040b6:	d404      	bmi.n	80040c2 <_fflush_r+0x3a>
 80040b8:	0599      	lsls	r1, r3, #22
 80040ba:	d402      	bmi.n	80040c2 <_fflush_r+0x3a>
 80040bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040be:	f000 f915 	bl	80042ec <__retarget_lock_acquire_recursive>
 80040c2:	4628      	mov	r0, r5
 80040c4:	4621      	mov	r1, r4
 80040c6:	f7ff ff5d 	bl	8003f84 <__sflush_r>
 80040ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040cc:	4605      	mov	r5, r0
 80040ce:	07da      	lsls	r2, r3, #31
 80040d0:	d4e0      	bmi.n	8004094 <_fflush_r+0xc>
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	059b      	lsls	r3, r3, #22
 80040d6:	d4dd      	bmi.n	8004094 <_fflush_r+0xc>
 80040d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040da:	f000 f908 	bl	80042ee <__retarget_lock_release_recursive>
 80040de:	e7d9      	b.n	8004094 <_fflush_r+0xc>
 80040e0:	4b05      	ldr	r3, [pc, #20]	; (80040f8 <_fflush_r+0x70>)
 80040e2:	429c      	cmp	r4, r3
 80040e4:	d101      	bne.n	80040ea <_fflush_r+0x62>
 80040e6:	68ac      	ldr	r4, [r5, #8]
 80040e8:	e7df      	b.n	80040aa <_fflush_r+0x22>
 80040ea:	4b04      	ldr	r3, [pc, #16]	; (80040fc <_fflush_r+0x74>)
 80040ec:	429c      	cmp	r4, r3
 80040ee:	bf08      	it	eq
 80040f0:	68ec      	ldreq	r4, [r5, #12]
 80040f2:	e7da      	b.n	80040aa <_fflush_r+0x22>
 80040f4:	080052fc 	.word	0x080052fc
 80040f8:	0800531c 	.word	0x0800531c
 80040fc:	080052dc 	.word	0x080052dc

08004100 <std>:
 8004100:	2300      	movs	r3, #0
 8004102:	b510      	push	{r4, lr}
 8004104:	4604      	mov	r4, r0
 8004106:	e9c0 3300 	strd	r3, r3, [r0]
 800410a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800410e:	6083      	str	r3, [r0, #8]
 8004110:	8181      	strh	r1, [r0, #12]
 8004112:	6643      	str	r3, [r0, #100]	; 0x64
 8004114:	81c2      	strh	r2, [r0, #14]
 8004116:	6183      	str	r3, [r0, #24]
 8004118:	4619      	mov	r1, r3
 800411a:	2208      	movs	r2, #8
 800411c:	305c      	adds	r0, #92	; 0x5c
 800411e:	f7ff fce5 	bl	8003aec <memset>
 8004122:	4b05      	ldr	r3, [pc, #20]	; (8004138 <std+0x38>)
 8004124:	6224      	str	r4, [r4, #32]
 8004126:	6263      	str	r3, [r4, #36]	; 0x24
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <std+0x3c>)
 800412a:	62a3      	str	r3, [r4, #40]	; 0x28
 800412c:	4b04      	ldr	r3, [pc, #16]	; (8004140 <std+0x40>)
 800412e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <std+0x44>)
 8004132:	6323      	str	r3, [r4, #48]	; 0x30
 8004134:	bd10      	pop	{r4, pc}
 8004136:	bf00      	nop
 8004138:	08004b81 	.word	0x08004b81
 800413c:	08004ba3 	.word	0x08004ba3
 8004140:	08004bdb 	.word	0x08004bdb
 8004144:	08004bff 	.word	0x08004bff

08004148 <_cleanup_r>:
 8004148:	4901      	ldr	r1, [pc, #4]	; (8004150 <_cleanup_r+0x8>)
 800414a:	f000 b8af 	b.w	80042ac <_fwalk_reent>
 800414e:	bf00      	nop
 8004150:	08004089 	.word	0x08004089

08004154 <__sfmoreglue>:
 8004154:	2268      	movs	r2, #104	; 0x68
 8004156:	b570      	push	{r4, r5, r6, lr}
 8004158:	1e4d      	subs	r5, r1, #1
 800415a:	4355      	muls	r5, r2
 800415c:	460e      	mov	r6, r1
 800415e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004162:	f000 f99b 	bl	800449c <_malloc_r>
 8004166:	4604      	mov	r4, r0
 8004168:	b140      	cbz	r0, 800417c <__sfmoreglue+0x28>
 800416a:	2100      	movs	r1, #0
 800416c:	e9c0 1600 	strd	r1, r6, [r0]
 8004170:	300c      	adds	r0, #12
 8004172:	60a0      	str	r0, [r4, #8]
 8004174:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004178:	f7ff fcb8 	bl	8003aec <memset>
 800417c:	4620      	mov	r0, r4
 800417e:	bd70      	pop	{r4, r5, r6, pc}

08004180 <__sfp_lock_acquire>:
 8004180:	4801      	ldr	r0, [pc, #4]	; (8004188 <__sfp_lock_acquire+0x8>)
 8004182:	f000 b8b3 	b.w	80042ec <__retarget_lock_acquire_recursive>
 8004186:	bf00      	nop
 8004188:	200005e9 	.word	0x200005e9

0800418c <__sfp_lock_release>:
 800418c:	4801      	ldr	r0, [pc, #4]	; (8004194 <__sfp_lock_release+0x8>)
 800418e:	f000 b8ae 	b.w	80042ee <__retarget_lock_release_recursive>
 8004192:	bf00      	nop
 8004194:	200005e9 	.word	0x200005e9

08004198 <__sinit_lock_acquire>:
 8004198:	4801      	ldr	r0, [pc, #4]	; (80041a0 <__sinit_lock_acquire+0x8>)
 800419a:	f000 b8a7 	b.w	80042ec <__retarget_lock_acquire_recursive>
 800419e:	bf00      	nop
 80041a0:	200005ea 	.word	0x200005ea

080041a4 <__sinit_lock_release>:
 80041a4:	4801      	ldr	r0, [pc, #4]	; (80041ac <__sinit_lock_release+0x8>)
 80041a6:	f000 b8a2 	b.w	80042ee <__retarget_lock_release_recursive>
 80041aa:	bf00      	nop
 80041ac:	200005ea 	.word	0x200005ea

080041b0 <__sinit>:
 80041b0:	b510      	push	{r4, lr}
 80041b2:	4604      	mov	r4, r0
 80041b4:	f7ff fff0 	bl	8004198 <__sinit_lock_acquire>
 80041b8:	69a3      	ldr	r3, [r4, #24]
 80041ba:	b11b      	cbz	r3, 80041c4 <__sinit+0x14>
 80041bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c0:	f7ff bff0 	b.w	80041a4 <__sinit_lock_release>
 80041c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80041c8:	6523      	str	r3, [r4, #80]	; 0x50
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <__sinit+0x68>)
 80041cc:	4a13      	ldr	r2, [pc, #76]	; (800421c <__sinit+0x6c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80041d2:	42a3      	cmp	r3, r4
 80041d4:	bf08      	it	eq
 80041d6:	2301      	moveq	r3, #1
 80041d8:	4620      	mov	r0, r4
 80041da:	bf08      	it	eq
 80041dc:	61a3      	streq	r3, [r4, #24]
 80041de:	f000 f81f 	bl	8004220 <__sfp>
 80041e2:	6060      	str	r0, [r4, #4]
 80041e4:	4620      	mov	r0, r4
 80041e6:	f000 f81b 	bl	8004220 <__sfp>
 80041ea:	60a0      	str	r0, [r4, #8]
 80041ec:	4620      	mov	r0, r4
 80041ee:	f000 f817 	bl	8004220 <__sfp>
 80041f2:	2200      	movs	r2, #0
 80041f4:	2104      	movs	r1, #4
 80041f6:	60e0      	str	r0, [r4, #12]
 80041f8:	6860      	ldr	r0, [r4, #4]
 80041fa:	f7ff ff81 	bl	8004100 <std>
 80041fe:	2201      	movs	r2, #1
 8004200:	2109      	movs	r1, #9
 8004202:	68a0      	ldr	r0, [r4, #8]
 8004204:	f7ff ff7c 	bl	8004100 <std>
 8004208:	2202      	movs	r2, #2
 800420a:	2112      	movs	r1, #18
 800420c:	68e0      	ldr	r0, [r4, #12]
 800420e:	f7ff ff77 	bl	8004100 <std>
 8004212:	2301      	movs	r3, #1
 8004214:	61a3      	str	r3, [r4, #24]
 8004216:	e7d1      	b.n	80041bc <__sinit+0xc>
 8004218:	080052d8 	.word	0x080052d8
 800421c:	08004149 	.word	0x08004149

08004220 <__sfp>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	4607      	mov	r7, r0
 8004224:	f7ff ffac 	bl	8004180 <__sfp_lock_acquire>
 8004228:	4b1e      	ldr	r3, [pc, #120]	; (80042a4 <__sfp+0x84>)
 800422a:	681e      	ldr	r6, [r3, #0]
 800422c:	69b3      	ldr	r3, [r6, #24]
 800422e:	b913      	cbnz	r3, 8004236 <__sfp+0x16>
 8004230:	4630      	mov	r0, r6
 8004232:	f7ff ffbd 	bl	80041b0 <__sinit>
 8004236:	3648      	adds	r6, #72	; 0x48
 8004238:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800423c:	3b01      	subs	r3, #1
 800423e:	d503      	bpl.n	8004248 <__sfp+0x28>
 8004240:	6833      	ldr	r3, [r6, #0]
 8004242:	b30b      	cbz	r3, 8004288 <__sfp+0x68>
 8004244:	6836      	ldr	r6, [r6, #0]
 8004246:	e7f7      	b.n	8004238 <__sfp+0x18>
 8004248:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800424c:	b9d5      	cbnz	r5, 8004284 <__sfp+0x64>
 800424e:	4b16      	ldr	r3, [pc, #88]	; (80042a8 <__sfp+0x88>)
 8004250:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004254:	60e3      	str	r3, [r4, #12]
 8004256:	6665      	str	r5, [r4, #100]	; 0x64
 8004258:	f000 f847 	bl	80042ea <__retarget_lock_init_recursive>
 800425c:	f7ff ff96 	bl	800418c <__sfp_lock_release>
 8004260:	2208      	movs	r2, #8
 8004262:	4629      	mov	r1, r5
 8004264:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004268:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800426c:	6025      	str	r5, [r4, #0]
 800426e:	61a5      	str	r5, [r4, #24]
 8004270:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004274:	f7ff fc3a 	bl	8003aec <memset>
 8004278:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800427c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004280:	4620      	mov	r0, r4
 8004282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004284:	3468      	adds	r4, #104	; 0x68
 8004286:	e7d9      	b.n	800423c <__sfp+0x1c>
 8004288:	2104      	movs	r1, #4
 800428a:	4638      	mov	r0, r7
 800428c:	f7ff ff62 	bl	8004154 <__sfmoreglue>
 8004290:	4604      	mov	r4, r0
 8004292:	6030      	str	r0, [r6, #0]
 8004294:	2800      	cmp	r0, #0
 8004296:	d1d5      	bne.n	8004244 <__sfp+0x24>
 8004298:	f7ff ff78 	bl	800418c <__sfp_lock_release>
 800429c:	230c      	movs	r3, #12
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	e7ee      	b.n	8004280 <__sfp+0x60>
 80042a2:	bf00      	nop
 80042a4:	080052d8 	.word	0x080052d8
 80042a8:	ffff0001 	.word	0xffff0001

080042ac <_fwalk_reent>:
 80042ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042b0:	4606      	mov	r6, r0
 80042b2:	4688      	mov	r8, r1
 80042b4:	2700      	movs	r7, #0
 80042b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80042ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80042be:	f1b9 0901 	subs.w	r9, r9, #1
 80042c2:	d505      	bpl.n	80042d0 <_fwalk_reent+0x24>
 80042c4:	6824      	ldr	r4, [r4, #0]
 80042c6:	2c00      	cmp	r4, #0
 80042c8:	d1f7      	bne.n	80042ba <_fwalk_reent+0xe>
 80042ca:	4638      	mov	r0, r7
 80042cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042d0:	89ab      	ldrh	r3, [r5, #12]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d907      	bls.n	80042e6 <_fwalk_reent+0x3a>
 80042d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042da:	3301      	adds	r3, #1
 80042dc:	d003      	beq.n	80042e6 <_fwalk_reent+0x3a>
 80042de:	4629      	mov	r1, r5
 80042e0:	4630      	mov	r0, r6
 80042e2:	47c0      	blx	r8
 80042e4:	4307      	orrs	r7, r0
 80042e6:	3568      	adds	r5, #104	; 0x68
 80042e8:	e7e9      	b.n	80042be <_fwalk_reent+0x12>

080042ea <__retarget_lock_init_recursive>:
 80042ea:	4770      	bx	lr

080042ec <__retarget_lock_acquire_recursive>:
 80042ec:	4770      	bx	lr

080042ee <__retarget_lock_release_recursive>:
 80042ee:	4770      	bx	lr

080042f0 <__swhatbuf_r>:
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	460e      	mov	r6, r1
 80042f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f8:	4614      	mov	r4, r2
 80042fa:	2900      	cmp	r1, #0
 80042fc:	461d      	mov	r5, r3
 80042fe:	b096      	sub	sp, #88	; 0x58
 8004300:	da08      	bge.n	8004314 <__swhatbuf_r+0x24>
 8004302:	2200      	movs	r2, #0
 8004304:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004308:	602a      	str	r2, [r5, #0]
 800430a:	061a      	lsls	r2, r3, #24
 800430c:	d410      	bmi.n	8004330 <__swhatbuf_r+0x40>
 800430e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004312:	e00e      	b.n	8004332 <__swhatbuf_r+0x42>
 8004314:	466a      	mov	r2, sp
 8004316:	f000 fc99 	bl	8004c4c <_fstat_r>
 800431a:	2800      	cmp	r0, #0
 800431c:	dbf1      	blt.n	8004302 <__swhatbuf_r+0x12>
 800431e:	9a01      	ldr	r2, [sp, #4]
 8004320:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004324:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004328:	425a      	negs	r2, r3
 800432a:	415a      	adcs	r2, r3
 800432c:	602a      	str	r2, [r5, #0]
 800432e:	e7ee      	b.n	800430e <__swhatbuf_r+0x1e>
 8004330:	2340      	movs	r3, #64	; 0x40
 8004332:	2000      	movs	r0, #0
 8004334:	6023      	str	r3, [r4, #0]
 8004336:	b016      	add	sp, #88	; 0x58
 8004338:	bd70      	pop	{r4, r5, r6, pc}
	...

0800433c <__smakebuf_r>:
 800433c:	898b      	ldrh	r3, [r1, #12]
 800433e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004340:	079d      	lsls	r5, r3, #30
 8004342:	4606      	mov	r6, r0
 8004344:	460c      	mov	r4, r1
 8004346:	d507      	bpl.n	8004358 <__smakebuf_r+0x1c>
 8004348:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	6123      	str	r3, [r4, #16]
 8004350:	2301      	movs	r3, #1
 8004352:	6163      	str	r3, [r4, #20]
 8004354:	b002      	add	sp, #8
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	466a      	mov	r2, sp
 800435a:	ab01      	add	r3, sp, #4
 800435c:	f7ff ffc8 	bl	80042f0 <__swhatbuf_r>
 8004360:	9900      	ldr	r1, [sp, #0]
 8004362:	4605      	mov	r5, r0
 8004364:	4630      	mov	r0, r6
 8004366:	f000 f899 	bl	800449c <_malloc_r>
 800436a:	b948      	cbnz	r0, 8004380 <__smakebuf_r+0x44>
 800436c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004370:	059a      	lsls	r2, r3, #22
 8004372:	d4ef      	bmi.n	8004354 <__smakebuf_r+0x18>
 8004374:	f023 0303 	bic.w	r3, r3, #3
 8004378:	f043 0302 	orr.w	r3, r3, #2
 800437c:	81a3      	strh	r3, [r4, #12]
 800437e:	e7e3      	b.n	8004348 <__smakebuf_r+0xc>
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <__smakebuf_r+0x7c>)
 8004382:	62b3      	str	r3, [r6, #40]	; 0x28
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	6020      	str	r0, [r4, #0]
 8004388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800438c:	81a3      	strh	r3, [r4, #12]
 800438e:	9b00      	ldr	r3, [sp, #0]
 8004390:	6120      	str	r0, [r4, #16]
 8004392:	6163      	str	r3, [r4, #20]
 8004394:	9b01      	ldr	r3, [sp, #4]
 8004396:	b15b      	cbz	r3, 80043b0 <__smakebuf_r+0x74>
 8004398:	4630      	mov	r0, r6
 800439a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800439e:	f000 fc67 	bl	8004c70 <_isatty_r>
 80043a2:	b128      	cbz	r0, 80043b0 <__smakebuf_r+0x74>
 80043a4:	89a3      	ldrh	r3, [r4, #12]
 80043a6:	f023 0303 	bic.w	r3, r3, #3
 80043aa:	f043 0301 	orr.w	r3, r3, #1
 80043ae:	81a3      	strh	r3, [r4, #12]
 80043b0:	89a0      	ldrh	r0, [r4, #12]
 80043b2:	4305      	orrs	r5, r0
 80043b4:	81a5      	strh	r5, [r4, #12]
 80043b6:	e7cd      	b.n	8004354 <__smakebuf_r+0x18>
 80043b8:	08004149 	.word	0x08004149

080043bc <malloc>:
 80043bc:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <malloc+0xc>)
 80043be:	4601      	mov	r1, r0
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	f000 b86b 	b.w	800449c <_malloc_r>
 80043c6:	bf00      	nop
 80043c8:	20000070 	.word	0x20000070

080043cc <_free_r>:
 80043cc:	b538      	push	{r3, r4, r5, lr}
 80043ce:	4605      	mov	r5, r0
 80043d0:	2900      	cmp	r1, #0
 80043d2:	d040      	beq.n	8004456 <_free_r+0x8a>
 80043d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043d8:	1f0c      	subs	r4, r1, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	bfb8      	it	lt
 80043de:	18e4      	addlt	r4, r4, r3
 80043e0:	f000 fc76 	bl	8004cd0 <__malloc_lock>
 80043e4:	4a1c      	ldr	r2, [pc, #112]	; (8004458 <_free_r+0x8c>)
 80043e6:	6813      	ldr	r3, [r2, #0]
 80043e8:	b933      	cbnz	r3, 80043f8 <_free_r+0x2c>
 80043ea:	6063      	str	r3, [r4, #4]
 80043ec:	6014      	str	r4, [r2, #0]
 80043ee:	4628      	mov	r0, r5
 80043f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043f4:	f000 bc72 	b.w	8004cdc <__malloc_unlock>
 80043f8:	42a3      	cmp	r3, r4
 80043fa:	d908      	bls.n	800440e <_free_r+0x42>
 80043fc:	6820      	ldr	r0, [r4, #0]
 80043fe:	1821      	adds	r1, r4, r0
 8004400:	428b      	cmp	r3, r1
 8004402:	bf01      	itttt	eq
 8004404:	6819      	ldreq	r1, [r3, #0]
 8004406:	685b      	ldreq	r3, [r3, #4]
 8004408:	1809      	addeq	r1, r1, r0
 800440a:	6021      	streq	r1, [r4, #0]
 800440c:	e7ed      	b.n	80043ea <_free_r+0x1e>
 800440e:	461a      	mov	r2, r3
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	b10b      	cbz	r3, 8004418 <_free_r+0x4c>
 8004414:	42a3      	cmp	r3, r4
 8004416:	d9fa      	bls.n	800440e <_free_r+0x42>
 8004418:	6811      	ldr	r1, [r2, #0]
 800441a:	1850      	adds	r0, r2, r1
 800441c:	42a0      	cmp	r0, r4
 800441e:	d10b      	bne.n	8004438 <_free_r+0x6c>
 8004420:	6820      	ldr	r0, [r4, #0]
 8004422:	4401      	add	r1, r0
 8004424:	1850      	adds	r0, r2, r1
 8004426:	4283      	cmp	r3, r0
 8004428:	6011      	str	r1, [r2, #0]
 800442a:	d1e0      	bne.n	80043ee <_free_r+0x22>
 800442c:	6818      	ldr	r0, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4401      	add	r1, r0
 8004432:	6011      	str	r1, [r2, #0]
 8004434:	6053      	str	r3, [r2, #4]
 8004436:	e7da      	b.n	80043ee <_free_r+0x22>
 8004438:	d902      	bls.n	8004440 <_free_r+0x74>
 800443a:	230c      	movs	r3, #12
 800443c:	602b      	str	r3, [r5, #0]
 800443e:	e7d6      	b.n	80043ee <_free_r+0x22>
 8004440:	6820      	ldr	r0, [r4, #0]
 8004442:	1821      	adds	r1, r4, r0
 8004444:	428b      	cmp	r3, r1
 8004446:	bf01      	itttt	eq
 8004448:	6819      	ldreq	r1, [r3, #0]
 800444a:	685b      	ldreq	r3, [r3, #4]
 800444c:	1809      	addeq	r1, r1, r0
 800444e:	6021      	streq	r1, [r4, #0]
 8004450:	6063      	str	r3, [r4, #4]
 8004452:	6054      	str	r4, [r2, #4]
 8004454:	e7cb      	b.n	80043ee <_free_r+0x22>
 8004456:	bd38      	pop	{r3, r4, r5, pc}
 8004458:	200005ec 	.word	0x200005ec

0800445c <sbrk_aligned>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	4e0e      	ldr	r6, [pc, #56]	; (8004498 <sbrk_aligned+0x3c>)
 8004460:	460c      	mov	r4, r1
 8004462:	6831      	ldr	r1, [r6, #0]
 8004464:	4605      	mov	r5, r0
 8004466:	b911      	cbnz	r1, 800446e <sbrk_aligned+0x12>
 8004468:	f000 fb7a 	bl	8004b60 <_sbrk_r>
 800446c:	6030      	str	r0, [r6, #0]
 800446e:	4621      	mov	r1, r4
 8004470:	4628      	mov	r0, r5
 8004472:	f000 fb75 	bl	8004b60 <_sbrk_r>
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	d00a      	beq.n	8004490 <sbrk_aligned+0x34>
 800447a:	1cc4      	adds	r4, r0, #3
 800447c:	f024 0403 	bic.w	r4, r4, #3
 8004480:	42a0      	cmp	r0, r4
 8004482:	d007      	beq.n	8004494 <sbrk_aligned+0x38>
 8004484:	1a21      	subs	r1, r4, r0
 8004486:	4628      	mov	r0, r5
 8004488:	f000 fb6a 	bl	8004b60 <_sbrk_r>
 800448c:	3001      	adds	r0, #1
 800448e:	d101      	bne.n	8004494 <sbrk_aligned+0x38>
 8004490:	f04f 34ff 	mov.w	r4, #4294967295
 8004494:	4620      	mov	r0, r4
 8004496:	bd70      	pop	{r4, r5, r6, pc}
 8004498:	200005f0 	.word	0x200005f0

0800449c <_malloc_r>:
 800449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a0:	1ccd      	adds	r5, r1, #3
 80044a2:	f025 0503 	bic.w	r5, r5, #3
 80044a6:	3508      	adds	r5, #8
 80044a8:	2d0c      	cmp	r5, #12
 80044aa:	bf38      	it	cc
 80044ac:	250c      	movcc	r5, #12
 80044ae:	2d00      	cmp	r5, #0
 80044b0:	4607      	mov	r7, r0
 80044b2:	db01      	blt.n	80044b8 <_malloc_r+0x1c>
 80044b4:	42a9      	cmp	r1, r5
 80044b6:	d905      	bls.n	80044c4 <_malloc_r+0x28>
 80044b8:	230c      	movs	r3, #12
 80044ba:	2600      	movs	r6, #0
 80044bc:	603b      	str	r3, [r7, #0]
 80044be:	4630      	mov	r0, r6
 80044c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044c4:	4e2e      	ldr	r6, [pc, #184]	; (8004580 <_malloc_r+0xe4>)
 80044c6:	f000 fc03 	bl	8004cd0 <__malloc_lock>
 80044ca:	6833      	ldr	r3, [r6, #0]
 80044cc:	461c      	mov	r4, r3
 80044ce:	bb34      	cbnz	r4, 800451e <_malloc_r+0x82>
 80044d0:	4629      	mov	r1, r5
 80044d2:	4638      	mov	r0, r7
 80044d4:	f7ff ffc2 	bl	800445c <sbrk_aligned>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	4604      	mov	r4, r0
 80044dc:	d14d      	bne.n	800457a <_malloc_r+0xde>
 80044de:	6834      	ldr	r4, [r6, #0]
 80044e0:	4626      	mov	r6, r4
 80044e2:	2e00      	cmp	r6, #0
 80044e4:	d140      	bne.n	8004568 <_malloc_r+0xcc>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	4631      	mov	r1, r6
 80044ea:	4638      	mov	r0, r7
 80044ec:	eb04 0803 	add.w	r8, r4, r3
 80044f0:	f000 fb36 	bl	8004b60 <_sbrk_r>
 80044f4:	4580      	cmp	r8, r0
 80044f6:	d13a      	bne.n	800456e <_malloc_r+0xd2>
 80044f8:	6821      	ldr	r1, [r4, #0]
 80044fa:	3503      	adds	r5, #3
 80044fc:	1a6d      	subs	r5, r5, r1
 80044fe:	f025 0503 	bic.w	r5, r5, #3
 8004502:	3508      	adds	r5, #8
 8004504:	2d0c      	cmp	r5, #12
 8004506:	bf38      	it	cc
 8004508:	250c      	movcc	r5, #12
 800450a:	4638      	mov	r0, r7
 800450c:	4629      	mov	r1, r5
 800450e:	f7ff ffa5 	bl	800445c <sbrk_aligned>
 8004512:	3001      	adds	r0, #1
 8004514:	d02b      	beq.n	800456e <_malloc_r+0xd2>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	442b      	add	r3, r5
 800451a:	6023      	str	r3, [r4, #0]
 800451c:	e00e      	b.n	800453c <_malloc_r+0xa0>
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	1b52      	subs	r2, r2, r5
 8004522:	d41e      	bmi.n	8004562 <_malloc_r+0xc6>
 8004524:	2a0b      	cmp	r2, #11
 8004526:	d916      	bls.n	8004556 <_malloc_r+0xba>
 8004528:	1961      	adds	r1, r4, r5
 800452a:	42a3      	cmp	r3, r4
 800452c:	6025      	str	r5, [r4, #0]
 800452e:	bf18      	it	ne
 8004530:	6059      	strne	r1, [r3, #4]
 8004532:	6863      	ldr	r3, [r4, #4]
 8004534:	bf08      	it	eq
 8004536:	6031      	streq	r1, [r6, #0]
 8004538:	5162      	str	r2, [r4, r5]
 800453a:	604b      	str	r3, [r1, #4]
 800453c:	4638      	mov	r0, r7
 800453e:	f104 060b 	add.w	r6, r4, #11
 8004542:	f000 fbcb 	bl	8004cdc <__malloc_unlock>
 8004546:	f026 0607 	bic.w	r6, r6, #7
 800454a:	1d23      	adds	r3, r4, #4
 800454c:	1af2      	subs	r2, r6, r3
 800454e:	d0b6      	beq.n	80044be <_malloc_r+0x22>
 8004550:	1b9b      	subs	r3, r3, r6
 8004552:	50a3      	str	r3, [r4, r2]
 8004554:	e7b3      	b.n	80044be <_malloc_r+0x22>
 8004556:	6862      	ldr	r2, [r4, #4]
 8004558:	42a3      	cmp	r3, r4
 800455a:	bf0c      	ite	eq
 800455c:	6032      	streq	r2, [r6, #0]
 800455e:	605a      	strne	r2, [r3, #4]
 8004560:	e7ec      	b.n	800453c <_malloc_r+0xa0>
 8004562:	4623      	mov	r3, r4
 8004564:	6864      	ldr	r4, [r4, #4]
 8004566:	e7b2      	b.n	80044ce <_malloc_r+0x32>
 8004568:	4634      	mov	r4, r6
 800456a:	6876      	ldr	r6, [r6, #4]
 800456c:	e7b9      	b.n	80044e2 <_malloc_r+0x46>
 800456e:	230c      	movs	r3, #12
 8004570:	4638      	mov	r0, r7
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	f000 fbb2 	bl	8004cdc <__malloc_unlock>
 8004578:	e7a1      	b.n	80044be <_malloc_r+0x22>
 800457a:	6025      	str	r5, [r4, #0]
 800457c:	e7de      	b.n	800453c <_malloc_r+0xa0>
 800457e:	bf00      	nop
 8004580:	200005ec 	.word	0x200005ec

08004584 <__sfputc_r>:
 8004584:	6893      	ldr	r3, [r2, #8]
 8004586:	b410      	push	{r4}
 8004588:	3b01      	subs	r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	6093      	str	r3, [r2, #8]
 800458e:	da07      	bge.n	80045a0 <__sfputc_r+0x1c>
 8004590:	6994      	ldr	r4, [r2, #24]
 8004592:	42a3      	cmp	r3, r4
 8004594:	db01      	blt.n	800459a <__sfputc_r+0x16>
 8004596:	290a      	cmp	r1, #10
 8004598:	d102      	bne.n	80045a0 <__sfputc_r+0x1c>
 800459a:	bc10      	pop	{r4}
 800459c:	f7ff bc32 	b.w	8003e04 <__swbuf_r>
 80045a0:	6813      	ldr	r3, [r2, #0]
 80045a2:	1c58      	adds	r0, r3, #1
 80045a4:	6010      	str	r0, [r2, #0]
 80045a6:	7019      	strb	r1, [r3, #0]
 80045a8:	4608      	mov	r0, r1
 80045aa:	bc10      	pop	{r4}
 80045ac:	4770      	bx	lr

080045ae <__sfputs_r>:
 80045ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b0:	4606      	mov	r6, r0
 80045b2:	460f      	mov	r7, r1
 80045b4:	4614      	mov	r4, r2
 80045b6:	18d5      	adds	r5, r2, r3
 80045b8:	42ac      	cmp	r4, r5
 80045ba:	d101      	bne.n	80045c0 <__sfputs_r+0x12>
 80045bc:	2000      	movs	r0, #0
 80045be:	e007      	b.n	80045d0 <__sfputs_r+0x22>
 80045c0:	463a      	mov	r2, r7
 80045c2:	4630      	mov	r0, r6
 80045c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045c8:	f7ff ffdc 	bl	8004584 <__sfputc_r>
 80045cc:	1c43      	adds	r3, r0, #1
 80045ce:	d1f3      	bne.n	80045b8 <__sfputs_r+0xa>
 80045d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080045d4 <_vfiprintf_r>:
 80045d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d8:	460d      	mov	r5, r1
 80045da:	4614      	mov	r4, r2
 80045dc:	4698      	mov	r8, r3
 80045de:	4606      	mov	r6, r0
 80045e0:	b09d      	sub	sp, #116	; 0x74
 80045e2:	b118      	cbz	r0, 80045ec <_vfiprintf_r+0x18>
 80045e4:	6983      	ldr	r3, [r0, #24]
 80045e6:	b90b      	cbnz	r3, 80045ec <_vfiprintf_r+0x18>
 80045e8:	f7ff fde2 	bl	80041b0 <__sinit>
 80045ec:	4b89      	ldr	r3, [pc, #548]	; (8004814 <_vfiprintf_r+0x240>)
 80045ee:	429d      	cmp	r5, r3
 80045f0:	d11b      	bne.n	800462a <_vfiprintf_r+0x56>
 80045f2:	6875      	ldr	r5, [r6, #4]
 80045f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045f6:	07d9      	lsls	r1, r3, #31
 80045f8:	d405      	bmi.n	8004606 <_vfiprintf_r+0x32>
 80045fa:	89ab      	ldrh	r3, [r5, #12]
 80045fc:	059a      	lsls	r2, r3, #22
 80045fe:	d402      	bmi.n	8004606 <_vfiprintf_r+0x32>
 8004600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004602:	f7ff fe73 	bl	80042ec <__retarget_lock_acquire_recursive>
 8004606:	89ab      	ldrh	r3, [r5, #12]
 8004608:	071b      	lsls	r3, r3, #28
 800460a:	d501      	bpl.n	8004610 <_vfiprintf_r+0x3c>
 800460c:	692b      	ldr	r3, [r5, #16]
 800460e:	b9eb      	cbnz	r3, 800464c <_vfiprintf_r+0x78>
 8004610:	4629      	mov	r1, r5
 8004612:	4630      	mov	r0, r6
 8004614:	f7ff fc48 	bl	8003ea8 <__swsetup_r>
 8004618:	b1c0      	cbz	r0, 800464c <_vfiprintf_r+0x78>
 800461a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800461c:	07dc      	lsls	r4, r3, #31
 800461e:	d50e      	bpl.n	800463e <_vfiprintf_r+0x6a>
 8004620:	f04f 30ff 	mov.w	r0, #4294967295
 8004624:	b01d      	add	sp, #116	; 0x74
 8004626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800462a:	4b7b      	ldr	r3, [pc, #492]	; (8004818 <_vfiprintf_r+0x244>)
 800462c:	429d      	cmp	r5, r3
 800462e:	d101      	bne.n	8004634 <_vfiprintf_r+0x60>
 8004630:	68b5      	ldr	r5, [r6, #8]
 8004632:	e7df      	b.n	80045f4 <_vfiprintf_r+0x20>
 8004634:	4b79      	ldr	r3, [pc, #484]	; (800481c <_vfiprintf_r+0x248>)
 8004636:	429d      	cmp	r5, r3
 8004638:	bf08      	it	eq
 800463a:	68f5      	ldreq	r5, [r6, #12]
 800463c:	e7da      	b.n	80045f4 <_vfiprintf_r+0x20>
 800463e:	89ab      	ldrh	r3, [r5, #12]
 8004640:	0598      	lsls	r0, r3, #22
 8004642:	d4ed      	bmi.n	8004620 <_vfiprintf_r+0x4c>
 8004644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004646:	f7ff fe52 	bl	80042ee <__retarget_lock_release_recursive>
 800464a:	e7e9      	b.n	8004620 <_vfiprintf_r+0x4c>
 800464c:	2300      	movs	r3, #0
 800464e:	9309      	str	r3, [sp, #36]	; 0x24
 8004650:	2320      	movs	r3, #32
 8004652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004656:	2330      	movs	r3, #48	; 0x30
 8004658:	f04f 0901 	mov.w	r9, #1
 800465c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004660:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004820 <_vfiprintf_r+0x24c>
 8004664:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004668:	4623      	mov	r3, r4
 800466a:	469a      	mov	sl, r3
 800466c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004670:	b10a      	cbz	r2, 8004676 <_vfiprintf_r+0xa2>
 8004672:	2a25      	cmp	r2, #37	; 0x25
 8004674:	d1f9      	bne.n	800466a <_vfiprintf_r+0x96>
 8004676:	ebba 0b04 	subs.w	fp, sl, r4
 800467a:	d00b      	beq.n	8004694 <_vfiprintf_r+0xc0>
 800467c:	465b      	mov	r3, fp
 800467e:	4622      	mov	r2, r4
 8004680:	4629      	mov	r1, r5
 8004682:	4630      	mov	r0, r6
 8004684:	f7ff ff93 	bl	80045ae <__sfputs_r>
 8004688:	3001      	adds	r0, #1
 800468a:	f000 80aa 	beq.w	80047e2 <_vfiprintf_r+0x20e>
 800468e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004690:	445a      	add	r2, fp
 8004692:	9209      	str	r2, [sp, #36]	; 0x24
 8004694:	f89a 3000 	ldrb.w	r3, [sl]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80a2 	beq.w	80047e2 <_vfiprintf_r+0x20e>
 800469e:	2300      	movs	r3, #0
 80046a0:	f04f 32ff 	mov.w	r2, #4294967295
 80046a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046a8:	f10a 0a01 	add.w	sl, sl, #1
 80046ac:	9304      	str	r3, [sp, #16]
 80046ae:	9307      	str	r3, [sp, #28]
 80046b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046b4:	931a      	str	r3, [sp, #104]	; 0x68
 80046b6:	4654      	mov	r4, sl
 80046b8:	2205      	movs	r2, #5
 80046ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046be:	4858      	ldr	r0, [pc, #352]	; (8004820 <_vfiprintf_r+0x24c>)
 80046c0:	f000 faf8 	bl	8004cb4 <memchr>
 80046c4:	9a04      	ldr	r2, [sp, #16]
 80046c6:	b9d8      	cbnz	r0, 8004700 <_vfiprintf_r+0x12c>
 80046c8:	06d1      	lsls	r1, r2, #27
 80046ca:	bf44      	itt	mi
 80046cc:	2320      	movmi	r3, #32
 80046ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046d2:	0713      	lsls	r3, r2, #28
 80046d4:	bf44      	itt	mi
 80046d6:	232b      	movmi	r3, #43	; 0x2b
 80046d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046dc:	f89a 3000 	ldrb.w	r3, [sl]
 80046e0:	2b2a      	cmp	r3, #42	; 0x2a
 80046e2:	d015      	beq.n	8004710 <_vfiprintf_r+0x13c>
 80046e4:	4654      	mov	r4, sl
 80046e6:	2000      	movs	r0, #0
 80046e8:	f04f 0c0a 	mov.w	ip, #10
 80046ec:	9a07      	ldr	r2, [sp, #28]
 80046ee:	4621      	mov	r1, r4
 80046f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046f4:	3b30      	subs	r3, #48	; 0x30
 80046f6:	2b09      	cmp	r3, #9
 80046f8:	d94e      	bls.n	8004798 <_vfiprintf_r+0x1c4>
 80046fa:	b1b0      	cbz	r0, 800472a <_vfiprintf_r+0x156>
 80046fc:	9207      	str	r2, [sp, #28]
 80046fe:	e014      	b.n	800472a <_vfiprintf_r+0x156>
 8004700:	eba0 0308 	sub.w	r3, r0, r8
 8004704:	fa09 f303 	lsl.w	r3, r9, r3
 8004708:	4313      	orrs	r3, r2
 800470a:	46a2      	mov	sl, r4
 800470c:	9304      	str	r3, [sp, #16]
 800470e:	e7d2      	b.n	80046b6 <_vfiprintf_r+0xe2>
 8004710:	9b03      	ldr	r3, [sp, #12]
 8004712:	1d19      	adds	r1, r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	9103      	str	r1, [sp, #12]
 8004718:	2b00      	cmp	r3, #0
 800471a:	bfbb      	ittet	lt
 800471c:	425b      	neglt	r3, r3
 800471e:	f042 0202 	orrlt.w	r2, r2, #2
 8004722:	9307      	strge	r3, [sp, #28]
 8004724:	9307      	strlt	r3, [sp, #28]
 8004726:	bfb8      	it	lt
 8004728:	9204      	strlt	r2, [sp, #16]
 800472a:	7823      	ldrb	r3, [r4, #0]
 800472c:	2b2e      	cmp	r3, #46	; 0x2e
 800472e:	d10c      	bne.n	800474a <_vfiprintf_r+0x176>
 8004730:	7863      	ldrb	r3, [r4, #1]
 8004732:	2b2a      	cmp	r3, #42	; 0x2a
 8004734:	d135      	bne.n	80047a2 <_vfiprintf_r+0x1ce>
 8004736:	9b03      	ldr	r3, [sp, #12]
 8004738:	3402      	adds	r4, #2
 800473a:	1d1a      	adds	r2, r3, #4
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	9203      	str	r2, [sp, #12]
 8004740:	2b00      	cmp	r3, #0
 8004742:	bfb8      	it	lt
 8004744:	f04f 33ff 	movlt.w	r3, #4294967295
 8004748:	9305      	str	r3, [sp, #20]
 800474a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8004824 <_vfiprintf_r+0x250>
 800474e:	2203      	movs	r2, #3
 8004750:	4650      	mov	r0, sl
 8004752:	7821      	ldrb	r1, [r4, #0]
 8004754:	f000 faae 	bl	8004cb4 <memchr>
 8004758:	b140      	cbz	r0, 800476c <_vfiprintf_r+0x198>
 800475a:	2340      	movs	r3, #64	; 0x40
 800475c:	eba0 000a 	sub.w	r0, r0, sl
 8004760:	fa03 f000 	lsl.w	r0, r3, r0
 8004764:	9b04      	ldr	r3, [sp, #16]
 8004766:	3401      	adds	r4, #1
 8004768:	4303      	orrs	r3, r0
 800476a:	9304      	str	r3, [sp, #16]
 800476c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004770:	2206      	movs	r2, #6
 8004772:	482d      	ldr	r0, [pc, #180]	; (8004828 <_vfiprintf_r+0x254>)
 8004774:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004778:	f000 fa9c 	bl	8004cb4 <memchr>
 800477c:	2800      	cmp	r0, #0
 800477e:	d03f      	beq.n	8004800 <_vfiprintf_r+0x22c>
 8004780:	4b2a      	ldr	r3, [pc, #168]	; (800482c <_vfiprintf_r+0x258>)
 8004782:	bb1b      	cbnz	r3, 80047cc <_vfiprintf_r+0x1f8>
 8004784:	9b03      	ldr	r3, [sp, #12]
 8004786:	3307      	adds	r3, #7
 8004788:	f023 0307 	bic.w	r3, r3, #7
 800478c:	3308      	adds	r3, #8
 800478e:	9303      	str	r3, [sp, #12]
 8004790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004792:	443b      	add	r3, r7
 8004794:	9309      	str	r3, [sp, #36]	; 0x24
 8004796:	e767      	b.n	8004668 <_vfiprintf_r+0x94>
 8004798:	460c      	mov	r4, r1
 800479a:	2001      	movs	r0, #1
 800479c:	fb0c 3202 	mla	r2, ip, r2, r3
 80047a0:	e7a5      	b.n	80046ee <_vfiprintf_r+0x11a>
 80047a2:	2300      	movs	r3, #0
 80047a4:	f04f 0c0a 	mov.w	ip, #10
 80047a8:	4619      	mov	r1, r3
 80047aa:	3401      	adds	r4, #1
 80047ac:	9305      	str	r3, [sp, #20]
 80047ae:	4620      	mov	r0, r4
 80047b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047b4:	3a30      	subs	r2, #48	; 0x30
 80047b6:	2a09      	cmp	r2, #9
 80047b8:	d903      	bls.n	80047c2 <_vfiprintf_r+0x1ee>
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d0c5      	beq.n	800474a <_vfiprintf_r+0x176>
 80047be:	9105      	str	r1, [sp, #20]
 80047c0:	e7c3      	b.n	800474a <_vfiprintf_r+0x176>
 80047c2:	4604      	mov	r4, r0
 80047c4:	2301      	movs	r3, #1
 80047c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80047ca:	e7f0      	b.n	80047ae <_vfiprintf_r+0x1da>
 80047cc:	ab03      	add	r3, sp, #12
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	462a      	mov	r2, r5
 80047d2:	4630      	mov	r0, r6
 80047d4:	4b16      	ldr	r3, [pc, #88]	; (8004830 <_vfiprintf_r+0x25c>)
 80047d6:	a904      	add	r1, sp, #16
 80047d8:	f3af 8000 	nop.w
 80047dc:	4607      	mov	r7, r0
 80047de:	1c78      	adds	r0, r7, #1
 80047e0:	d1d6      	bne.n	8004790 <_vfiprintf_r+0x1bc>
 80047e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047e4:	07d9      	lsls	r1, r3, #31
 80047e6:	d405      	bmi.n	80047f4 <_vfiprintf_r+0x220>
 80047e8:	89ab      	ldrh	r3, [r5, #12]
 80047ea:	059a      	lsls	r2, r3, #22
 80047ec:	d402      	bmi.n	80047f4 <_vfiprintf_r+0x220>
 80047ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047f0:	f7ff fd7d 	bl	80042ee <__retarget_lock_release_recursive>
 80047f4:	89ab      	ldrh	r3, [r5, #12]
 80047f6:	065b      	lsls	r3, r3, #25
 80047f8:	f53f af12 	bmi.w	8004620 <_vfiprintf_r+0x4c>
 80047fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047fe:	e711      	b.n	8004624 <_vfiprintf_r+0x50>
 8004800:	ab03      	add	r3, sp, #12
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	462a      	mov	r2, r5
 8004806:	4630      	mov	r0, r6
 8004808:	4b09      	ldr	r3, [pc, #36]	; (8004830 <_vfiprintf_r+0x25c>)
 800480a:	a904      	add	r1, sp, #16
 800480c:	f000 f882 	bl	8004914 <_printf_i>
 8004810:	e7e4      	b.n	80047dc <_vfiprintf_r+0x208>
 8004812:	bf00      	nop
 8004814:	080052fc 	.word	0x080052fc
 8004818:	0800531c 	.word	0x0800531c
 800481c:	080052dc 	.word	0x080052dc
 8004820:	0800533c 	.word	0x0800533c
 8004824:	08005342 	.word	0x08005342
 8004828:	08005346 	.word	0x08005346
 800482c:	00000000 	.word	0x00000000
 8004830:	080045af 	.word	0x080045af

08004834 <_printf_common>:
 8004834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004838:	4616      	mov	r6, r2
 800483a:	4699      	mov	r9, r3
 800483c:	688a      	ldr	r2, [r1, #8]
 800483e:	690b      	ldr	r3, [r1, #16]
 8004840:	4607      	mov	r7, r0
 8004842:	4293      	cmp	r3, r2
 8004844:	bfb8      	it	lt
 8004846:	4613      	movlt	r3, r2
 8004848:	6033      	str	r3, [r6, #0]
 800484a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800484e:	460c      	mov	r4, r1
 8004850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004854:	b10a      	cbz	r2, 800485a <_printf_common+0x26>
 8004856:	3301      	adds	r3, #1
 8004858:	6033      	str	r3, [r6, #0]
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	0699      	lsls	r1, r3, #26
 800485e:	bf42      	ittt	mi
 8004860:	6833      	ldrmi	r3, [r6, #0]
 8004862:	3302      	addmi	r3, #2
 8004864:	6033      	strmi	r3, [r6, #0]
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	f015 0506 	ands.w	r5, r5, #6
 800486c:	d106      	bne.n	800487c <_printf_common+0x48>
 800486e:	f104 0a19 	add.w	sl, r4, #25
 8004872:	68e3      	ldr	r3, [r4, #12]
 8004874:	6832      	ldr	r2, [r6, #0]
 8004876:	1a9b      	subs	r3, r3, r2
 8004878:	42ab      	cmp	r3, r5
 800487a:	dc28      	bgt.n	80048ce <_printf_common+0x9a>
 800487c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004880:	1e13      	subs	r3, r2, #0
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	bf18      	it	ne
 8004886:	2301      	movne	r3, #1
 8004888:	0692      	lsls	r2, r2, #26
 800488a:	d42d      	bmi.n	80048e8 <_printf_common+0xb4>
 800488c:	4649      	mov	r1, r9
 800488e:	4638      	mov	r0, r7
 8004890:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004894:	47c0      	blx	r8
 8004896:	3001      	adds	r0, #1
 8004898:	d020      	beq.n	80048dc <_printf_common+0xa8>
 800489a:	6823      	ldr	r3, [r4, #0]
 800489c:	68e5      	ldr	r5, [r4, #12]
 800489e:	f003 0306 	and.w	r3, r3, #6
 80048a2:	2b04      	cmp	r3, #4
 80048a4:	bf18      	it	ne
 80048a6:	2500      	movne	r5, #0
 80048a8:	6832      	ldr	r2, [r6, #0]
 80048aa:	f04f 0600 	mov.w	r6, #0
 80048ae:	68a3      	ldr	r3, [r4, #8]
 80048b0:	bf08      	it	eq
 80048b2:	1aad      	subeq	r5, r5, r2
 80048b4:	6922      	ldr	r2, [r4, #16]
 80048b6:	bf08      	it	eq
 80048b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048bc:	4293      	cmp	r3, r2
 80048be:	bfc4      	itt	gt
 80048c0:	1a9b      	subgt	r3, r3, r2
 80048c2:	18ed      	addgt	r5, r5, r3
 80048c4:	341a      	adds	r4, #26
 80048c6:	42b5      	cmp	r5, r6
 80048c8:	d11a      	bne.n	8004900 <_printf_common+0xcc>
 80048ca:	2000      	movs	r0, #0
 80048cc:	e008      	b.n	80048e0 <_printf_common+0xac>
 80048ce:	2301      	movs	r3, #1
 80048d0:	4652      	mov	r2, sl
 80048d2:	4649      	mov	r1, r9
 80048d4:	4638      	mov	r0, r7
 80048d6:	47c0      	blx	r8
 80048d8:	3001      	adds	r0, #1
 80048da:	d103      	bne.n	80048e4 <_printf_common+0xb0>
 80048dc:	f04f 30ff 	mov.w	r0, #4294967295
 80048e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048e4:	3501      	adds	r5, #1
 80048e6:	e7c4      	b.n	8004872 <_printf_common+0x3e>
 80048e8:	2030      	movs	r0, #48	; 0x30
 80048ea:	18e1      	adds	r1, r4, r3
 80048ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048f6:	4422      	add	r2, r4
 80048f8:	3302      	adds	r3, #2
 80048fa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048fe:	e7c5      	b.n	800488c <_printf_common+0x58>
 8004900:	2301      	movs	r3, #1
 8004902:	4622      	mov	r2, r4
 8004904:	4649      	mov	r1, r9
 8004906:	4638      	mov	r0, r7
 8004908:	47c0      	blx	r8
 800490a:	3001      	adds	r0, #1
 800490c:	d0e6      	beq.n	80048dc <_printf_common+0xa8>
 800490e:	3601      	adds	r6, #1
 8004910:	e7d9      	b.n	80048c6 <_printf_common+0x92>
	...

08004914 <_printf_i>:
 8004914:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004918:	7e0f      	ldrb	r7, [r1, #24]
 800491a:	4691      	mov	r9, r2
 800491c:	2f78      	cmp	r7, #120	; 0x78
 800491e:	4680      	mov	r8, r0
 8004920:	460c      	mov	r4, r1
 8004922:	469a      	mov	sl, r3
 8004924:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004926:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800492a:	d807      	bhi.n	800493c <_printf_i+0x28>
 800492c:	2f62      	cmp	r7, #98	; 0x62
 800492e:	d80a      	bhi.n	8004946 <_printf_i+0x32>
 8004930:	2f00      	cmp	r7, #0
 8004932:	f000 80d9 	beq.w	8004ae8 <_printf_i+0x1d4>
 8004936:	2f58      	cmp	r7, #88	; 0x58
 8004938:	f000 80a4 	beq.w	8004a84 <_printf_i+0x170>
 800493c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004940:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004944:	e03a      	b.n	80049bc <_printf_i+0xa8>
 8004946:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800494a:	2b15      	cmp	r3, #21
 800494c:	d8f6      	bhi.n	800493c <_printf_i+0x28>
 800494e:	a101      	add	r1, pc, #4	; (adr r1, 8004954 <_printf_i+0x40>)
 8004950:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004954:	080049ad 	.word	0x080049ad
 8004958:	080049c1 	.word	0x080049c1
 800495c:	0800493d 	.word	0x0800493d
 8004960:	0800493d 	.word	0x0800493d
 8004964:	0800493d 	.word	0x0800493d
 8004968:	0800493d 	.word	0x0800493d
 800496c:	080049c1 	.word	0x080049c1
 8004970:	0800493d 	.word	0x0800493d
 8004974:	0800493d 	.word	0x0800493d
 8004978:	0800493d 	.word	0x0800493d
 800497c:	0800493d 	.word	0x0800493d
 8004980:	08004acf 	.word	0x08004acf
 8004984:	080049f1 	.word	0x080049f1
 8004988:	08004ab1 	.word	0x08004ab1
 800498c:	0800493d 	.word	0x0800493d
 8004990:	0800493d 	.word	0x0800493d
 8004994:	08004af1 	.word	0x08004af1
 8004998:	0800493d 	.word	0x0800493d
 800499c:	080049f1 	.word	0x080049f1
 80049a0:	0800493d 	.word	0x0800493d
 80049a4:	0800493d 	.word	0x0800493d
 80049a8:	08004ab9 	.word	0x08004ab9
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	1d1a      	adds	r2, r3, #4
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	602a      	str	r2, [r5, #0]
 80049b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049bc:	2301      	movs	r3, #1
 80049be:	e0a4      	b.n	8004b0a <_printf_i+0x1f6>
 80049c0:	6820      	ldr	r0, [r4, #0]
 80049c2:	6829      	ldr	r1, [r5, #0]
 80049c4:	0606      	lsls	r6, r0, #24
 80049c6:	f101 0304 	add.w	r3, r1, #4
 80049ca:	d50a      	bpl.n	80049e2 <_printf_i+0xce>
 80049cc:	680e      	ldr	r6, [r1, #0]
 80049ce:	602b      	str	r3, [r5, #0]
 80049d0:	2e00      	cmp	r6, #0
 80049d2:	da03      	bge.n	80049dc <_printf_i+0xc8>
 80049d4:	232d      	movs	r3, #45	; 0x2d
 80049d6:	4276      	negs	r6, r6
 80049d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049dc:	230a      	movs	r3, #10
 80049de:	485e      	ldr	r0, [pc, #376]	; (8004b58 <_printf_i+0x244>)
 80049e0:	e019      	b.n	8004a16 <_printf_i+0x102>
 80049e2:	680e      	ldr	r6, [r1, #0]
 80049e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	bf18      	it	ne
 80049ec:	b236      	sxthne	r6, r6
 80049ee:	e7ef      	b.n	80049d0 <_printf_i+0xbc>
 80049f0:	682b      	ldr	r3, [r5, #0]
 80049f2:	6820      	ldr	r0, [r4, #0]
 80049f4:	1d19      	adds	r1, r3, #4
 80049f6:	6029      	str	r1, [r5, #0]
 80049f8:	0601      	lsls	r1, r0, #24
 80049fa:	d501      	bpl.n	8004a00 <_printf_i+0xec>
 80049fc:	681e      	ldr	r6, [r3, #0]
 80049fe:	e002      	b.n	8004a06 <_printf_i+0xf2>
 8004a00:	0646      	lsls	r6, r0, #25
 8004a02:	d5fb      	bpl.n	80049fc <_printf_i+0xe8>
 8004a04:	881e      	ldrh	r6, [r3, #0]
 8004a06:	2f6f      	cmp	r7, #111	; 0x6f
 8004a08:	bf0c      	ite	eq
 8004a0a:	2308      	moveq	r3, #8
 8004a0c:	230a      	movne	r3, #10
 8004a0e:	4852      	ldr	r0, [pc, #328]	; (8004b58 <_printf_i+0x244>)
 8004a10:	2100      	movs	r1, #0
 8004a12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a16:	6865      	ldr	r5, [r4, #4]
 8004a18:	2d00      	cmp	r5, #0
 8004a1a:	bfa8      	it	ge
 8004a1c:	6821      	ldrge	r1, [r4, #0]
 8004a1e:	60a5      	str	r5, [r4, #8]
 8004a20:	bfa4      	itt	ge
 8004a22:	f021 0104 	bicge.w	r1, r1, #4
 8004a26:	6021      	strge	r1, [r4, #0]
 8004a28:	b90e      	cbnz	r6, 8004a2e <_printf_i+0x11a>
 8004a2a:	2d00      	cmp	r5, #0
 8004a2c:	d04d      	beq.n	8004aca <_printf_i+0x1b6>
 8004a2e:	4615      	mov	r5, r2
 8004a30:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a34:	fb03 6711 	mls	r7, r3, r1, r6
 8004a38:	5dc7      	ldrb	r7, [r0, r7]
 8004a3a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a3e:	4637      	mov	r7, r6
 8004a40:	42bb      	cmp	r3, r7
 8004a42:	460e      	mov	r6, r1
 8004a44:	d9f4      	bls.n	8004a30 <_printf_i+0x11c>
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d10b      	bne.n	8004a62 <_printf_i+0x14e>
 8004a4a:	6823      	ldr	r3, [r4, #0]
 8004a4c:	07de      	lsls	r6, r3, #31
 8004a4e:	d508      	bpl.n	8004a62 <_printf_i+0x14e>
 8004a50:	6923      	ldr	r3, [r4, #16]
 8004a52:	6861      	ldr	r1, [r4, #4]
 8004a54:	4299      	cmp	r1, r3
 8004a56:	bfde      	ittt	le
 8004a58:	2330      	movle	r3, #48	; 0x30
 8004a5a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a5e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a62:	1b52      	subs	r2, r2, r5
 8004a64:	6122      	str	r2, [r4, #16]
 8004a66:	464b      	mov	r3, r9
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	f8cd a000 	str.w	sl, [sp]
 8004a70:	aa03      	add	r2, sp, #12
 8004a72:	f7ff fedf 	bl	8004834 <_printf_common>
 8004a76:	3001      	adds	r0, #1
 8004a78:	d14c      	bne.n	8004b14 <_printf_i+0x200>
 8004a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7e:	b004      	add	sp, #16
 8004a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a84:	4834      	ldr	r0, [pc, #208]	; (8004b58 <_printf_i+0x244>)
 8004a86:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a8a:	6829      	ldr	r1, [r5, #0]
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a92:	6029      	str	r1, [r5, #0]
 8004a94:	061d      	lsls	r5, r3, #24
 8004a96:	d514      	bpl.n	8004ac2 <_printf_i+0x1ae>
 8004a98:	07df      	lsls	r7, r3, #31
 8004a9a:	bf44      	itt	mi
 8004a9c:	f043 0320 	orrmi.w	r3, r3, #32
 8004aa0:	6023      	strmi	r3, [r4, #0]
 8004aa2:	b91e      	cbnz	r6, 8004aac <_printf_i+0x198>
 8004aa4:	6823      	ldr	r3, [r4, #0]
 8004aa6:	f023 0320 	bic.w	r3, r3, #32
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	2310      	movs	r3, #16
 8004aae:	e7af      	b.n	8004a10 <_printf_i+0xfc>
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	f043 0320 	orr.w	r3, r3, #32
 8004ab6:	6023      	str	r3, [r4, #0]
 8004ab8:	2378      	movs	r3, #120	; 0x78
 8004aba:	4828      	ldr	r0, [pc, #160]	; (8004b5c <_printf_i+0x248>)
 8004abc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ac0:	e7e3      	b.n	8004a8a <_printf_i+0x176>
 8004ac2:	0659      	lsls	r1, r3, #25
 8004ac4:	bf48      	it	mi
 8004ac6:	b2b6      	uxthmi	r6, r6
 8004ac8:	e7e6      	b.n	8004a98 <_printf_i+0x184>
 8004aca:	4615      	mov	r5, r2
 8004acc:	e7bb      	b.n	8004a46 <_printf_i+0x132>
 8004ace:	682b      	ldr	r3, [r5, #0]
 8004ad0:	6826      	ldr	r6, [r4, #0]
 8004ad2:	1d18      	adds	r0, r3, #4
 8004ad4:	6961      	ldr	r1, [r4, #20]
 8004ad6:	6028      	str	r0, [r5, #0]
 8004ad8:	0635      	lsls	r5, r6, #24
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	d501      	bpl.n	8004ae2 <_printf_i+0x1ce>
 8004ade:	6019      	str	r1, [r3, #0]
 8004ae0:	e002      	b.n	8004ae8 <_printf_i+0x1d4>
 8004ae2:	0670      	lsls	r0, r6, #25
 8004ae4:	d5fb      	bpl.n	8004ade <_printf_i+0x1ca>
 8004ae6:	8019      	strh	r1, [r3, #0]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	4615      	mov	r5, r2
 8004aec:	6123      	str	r3, [r4, #16]
 8004aee:	e7ba      	b.n	8004a66 <_printf_i+0x152>
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	2100      	movs	r1, #0
 8004af4:	1d1a      	adds	r2, r3, #4
 8004af6:	602a      	str	r2, [r5, #0]
 8004af8:	681d      	ldr	r5, [r3, #0]
 8004afa:	6862      	ldr	r2, [r4, #4]
 8004afc:	4628      	mov	r0, r5
 8004afe:	f000 f8d9 	bl	8004cb4 <memchr>
 8004b02:	b108      	cbz	r0, 8004b08 <_printf_i+0x1f4>
 8004b04:	1b40      	subs	r0, r0, r5
 8004b06:	6060      	str	r0, [r4, #4]
 8004b08:	6863      	ldr	r3, [r4, #4]
 8004b0a:	6123      	str	r3, [r4, #16]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b12:	e7a8      	b.n	8004a66 <_printf_i+0x152>
 8004b14:	462a      	mov	r2, r5
 8004b16:	4649      	mov	r1, r9
 8004b18:	4640      	mov	r0, r8
 8004b1a:	6923      	ldr	r3, [r4, #16]
 8004b1c:	47d0      	blx	sl
 8004b1e:	3001      	adds	r0, #1
 8004b20:	d0ab      	beq.n	8004a7a <_printf_i+0x166>
 8004b22:	6823      	ldr	r3, [r4, #0]
 8004b24:	079b      	lsls	r3, r3, #30
 8004b26:	d413      	bmi.n	8004b50 <_printf_i+0x23c>
 8004b28:	68e0      	ldr	r0, [r4, #12]
 8004b2a:	9b03      	ldr	r3, [sp, #12]
 8004b2c:	4298      	cmp	r0, r3
 8004b2e:	bfb8      	it	lt
 8004b30:	4618      	movlt	r0, r3
 8004b32:	e7a4      	b.n	8004a7e <_printf_i+0x16a>
 8004b34:	2301      	movs	r3, #1
 8004b36:	4632      	mov	r2, r6
 8004b38:	4649      	mov	r1, r9
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	47d0      	blx	sl
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d09b      	beq.n	8004a7a <_printf_i+0x166>
 8004b42:	3501      	adds	r5, #1
 8004b44:	68e3      	ldr	r3, [r4, #12]
 8004b46:	9903      	ldr	r1, [sp, #12]
 8004b48:	1a5b      	subs	r3, r3, r1
 8004b4a:	42ab      	cmp	r3, r5
 8004b4c:	dcf2      	bgt.n	8004b34 <_printf_i+0x220>
 8004b4e:	e7eb      	b.n	8004b28 <_printf_i+0x214>
 8004b50:	2500      	movs	r5, #0
 8004b52:	f104 0619 	add.w	r6, r4, #25
 8004b56:	e7f5      	b.n	8004b44 <_printf_i+0x230>
 8004b58:	0800534d 	.word	0x0800534d
 8004b5c:	0800535e 	.word	0x0800535e

08004b60 <_sbrk_r>:
 8004b60:	b538      	push	{r3, r4, r5, lr}
 8004b62:	2300      	movs	r3, #0
 8004b64:	4d05      	ldr	r5, [pc, #20]	; (8004b7c <_sbrk_r+0x1c>)
 8004b66:	4604      	mov	r4, r0
 8004b68:	4608      	mov	r0, r1
 8004b6a:	602b      	str	r3, [r5, #0]
 8004b6c:	f7fc f806 	bl	8000b7c <_sbrk>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_sbrk_r+0x1a>
 8004b74:	682b      	ldr	r3, [r5, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_sbrk_r+0x1a>
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	200005f4 	.word	0x200005f4

08004b80 <__sread>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	460c      	mov	r4, r1
 8004b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b88:	f000 f8ae 	bl	8004ce8 <_read_r>
 8004b8c:	2800      	cmp	r0, #0
 8004b8e:	bfab      	itete	ge
 8004b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b92:	89a3      	ldrhlt	r3, [r4, #12]
 8004b94:	181b      	addge	r3, r3, r0
 8004b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b9a:	bfac      	ite	ge
 8004b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b9e:	81a3      	strhlt	r3, [r4, #12]
 8004ba0:	bd10      	pop	{r4, pc}

08004ba2 <__swrite>:
 8004ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba6:	461f      	mov	r7, r3
 8004ba8:	898b      	ldrh	r3, [r1, #12]
 8004baa:	4605      	mov	r5, r0
 8004bac:	05db      	lsls	r3, r3, #23
 8004bae:	460c      	mov	r4, r1
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	d505      	bpl.n	8004bc0 <__swrite+0x1e>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bbc:	f000 f868 	bl	8004c90 <_lseek_r>
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004bc8:	81a3      	strh	r3, [r4, #12]
 8004bca:	4628      	mov	r0, r5
 8004bcc:	463b      	mov	r3, r7
 8004bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bd6:	f000 b817 	b.w	8004c08 <_write_r>

08004bda <__sseek>:
 8004bda:	b510      	push	{r4, lr}
 8004bdc:	460c      	mov	r4, r1
 8004bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004be2:	f000 f855 	bl	8004c90 <_lseek_r>
 8004be6:	1c43      	adds	r3, r0, #1
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	bf15      	itete	ne
 8004bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bf6:	81a3      	strheq	r3, [r4, #12]
 8004bf8:	bf18      	it	ne
 8004bfa:	81a3      	strhne	r3, [r4, #12]
 8004bfc:	bd10      	pop	{r4, pc}

08004bfe <__sclose>:
 8004bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c02:	f000 b813 	b.w	8004c2c <_close_r>
	...

08004c08 <_write_r>:
 8004c08:	b538      	push	{r3, r4, r5, lr}
 8004c0a:	4604      	mov	r4, r0
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	2200      	movs	r2, #0
 8004c12:	4d05      	ldr	r5, [pc, #20]	; (8004c28 <_write_r+0x20>)
 8004c14:	602a      	str	r2, [r5, #0]
 8004c16:	461a      	mov	r2, r3
 8004c18:	f7fb ff96 	bl	8000b48 <_write>
 8004c1c:	1c43      	adds	r3, r0, #1
 8004c1e:	d102      	bne.n	8004c26 <_write_r+0x1e>
 8004c20:	682b      	ldr	r3, [r5, #0]
 8004c22:	b103      	cbz	r3, 8004c26 <_write_r+0x1e>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	bd38      	pop	{r3, r4, r5, pc}
 8004c28:	200005f4 	.word	0x200005f4

08004c2c <_close_r>:
 8004c2c:	b538      	push	{r3, r4, r5, lr}
 8004c2e:	2300      	movs	r3, #0
 8004c30:	4d05      	ldr	r5, [pc, #20]	; (8004c48 <_close_r+0x1c>)
 8004c32:	4604      	mov	r4, r0
 8004c34:	4608      	mov	r0, r1
 8004c36:	602b      	str	r3, [r5, #0]
 8004c38:	f7fb ff94 	bl	8000b64 <_close>
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	d102      	bne.n	8004c46 <_close_r+0x1a>
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	b103      	cbz	r3, 8004c46 <_close_r+0x1a>
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	bd38      	pop	{r3, r4, r5, pc}
 8004c48:	200005f4 	.word	0x200005f4

08004c4c <_fstat_r>:
 8004c4c:	b538      	push	{r3, r4, r5, lr}
 8004c4e:	2300      	movs	r3, #0
 8004c50:	4d06      	ldr	r5, [pc, #24]	; (8004c6c <_fstat_r+0x20>)
 8004c52:	4604      	mov	r4, r0
 8004c54:	4608      	mov	r0, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	602b      	str	r3, [r5, #0]
 8004c5a:	f7fb ff86 	bl	8000b6a <_fstat>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	d102      	bne.n	8004c68 <_fstat_r+0x1c>
 8004c62:	682b      	ldr	r3, [r5, #0]
 8004c64:	b103      	cbz	r3, 8004c68 <_fstat_r+0x1c>
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	bd38      	pop	{r3, r4, r5, pc}
 8004c6a:	bf00      	nop
 8004c6c:	200005f4 	.word	0x200005f4

08004c70 <_isatty_r>:
 8004c70:	b538      	push	{r3, r4, r5, lr}
 8004c72:	2300      	movs	r3, #0
 8004c74:	4d05      	ldr	r5, [pc, #20]	; (8004c8c <_isatty_r+0x1c>)
 8004c76:	4604      	mov	r4, r0
 8004c78:	4608      	mov	r0, r1
 8004c7a:	602b      	str	r3, [r5, #0]
 8004c7c:	f7fb ff7a 	bl	8000b74 <_isatty>
 8004c80:	1c43      	adds	r3, r0, #1
 8004c82:	d102      	bne.n	8004c8a <_isatty_r+0x1a>
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	b103      	cbz	r3, 8004c8a <_isatty_r+0x1a>
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	bd38      	pop	{r3, r4, r5, pc}
 8004c8c:	200005f4 	.word	0x200005f4

08004c90 <_lseek_r>:
 8004c90:	b538      	push	{r3, r4, r5, lr}
 8004c92:	4604      	mov	r4, r0
 8004c94:	4608      	mov	r0, r1
 8004c96:	4611      	mov	r1, r2
 8004c98:	2200      	movs	r2, #0
 8004c9a:	4d05      	ldr	r5, [pc, #20]	; (8004cb0 <_lseek_r+0x20>)
 8004c9c:	602a      	str	r2, [r5, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f7fb ff6a 	bl	8000b78 <_lseek>
 8004ca4:	1c43      	adds	r3, r0, #1
 8004ca6:	d102      	bne.n	8004cae <_lseek_r+0x1e>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b103      	cbz	r3, 8004cae <_lseek_r+0x1e>
 8004cac:	6023      	str	r3, [r4, #0]
 8004cae:	bd38      	pop	{r3, r4, r5, pc}
 8004cb0:	200005f4 	.word	0x200005f4

08004cb4 <memchr>:
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	b510      	push	{r4, lr}
 8004cb8:	b2c9      	uxtb	r1, r1
 8004cba:	4402      	add	r2, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	d101      	bne.n	8004cc6 <memchr+0x12>
 8004cc2:	2000      	movs	r0, #0
 8004cc4:	e003      	b.n	8004cce <memchr+0x1a>
 8004cc6:	7804      	ldrb	r4, [r0, #0]
 8004cc8:	3301      	adds	r3, #1
 8004cca:	428c      	cmp	r4, r1
 8004ccc:	d1f6      	bne.n	8004cbc <memchr+0x8>
 8004cce:	bd10      	pop	{r4, pc}

08004cd0 <__malloc_lock>:
 8004cd0:	4801      	ldr	r0, [pc, #4]	; (8004cd8 <__malloc_lock+0x8>)
 8004cd2:	f7ff bb0b 	b.w	80042ec <__retarget_lock_acquire_recursive>
 8004cd6:	bf00      	nop
 8004cd8:	200005e8 	.word	0x200005e8

08004cdc <__malloc_unlock>:
 8004cdc:	4801      	ldr	r0, [pc, #4]	; (8004ce4 <__malloc_unlock+0x8>)
 8004cde:	f7ff bb06 	b.w	80042ee <__retarget_lock_release_recursive>
 8004ce2:	bf00      	nop
 8004ce4:	200005e8 	.word	0x200005e8

08004ce8 <_read_r>:
 8004ce8:	b538      	push	{r3, r4, r5, lr}
 8004cea:	4604      	mov	r4, r0
 8004cec:	4608      	mov	r0, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4d05      	ldr	r5, [pc, #20]	; (8004d08 <_read_r+0x20>)
 8004cf4:	602a      	str	r2, [r5, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f7fb ff18 	bl	8000b2c <_read>
 8004cfc:	1c43      	adds	r3, r0, #1
 8004cfe:	d102      	bne.n	8004d06 <_read_r+0x1e>
 8004d00:	682b      	ldr	r3, [r5, #0]
 8004d02:	b103      	cbz	r3, 8004d06 <_read_r+0x1e>
 8004d04:	6023      	str	r3, [r4, #0]
 8004d06:	bd38      	pop	{r3, r4, r5, pc}
 8004d08:	200005f4 	.word	0x200005f4

08004d0c <_init>:
 8004d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0e:	bf00      	nop
 8004d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d12:	bc08      	pop	{r3}
 8004d14:	469e      	mov	lr, r3
 8004d16:	4770      	bx	lr

08004d18 <_fini>:
 8004d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1a:	bf00      	nop
 8004d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d1e:	bc08      	pop	{r3}
 8004d20:	469e      	mov	lr, r3
 8004d22:	4770      	bx	lr
